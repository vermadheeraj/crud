openapi: 3.0.0
info:
  title: December 2, 2022 Datadog API Collection
  description: >-
    The Datadog API is an HTTP REST API. The API uses resource-oriented URLs to
    call the API, uses status codes to indicate the success or failure of
    requests, returns JSON from all requests, and uses standard HTTP response
    codes. Use the Datadog API to access the Datadog platform programmatically.


    For the official documentation, see
    [https://docs.datadoghq.com/api/](https://docs.datadoghq.com/api/)


    This API collection was last updated on December 2, 2022.
  version: 1.0.0
servers:
  - url: http://{{baseurl}}
  - url: https://{{subdomain}}.{{site}}
  - url: https://http-intake.logs.datadoghq.com
security:
  - apiKeyAuth: []
  - appKeyAuth: []
components:
  securitySchemes:
    apiKeyAuth:
      type: apiKey 
      in: header
      name: DD-API-KEY
    appKeyAuth:
      type: apiKey 
      in: header
      name: DD-APPLICATION-KEY
tags:
  - name: Audit
    description: Search your Audit Logs events over HTTP.
  - name: Authentication
    description: >-
      All requests to Datadog’s API must be authenticated.

      Requests that write data require reporting access and require an `API
      key`.

      Requests that read data require full access and also require an
      `application key`.


      **Note:** All Datadog API clients are configured by default to consume
      Datadog US site APIs.

      If you are on the Datadog EU site, set the environment variable
      `DATADOG_HOST` to

      `https://api.datadoghq.eu` or override this value directly when creating
      your client.


      [Manage your account’s API and application
      keys](https://app.datadoghq.com/account/settings#api).
  - name: AuthN Mappings
    description: >-
      [AuthN Mappings
      API](https://docs.datadoghq.com/account_management/authn_mapping/?tab=example)

      is used to automatically map group of users to roles in Datadog using
      attributes

      sent from Identity Providers.
  - name: AWS Integration
    description: >-
      Configure your Datadog-AWS integration directly through the Datadog API.

      For more information, see the [AWS integration
      page](https://docs.datadoghq.com/integrations/amazon_web_services).
  - name: AWS Logs Integration
    description: >-
      Configure your Datadog-AWS-Logs integration directly through Datadog API.

      For more information, see the [AWS integration
      page](https://docs.datadoghq.com/api/?lang=bash#integration-aws-logs).
  - name: Azure Integration
    description: >-
      Configure your Datadog-Azure integration directly through the Datadog API.

      For more information, see the [Datadog-Azure integration
      page](https://docs.datadoghq.com/integrations/azure).
  - name: CI Visibility Pipelines
    description: Search or aggregate your CI Visibility pipeline events over HTTP.
  - name: CI Visibility Tests
    description: Search or aggregate your CI Visibility test events over HTTP.
  - name: Cloud Workload Security
    description: >-
      Workload activity security rules for generating events using the Datadog
      security Agent.
  - name: Confluent Cloud
    description: >-
      Configure your Datadog Confluent Cloud integration directly through the
      Datadog API.
  - name: Dashboard Lists
    description: |-
      Interact with your dashboard lists through the API to
      organize, find, and share all of your dashboards with your team and
      organization.
  - name: Dashboards
    description: >-
      Interact with your dashboard lists through the API to make it easier to
      organize,

      find, and share all of your dashboards with your team and organization.
  - name: Downtimes
    description: >-
      [Downtiming](https://docs.datadoghq.com/monitors/notify/downtimes) gives

      you greater control over monitor notifications by allowing you to globally
      exclude

      scopes from alerting. Downtime settings, which can be scheduled with start
      and

      end times, prevent all alerting related to specified Datadog tags.
  - name: Embeddable Graphs
    description: Interact with embeddable graphs through the API.
  - name: Events
    description: >-
      The events service allows you to programmatically post events to the event
      stream

      and fetch events from the event stream. Events are limited to 4000
      characters.

      If an event is sent out with a message containing more than 4000
      characters, only the

      first 4000 characters are displayed.
  - name: GCP Integration
    description: >-
      Configure your Datadog-Google Cloud Platform (GCP) integration directly

      through the Datadog API. Read more about the [Datadog-Google Cloud
      Platform
      integration](https://docs.datadoghq.com/integrations/google_cloud_platform).
  - name: Hosts
    description: Get information about your live hosts in Datadog.
  - name: Incident Teams
    description: >-
      Create, update, delete and retrieve teams which can be associated with
      incidents.
  - name: IP Ranges
    description: Get a list of IP prefixes belonging to Datadog.
  - name: Key Management
    description: >-
      Manage your Datadog API and application keys. You need an API key and

      an application key for a user with the required permissions to interact

      with these endpoints. The full list of API and application keys can be

      seen on your [Datadog API
      page](https://app.datadoghq.com/account/settings#api).
  - name: Logs
    description: Search your logs and send them to your Datadog platform over HTTP.
  - name: Logs Archives
    description: |-
      Archives forward all the logs ingested to a cloud storage system.

      See the [Archives Page](https://app.datadoghq.com/logs/pipelines/archives)
      for a list of the archives currently configured in web UI.
  - name: Logs Indexes
    description: >-
      Manage configuration of [log
      indexes](https://docs.datadoghq.com/logs/indexes/).

      You need an API and application key with Admin rights to interact with
      this endpoint.
  - name: Logs Metrics
    description: >-
      Manage configuration of [log-based
      metrics](https://app.datadoghq.com/logs/pipelines/generate-metrics) for
      your organization.
  - name: Logs Pipelines
    description: >-
      Pipelines and processors operate on incoming logs, parsing

      and transforming them into structured attributes for easier querying.


      - See the [pipelines configuration
      page](https://app.datadoghq.com/logs/pipelines)
        for a list of the pipelines and processors currently configured in web UI.

      - Additional API-related information about processors can be found in the
        [processors documentation](https://docs.datadoghq.com/logs/log_configuration/processors/?tab=api#lookup-processor).

      - For more information about Pipelines, see the
        [pipeline documentation](https://docs.datadoghq.com/logs/log_configuration/pipelines).

      **Notes:**


      These endpoints are only available for admin users.

      Make sure to use an application key created by an admin.


      **Grok parsing rules may effect JSON output and require

      returned data to be configured before using in a request.**

      For example, if you are using the data returned from a

      request for another request body, and have a parsing rule

      that uses a regex pattern like `\s` for spaces, you will

      need to configure all escaped spaces as `%{space}` to use

      in the body data.
  - name: Metrics
    description: >-
      The metrics endpoint allows you to:


      - Post metrics data so it can be graphed on Datadog’s dashboards

      - Query metrics from any time period

      - Modify tag configurations for metrics

      - View tags and volumes for metrics


      **Note**: A graph can only contain a set number of points

      and as the timeframe over which a metric is viewed increases,

      aggregation between points occurs to stay below that set number.


      The Post, Patch, and Delete `manage_tags` API methods can only be
      performed by

      a user who has the `Manage Tags for Metrics` permission.
  - name: Monitors
    description: >-
      [Monitors](https://docs.datadoghq.com/monitors) allow you to watch a
      metric or check that you care about and

      notifies your team when a defined threshold has exceeded.


      For more information, see [Creating
      Monitors](https://docs.datadoghq.com/monitors/create/types/).
  - name: Notebooks
    description: >-
      Interact with your notebooks through the API to make it easier to
      organize, find, and

      share all of your notebooks with your team and organization. For more
      information, see the

      [Notebooks documentation](https://docs.datadoghq.com/notebooks/).
  - name: Opsgenie Integration
    description: >-
      Configure your [Datadog Opsgenie
      integration](https://docs.datadoghq.com/integrations/opsgenie/)

      directly through the Datadog API.
  - name: Organizations
    description: >-
      Create, edit, and manage your organizations. Read more about [multi-org
      accounts](https://docs.datadoghq.com/account_management/multi_organization).
  - name: PagerDuty Integration
    description: >-
      Configure your [Datadog-PagerDuty
      integration](https://docs.datadoghq.com/integrations/pagerduty/)

      directly through the Datadog API.
  - name: Processes
    description: >-
      The processes API allows you to query processes data for your
      organization.
  - name: Roles
    description: >-
      The Roles API is used to create and manage Datadog roles, what

      [global permissions](https://docs.datadoghq.com/account_management/rbac/)

      they grant, and which users belong to them.


      Permissions related to specific account assets can be granted to roles

      in the Datadog application without using this API. For example, granting

      read access on a specific log index to a role can be done in Datadog from
      the

      [Pipelines page](https://app.datadoghq.com/logs/pipelines).
  - name: RUM
    description: Search or aggregate your RUM events over HTTP.
  - name: Security Monitoring
    description: |-
      Detection rules for generating signals and listing of generated
      signals.
  - name: Service Accounts
    description: Create, edit, and disable service accounts.
  - name: Service Checks
    description: >-
      The service check endpoint allows you to post check statuses for use with
      monitors.

      Service check messages are limited to 500 characters. If a check is posted
      with a message

      containing more than 500 characters, only the first 500 characters are
      displayed. Messages

      are limited for checks with a Critical or Warning status, they are dropped
      for checks with

      an OK status.


      - [Read more about Service Check monitors.][1]

      - [Read more about Process Check monitors.][2]

      - [Read more about Network Check monitors.][3]

      - [Read more about Custom Check monitors.][4]

      - [Read more about Service Check and status codes.][5]


      [1]: https://docs.datadoghq.com/monitors/create/types/host/?tab=checkalert

      [2]:
      https://docs.datadoghq.com/monitors/create/types/process_check/?tab=checkalert

      [3]:
      https://docs.datadoghq.com/monitors/create/types/network/?tab=checkalert

      [4]:
      https://docs.datadoghq.com/monitors/create/types/custom_check/?tab=checkalert

      [5]: https://docs.datadoghq.com/developers/service_checks/
  - name: Service Definition
    description: API to create, update, retrieve and delete service definitions.
  - name: Service Dependencies
    description: >-
      APM Service Map API. For more information, visit

      the [services map
      documentation](https://docs.datadoghq.com/tracing/visualization/services_map/).
  - name: Service Level Objectives
    description: >-
      [Service Level
      Objectives](https://docs.datadoghq.com/monitors/service_level_objectives/#configuration)

      (or SLOs) are a key part of the site reliability engineering toolkit.

      SLOs provide a framework for defining clear targets around application
      performance,

      which ultimately help teams provide a consistent customer experience,

      balance feature development with platform stability,

      and improve communication with internal and external users.
  - name: Service Level Objective Corrections
    description: >-
      SLO Status Corrections allow you to prevent specific time periods from
      negatively impacting

      your SLO’s status and error budget. You can use Status Corrections for
      various purposes, such

      as removing planned maintenance windows, non-business hours, or other time
      periods that do

      not correspond to genuine issues.
  - name: Slack Integration
    description: >-
      Configure your [Datadog-Slack
      integration](https://docs.datadoghq.com/integrations/slack)

      directly through the Datadog API.
  - name: Snapshots
    description: Take graph snapshots using the API.
  - name: Synthetics
    description: >-
      Datadog Synthetics uses simulated user requests and browser rendering to
      help you ensure uptime,

      identify regional issues, and track your application performance. Datadog
      Synthetics tests come in

      two different flavors, [API
      tests](https://docs.datadoghq.com/synthetics/api_tests/?tab=httptest)

      and [browser tests](https://docs.datadoghq.com/synthetics/browser_tests).
      You can use Datadog’s API to

      manage both test types programmatically.


      For more information about Synthetics, see the [Synthetics
      overview](https://docs.datadoghq.com/synthetics/).
  - name: Tags
    description: >-
      The tag endpoint allows you to assign tags to hosts,

      for example: `role:database`. Those tags are applied to

      all metrics sent by the host. Refer to hosts by name

      (`yourhost.example.com`) when fetching and applying

      tags to a particular host.


      The component of your infrastructure responsible for a tag is identified

      by a source. For example, some valid sources include nagios, hudson,
      jenkins,

      users, feed, chef, puppet, git, bitbucket, fabric, capistrano, etc.


      Read more about tags on the dedicated

      [documentation page](https://docs.datadoghq.com/tagging).
  - name: Usage Metering
    description: >-
      The usage metering API allows you to get hourly, daily, and

      monthly usage across multiple facets of Datadog.

      This API is available to all Pro and Enterprise customers.

      Usage is only accessible for [parent-level
      organizations](https://docs.datadoghq.com/account_management/multi_organization/).


      **Note**: Usage data is delayed by up to 72 hours from when it was
      incurred.

      It is retained for 15 months.


      You can retrieve up to 24 hours of hourly usage data for multiple
      organizations,

      and up to two months of hourly usage data for a single organization in one
      request.
  - name: Users
    description: Create, edit, and disable users.
  - name: Webhooks Integration
    description: >-
      Configure your Datadog-Webhooks integration directly through the Datadog
      API.

      For more information about the Datadog-Webhooks integration,

      see the [integration
      page](https://docs.datadoghq.com/integrations/webhooks).
paths:
  /api/v2/audit/events:
    get:
      tags:
        - Audit
      summary: Get a list of Audit Logs events
      description: >-
        List endpoint returns events that match a Audit Logs search query.

        [Results are paginated][1].


        Use this endpoint to see your latest Audit Logs events.


        [1]:
        https://docs.datadoghq.com/logs/guide/collect-multiple-logs-with-pagination
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: filter[query]
          in: query
          schema:
            type: string
          description: Search query following Audit Logs syntax.
          example: <string>
        - name: filter[from]
          in: query
          schema:
            type: string
          description: Minimum timestamp for requested events.
          example: <dateTime>
        - name: filter[to]
          in: query
          schema:
            type: string
          description: Maximum timestamp for requested events.
          example: <dateTime>
        - name: sort
          in: query
          schema:
            type: string
          description: Order of events in results.
          example: <string>
        - name: page[cursor]
          in: query
          schema:
            type: string
          description: List following results with a cursor provided in the previous query.
          example: <string>
        - name: page[limit]
          in: query
          schema:
            type: integer
          description: Maximum number of events in the response.
          example: '10'
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - attributes:
                      attributes:
                        ut12a: {}
                        sit_eb2: {}
                        ullamco0: {}
                        in_8ad: {}
                      service: web-app
                      tags:
                        - team:A
                      timestamp: '2019-01-02T09:42:36.320Z'
                    id: AAAAAWgN8Xwgr1vKDQAAAABBV2dOOFh3ZzZobm1mWXJFYTR0OA
                    type: audit
                  - attributes:
                      attributes:
                        id_37: {}
                        aliquip_75: {}
                      service: web-app
                      tags:
                        - team:A
                      timestamp: '2019-01-02T09:42:36.320Z'
                    id: AAAAAWgN8Xwgr1vKDQAAAABBV2dOOFh3ZzZobm1mWXJFYTR0OA
                    type: audit
                links:
                  next: >-
                    https://app.datadoghq.com/api/v2/audit/event?filter[query]=foo&page[cursor]=eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==
                meta:
                  elapsed: 132
                  page:
                    after: >-
                      eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==
                  request_id: MWlFUjVaWGZTTTZPYzM0VXp1OXU2d3xLSVpEMjZKQ0VKUTI0dEYtM3RSOFVR
                  status: done
                  warnings:
                    - code: unknown_index
                      detail: 'indexes: foo, bar'
                      title: >-
                        One or several indexes are missing or invalid, results
                        hold data from the other indexes
                    - code: unknown_index
                      detail: 'indexes: foo, bar'
                      title: >-
                        One or several indexes are missing or invalid, results
                        hold data from the other indexes
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v2/audit/events/search:
    post:
      tags:
        - Audit
      summary: Search Audit Logs events
      description: >-
        List endpoint returns Audit Logs events that match an Audit search
        query.

        [Results are paginated][1].


        Use this endpoint to build complex Audit Logs events filtering and
        search.


        [1]:
        https://docs.datadoghq.com/logs/guide/collect-multiple-logs-with-pagination
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                filter:
                  from: now-15m
                  query: '*'
                  to: now
                options:
                  time_offset: <long>
                  timezone: UTC
                page:
                  cursor: <string>
                  limit: 10
                sort: <string>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - attributes:
                      attributes:
                        ut12a: {}
                        sit_eb2: {}
                        ullamco0: {}
                        in_8ad: {}
                      service: web-app
                      tags:
                        - team:A
                      timestamp: '2019-01-02T09:42:36.320Z'
                    id: AAAAAWgN8Xwgr1vKDQAAAABBV2dOOFh3ZzZobm1mWXJFYTR0OA
                    type: audit
                  - attributes:
                      attributes:
                        id_37: {}
                        aliquip_75: {}
                      service: web-app
                      tags:
                        - team:A
                      timestamp: '2019-01-02T09:42:36.320Z'
                    id: AAAAAWgN8Xwgr1vKDQAAAABBV2dOOFh3ZzZobm1mWXJFYTR0OA
                    type: audit
                links:
                  next: >-
                    https://app.datadoghq.com/api/v2/audit/event?filter[query]=foo&page[cursor]=eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==
                meta:
                  elapsed: 132
                  page:
                    after: >-
                      eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==
                  request_id: MWlFUjVaWGZTTTZPYzM0VXp1OXU2d3xLSVpEMjZKQ0VKUTI0dEYtM3RSOFVR
                  status: done
                  warnings:
                    - code: unknown_index
                      detail: 'indexes: foo, bar'
                      title: >-
                        One or several indexes are missing or invalid, results
                        hold data from the other indexes
                    - code: unknown_index
                      detail: 'indexes: foo, bar'
                      title: >-
                        One or several indexes are missing or invalid, results
                        hold data from the other indexes
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/validate:
    get:
      tags:
        - Authentication
      summary: Validate API key
      description: >-
        Check if the API key (not the APP key) is valid. If invalid, a 403 is
        returned.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                valid: true
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v2/authn_mappings:
    get:
      tags:
        - AuthN Mappings
      summary: List all AuthN Mappings
      description: List all AuthN Mappings in the org.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: page[size]
          in: query
          schema:
            type: integer
          description: Size for a given page.
          example: '10'
        - name: page[number]
          in: query
          schema:
            type: integer
          description: Specific page number to return.
          example: '0'
        - name: sort
          in: query
          schema:
            type: string
          description: Sort AuthN Mappings depending on the given field.
          example: <string>
        - name: filter
          in: query
          schema:
            type: string
          description: Filter all mappings by the given string.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                    type: authn_mappings
                    attributes:
                      attribute_key: member-of
                      attribute_value: Development
                      created_at: '1998-04-10T16:32:47.751Z'
                      modified_at: '1980-07-20T12:18:30.437Z'
                      saml_assertion_attribute_id: '0'
                    relationships:
                      role:
                        data:
                          id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                          type: roles
                      saml_assertion_attribute:
                        data:
                          id: '0'
                          type: saml_assertion_attributes
                  - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                    type: authn_mappings
                    attributes:
                      attribute_key: member-of
                      attribute_value: Development
                      created_at: '1992-05-03T12:19:58.541Z'
                      modified_at: '1961-09-05T08:30:42.911Z'
                      saml_assertion_attribute_id: '0'
                    relationships:
                      role:
                        data:
                          id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                          type: roles
                      saml_assertion_attribute:
                        data:
                          id: '0'
                          type: saml_assertion_attributes
                included:
                  - id: '0'
                    type: saml_assertion_attributes
                    attributes:
                      attribute_key: member-of
                      attribute_value: Development
                  - id: '0'
                    type: saml_assertion_attributes
                    attributes:
                      attribute_key: member-of
                      attribute_value: Development
                meta:
                  page:
                    total_count: 37466683
                    total_filtered_count: 98235423
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    post:
      tags:
        - AuthN Mappings
      summary: Create an AuthN Mapping
      description: Create an AuthN Mapping.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                data:
                  type: authn_mappings
                  attributes:
                    attribute_key: <string>
                    attribute_value: <string>
                  relationships:
                    role:
                      data:
                        id: <string>
                        type: roles
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                  type: authn_mappings
                  attributes:
                    attribute_key: member-of
                    attribute_value: Development
                    created_at: '2002-11-09T11:17:42.016Z'
                    modified_at: '1951-01-04T23:06:38.208Z'
                    saml_assertion_attribute_id: '0'
                  relationships:
                    role:
                      data:
                        id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                        type: roles
                    saml_assertion_attribute:
                      data:
                        id: '0'
                        type: saml_assertion_attributes
                included:
                  - id: '0'
                    type: saml_assertion_attributes
                    attributes:
                      attribute_key: member-of
                      attribute_value: Development
                  - id: '0'
                    type: saml_assertion_attributes
                    attributes:
                      attribute_key: member-of
                      attribute_value: Development
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v2/authn_mappings/{authn_mapping_id}:
    delete:
      tags:
        - AuthN Mappings
      summary: Delete an AuthN Mapping
      description: Delete an AuthN Mapping specified by AuthN Mapping UUID.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: authn_mapping_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The UUID of the AuthN Mapping.
          example: <string>
      responses:
        '204':
          description: No Content
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    get:
      tags:
        - AuthN Mappings
      summary: Get an AuthN Mapping by UUID
      description: Get an AuthN Mapping specified by the AuthN Mapping UUID.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: authn_mapping_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The UUID of the AuthN Mapping.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                  type: authn_mappings
                  attributes:
                    attribute_key: member-of
                    attribute_value: Development
                    created_at: '2002-11-09T11:17:42.016Z'
                    modified_at: '1951-01-04T23:06:38.208Z'
                    saml_assertion_attribute_id: '0'
                  relationships:
                    role:
                      data:
                        id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                        type: roles
                    saml_assertion_attribute:
                      data:
                        id: '0'
                        type: saml_assertion_attributes
                included:
                  - id: '0'
                    type: saml_assertion_attributes
                    attributes:
                      attribute_key: member-of
                      attribute_value: Development
                  - id: '0'
                    type: saml_assertion_attributes
                    attributes:
                      attribute_key: member-of
                      attribute_value: Development
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    patch:
      tags:
        - AuthN Mappings
      summary: Edit an AuthN Mapping
      description: Edit an AuthN Mapping.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                data:
                  id: <string>
                  type: authn_mappings
                  attributes:
                    attribute_key: <string>
                    attribute_value: <string>
                  relationships:
                    role:
                      data:
                        id: <string>
                        type: roles
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: authn_mapping_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The UUID of the AuthN Mapping.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                  type: authn_mappings
                  attributes:
                    attribute_key: member-of
                    attribute_value: Development
                    created_at: '2002-11-09T11:17:42.016Z'
                    modified_at: '1951-01-04T23:06:38.208Z'
                    saml_assertion_attribute_id: '0'
                  relationships:
                    role:
                      data:
                        id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                        type: roles
                    saml_assertion_attribute:
                      data:
                        id: '0'
                        type: saml_assertion_attributes
                included:
                  - id: '0'
                    type: saml_assertion_attributes
                    attributes:
                      attribute_key: member-of
                      attribute_value: Development
                  - id: '0'
                    type: saml_assertion_attributes
                    attributes:
                      attribute_key: member-of
                      attribute_value: Development
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '409':
          description: Conflict
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/integration/aws:
    delete:
      tags:
        - AWS Integration
      summary: Delete an AWS integration
      description: >-
        Delete a Datadog-AWS integration matching the specified `account_id` and
        `role_name parameters`.
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example: {}
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '409':
          description: Conflict
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    get:
      tags:
        - AWS Integration
      summary: List all AWS integrations
      description: >-
        List all Datadog-AWS integrations available in your Datadog
        organization.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: account_id
          in: query
          schema:
            type: string
          description: Only return AWS accounts that matches this `account_id`.
          example: proident
        - name: role_name
          in: query
          schema:
            type: string
          description: Only return AWS accounts that matches this role_name.
          example: proident
        - name: access_key_id
          in: query
          schema:
            type: string
          description: Only return AWS accounts that matches this `access_key_id`.
          example: proident
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                accounts:
                  - access_key_id: sed voluptate eiusmod ullamco
                    account_id: '1234567'
                    account_specific_namespace_rules:
                      auto_scaling: false
                      opswork: false
                    cspm_resource_collection_enabled: true
                    excluded_regions:
                      - us-east-1
                      - us-west-2
                    filter_tags:
                      - $KEY:$VALUE
                    host_tags:
                      - $KEY:$VALUE
                    metrics_collection_enabled: false
                    resource_collection_enabled: true
                    role_name: DatadogAWSIntegrationRole
                    secret_access_key: mollit id
                  - access_key_id: incididunt exercitation anim
                    account_id: '1234567'
                    account_specific_namespace_rules:
                      auto_scaling: false
                      opswork: false
                    cspm_resource_collection_enabled: true
                    excluded_regions:
                      - us-east-1
                      - us-west-2
                    filter_tags:
                      - $KEY:$VALUE
                    host_tags:
                      - $KEY:$VALUE
                    metrics_collection_enabled: false
                    resource_collection_enabled: true
                    role_name: DatadogAWSIntegrationRole
                    secret_access_key: consectetur et occaecat voluptate
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    post:
      tags:
        - AWS Integration
      summary: Create an AWS integration
      description: >-
        Create a Datadog-Amazon Web Services integration.

        Using the `POST` method updates your integration configuration

        by adding your new configuration to the existing one in your Datadog
        organization.

        A unique AWS Account ID for role based authentication.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                access_key_id: aute est in
                account_id: '1234567'
                account_specific_namespace_rules:
                  auto_scaling: false
                  opswork: false
                cspm_resource_collection_enabled: true
                excluded_regions:
                  - us-east-1
                  - us-west-2
                filter_tags:
                  - $KEY:$VALUE
                host_tags:
                  - $KEY:$VALUE
                metrics_collection_enabled: false
                resource_collection_enabled: true
                role_name: DatadogAWSIntegrationRole
                secret_access_key: dolor mollit
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                external_id: ullamco dolore u
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '409':
          description: Conflict
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    put:
      tags:
        - AWS Integration
      summary: Update an AWS integration
      description: Update a Datadog-Amazon Web Services integration.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                access_key_id: aute est in
                account_id: '1234567'
                account_specific_namespace_rules:
                  auto_scaling: false
                  opswork: false
                cspm_resource_collection_enabled: true
                excluded_regions:
                  - us-east-1
                  - us-west-2
                filter_tags:
                  - $KEY:$VALUE
                host_tags:
                  - $KEY:$VALUE
                metrics_collection_enabled: false
                resource_collection_enabled: true
                role_name: DatadogAWSIntegrationRole
                secret_access_key: dolor mollit
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: account_id
          in: query
          schema:
            type: string
          description: Only return AWS accounts that matches this `account_id`.
          example: proident
        - name: role_name
          in: query
          schema:
            type: string
          description: |-
            Only return AWS accounts that match this `role_name`.
            Required if `account_id` is specified.
          example: proident
        - name: access_key_id
          in: query
          schema:
            type: string
          description: |-
            Only return AWS accounts that matches this `access_key_id`.
            Required if none of the other two options are specified.
          example: proident
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example: {}
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '409':
          description: Conflict
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/integration/aws/available_namespace_rules:
    get:
      tags:
        - AWS Integration
      summary: List namespace rules
      description: >-
        List all namespace rules for a given Datadog-AWS integration. This
        endpoint takes no arguments.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                - namespace1
                - namespace2
                - namespace3
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/integration/aws/filtering:
    delete:
      tags:
        - AWS Integration
      summary: Delete a tag filtering entry
      description: Delete a tag filtering entry.
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example: {}
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    get:
      tags:
        - AWS Integration
      summary: Get all AWS tag filters
      description: Get all AWS tag filters.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: account_id
          in: query
          schema:
            type: string
          description: (Required) Only return AWS filters that matches this `account_id`.
          example: proident
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                filters:
                  - namespace: elb
                    tag_filter_str: prod*
                  - namespace: application_elb
                    tag_filter_str: prod*
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    post:
      tags:
        - AWS Integration
      summary: Set an AWS tag filter
      description: Set an AWS tag filter.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                account_id: '1234567'
                namespace: rds
                tag_filter_str: prod*
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example: {}
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/integration/aws/generate_new_external_id:
    put:
      tags:
        - AWS Integration
      summary: Generate a new external ID
      description: >-
        Generate a new AWS external ID for a given AWS account ID and role name
        pair.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                access_key_id: aute est in
                account_id: '1234567'
                account_specific_namespace_rules:
                  auto_scaling: false
                  opswork: false
                cspm_resource_collection_enabled: true
                excluded_regions:
                  - us-east-1
                  - us-west-2
                filter_tags:
                  - $KEY:$VALUE
                host_tags:
                  - $KEY:$VALUE
                metrics_collection_enabled: false
                resource_collection_enabled: true
                role_name: DatadogAWSIntegrationRole
                secret_access_key: dolor mollit
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                external_id: ullamco dolore u
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/integration/aws/logs:
    delete:
      tags:
        - AWS Logs Integration
      summary: Delete an AWS Logs integration
      description: >-
        Delete a Datadog-AWS logs configuration by removing the specific Lambda
        ARN associated with a given AWS account.
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example: {}
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    get:
      tags:
        - AWS Logs Integration
      summary: List all AWS Logs integrations
      description: >-
        List all Datadog-AWS Logs integrations configured in your Datadog
        account.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                - account_id: '1234567'
                  lambdas:
                    - arn: >-
                        arn:aws:lambda:us-east-1:1234567:function:LogsCollectionAPITest
                  services:
                    - s3
                    - elb
                    - elbv2
                    - cloudfront
                    - redshift
                    - lambda
                - account_id: '1234567'
                  lambdas:
                    - arn: >-
                        arn:aws:lambda:us-east-1:1234567:function:LogsCollectionAPITest
                  services:
                    - s3
                    - elb
                    - elbv2
                    - cloudfront
                    - redshift
                    - lambda
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    post:
      tags:
        - AWS Logs Integration
      summary: Add AWS Log Lambda ARN
      description: >-
        Attach the Lambda ARN of the Lambda created for the Datadog-AWS log
        collection to your AWS account ID to enable log collection.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                account_id: '1234567'
                lambda_arn: >-
                  arn:aws:lambda:us-east-1:1234567:function:LogsCollectionAPITest
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example: {}
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/integration/aws/logs/check_async:
    post:
      tags:
        - AWS Logs Integration
      summary: Check that an AWS Lambda Function exists
      description: >-
        Test if permissions are present to add a log-forwarding triggers for the
        given services and AWS account. The input

        is the same as for Enable an AWS service log collection. Subsequent
        requests will always repeat the above, so this

        endpoint can be polled intermittently instead of blocking.


        - Returns a status of 'created' when it's checking if the Lambda exists
        in the account.

        - Returns a status of 'waiting' while checking.

        - Returns a status of 'checked and ok' if the Lambda exists.

        - Returns a status of 'error' if the Lambda does not exist.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                account_id: '1234567'
                lambda_arn: >-
                  arn:aws:lambda:us-east-1:1234567:function:LogsCollectionAPITest
      security:
        - apiKeyAuth: []
        - appKeyAuth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - code: no_such_config
                    message: AWS account 12345 has no lambda config to update
                  - code: no_such_config
                    message: AWS account 12345 has no lambda config to update
                status: created
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/integration/aws/logs/services:
    get:
      tags:
        - AWS Logs Integration
      summary: Get list of AWS log ready services
      description: >-
        Get the list of current AWS services that Datadog offers automatic log
        collection. Use returned service IDs with the services parameter for the
        Enable an AWS service log collection API endpoint.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                - label: S3 Access Logs
                - label: Classic ELB Access Logs
                - label: Application ELB Access Logs
                - label: CloudFront Access Logs
                - label: Redshift Logs
                - label: Lambda Cloudwatch Logs
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    post:
      tags:
        - AWS Logs Integration
      summary: Enable an AWS Logs integration
      description: >-
        Enable automatic log collection for a list of services. This should be
        run after running `CreateAWSLambdaARN` to save the configuration.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                account_id: '1234567'
                services:
                  - s3
                  - elb
                  - elbv2
                  - cloudfront
                  - redshift
                  - lambda
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example: {}
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/integration/aws/logs/services_async:
    post:
      tags:
        - AWS Logs Integration
      summary: Check permissions for log services
      description: >-
        Test if permissions are present to add log-forwarding triggers for the

        given services and AWS account. Input is the same as for
        `EnableAWSLogServices`.

        Done async, so can be repeatedly polled in a non-blocking fashion until

        the async request completes.


        - Returns a status of `created` when it's checking if the permissions
        exists
          in the AWS account.
        - Returns a status of `waiting` while checking.

        - Returns a status of `checked and ok` if the Lambda exists.

        - Returns a status of `error` if the Lambda does not exist.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                account_id: '1234567'
                services:
                  - s3
                  - elb
                  - elbv2
                  - cloudfront
                  - redshift
                  - lambda
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - code: no_such_config
                    message: AWS account 12345 has no lambda config to update
                  - code: no_such_config
                    message: AWS account 12345 has no lambda config to update
                status: created
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/integration/azure:
    delete:
      tags:
        - Azure Integration
      summary: Delete an Azure integration
      description: Delete a given Datadog-Azure integration from your Datadog account.
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example: {}
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    get:
      tags:
        - Azure Integration
      summary: List all Azure integrations
      description: List all Datadog-Azure integrations configured in your Datadog account.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                - automute: true
                  client_id: testc7f6-1234-5678-9101-3fcbf464test
                  client_secret: testingx./Sw*g/Y33t..R1cH+hScMDt
                  errors:
                    - '*'
                  host_filters: key:value,filter:example
                  new_client_id: new1c7f6-1234-5678-9101-3fcbf464test
                  new_tenant_name: new1c44-1234-5678-9101-cc00736ftest
                  tenant_name: testc44-1234-5678-9101-cc00736ftest
                - automute: true
                  client_id: testc7f6-1234-5678-9101-3fcbf464test
                  client_secret: testingx./Sw*g/Y33t..R1cH+hScMDt
                  errors:
                    - '*'
                  host_filters: key:value,filter:example
                  new_client_id: new1c7f6-1234-5678-9101-3fcbf464test
                  new_tenant_name: new1c44-1234-5678-9101-cc00736ftest
                  tenant_name: testc44-1234-5678-9101-cc00736ftest
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    post:
      tags:
        - Azure Integration
      summary: Create an Azure integration
      description: >-
        Create a Datadog-Azure integration.


        Using the `POST` method updates your integration configuration by adding
        your new

        configuration to the existing one in your Datadog organization.


        Using the `PUT` method updates your integration configuration by
        replacing your

        current configuration with the new one sent to your Datadog
        organization.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                automute: true
                client_id: testc7f6-1234-5678-9101-3fcbf464test
                client_secret: testingx./Sw*g/Y33t..R1cH+hScMDt
                errors:
                  - '*'
                host_filters: key:value,filter:example
                new_client_id: new1c7f6-1234-5678-9101-3fcbf464test
                new_tenant_name: new1c44-1234-5678-9101-cc00736ftest
                tenant_name: testc44-1234-5678-9101-cc00736ftest
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example: {}
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    put:
      tags:
        - Azure Integration
      summary: Update an Azure integration
      description: >-
        Update a Datadog-Azure integration. Requires an existing `tenant_name`
        and `client_id`.

        Any other fields supplied will overwrite existing values. To overwrite
        `tenant_name` or `client_id`,

        use `new_tenant_name` and `new_client_id`. To leave a field unchanged,
        do not supply that field in the payload.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                automute: true
                client_id: testc7f6-1234-5678-9101-3fcbf464test
                client_secret: testingx./Sw*g/Y33t..R1cH+hScMDt
                errors:
                  - '*'
                host_filters: key:value,filter:example
                new_client_id: new1c7f6-1234-5678-9101-3fcbf464test
                new_tenant_name: new1c44-1234-5678-9101-cc00736ftest
                tenant_name: testc44-1234-5678-9101-cc00736ftest
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example: {}
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/integration/azure/host_filters:
    post:
      tags:
        - Azure Integration
      summary: Update Azure integration host filters
      description: >-
        Update the defined list of host filters for a given Datadog-Azure
        integration.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                automute: true
                client_id: testc7f6-1234-5678-9101-3fcbf464test
                client_secret: testingx./Sw*g/Y33t..R1cH+hScMDt
                errors:
                  - '*'
                host_filters: key:value,filter:example
                new_client_id: new1c7f6-1234-5678-9101-3fcbf464test
                new_tenant_name: new1c44-1234-5678-9101-cc00736ftest
                tenant_name: testc44-1234-5678-9101-cc00736ftest
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example: {}
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v2/ci/pipelines/analytics/aggregate:
    post:
      tags:
        - CI Visibility Pipelines
      summary: Aggregate pipelines events
      description: >-
        The API endpoint to aggregate CI Visibility pipeline events into buckets
        of computed metrics and timeseries.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                compute:
                  - aggregation: <string>
                    interval: <string>
                    metric: <string>
                    type: total
                  - aggregation: <string>
                    interval: <string>
                    metric: <string>
                    type: total
                filter:
                  from: now-15m
                  query: '*'
                  to: now
                group_by:
                  - facet: <string>
                    histogram:
                      interval: <double>
                      min: <double>
                      max: <double>
                    limit: 10
                    missing: <string>
                    sort:
                      aggregation: <string>
                      metric: <string>
                      order: <string>
                      type: alphabetical
                    total: <boolean>
                  - facet: <string>
                    histogram:
                      interval: <double>
                      min: <double>
                      max: <double>
                    limit: 10
                    missing: <string>
                    sort:
                      aggregation: <string>
                      metric: <string>
                      order: <string>
                      type: alphabetical
                    total: <boolean>
                options:
                  time_offset: <long>
                  timezone: UTC
                page:
                  cursor: <string>
                  limit: 10
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  buckets:
                    - by:
                        '@ci.provider.name': gitlab
                        '@ci.status': success
                      computes:
                        quis_c: ex dolor nos
                    - by:
                        '@ci.provider.name': gitlab
                        '@ci.status': success
                      computes:
                        proident_6: esse quis anim dolo
                links:
                  next: >-
                    https://app.datadoghq.com/api/v2/ci/tests/events?filter[query]=foo&page[cursor]=eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==
                meta:
                  elapsed: 132
                  page:
                    after: >-
                      eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==
                  request_id: MWlFUjVaWGZTTTZPYzM0VXp1OXU2d3xLSVpEMjZKQ0VKUTI0dEYtM3RSOFVR
                  status: done
                  warnings:
                    - code: unknown_index
                      detail: 'indexes: foo, bar'
                      title: >-
                        One or several indexes are missing or invalid, results
                        hold data from the other indexes
                    - code: unknown_index
                      detail: 'indexes: foo, bar'
                      title: >-
                        One or several indexes are missing or invalid, results
                        hold data from the other indexes
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v2/ci/pipelines/events:
    get:
      tags:
        - CI Visibility Pipelines
      summary: Get a list of pipelines events
      description: >-
        List endpoint returns CI Visibility pipeline events that match a log
        search query.

        [Results are paginated similarly to
        logs](https://docs.datadoghq.com/logs/guide/collect-multiple-logs-with-pagination).


        Use this endpoint to see your latest pipeline events.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: filter[query]
          in: query
          schema:
            type: string
          description: Search query following log syntax.
          example: <string>
        - name: filter[from]
          in: query
          schema:
            type: string
          description: Minimum timestamp for requested events.
          example: <dateTime>
        - name: filter[to]
          in: query
          schema:
            type: string
          description: Maximum timestamp for requested events.
          example: <dateTime>
        - name: sort
          in: query
          schema:
            type: string
          description: Order of events in results.
          example: <string>
        - name: page[cursor]
          in: query
          schema:
            type: string
          description: List following results with a cursor provided in the previous query.
          example: <string>
        - name: page[limit]
          in: query
          schema:
            type: integer
          description: Maximum number of events in the response.
          example: '10'
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - attributes:
                      attributes:
                        esseb: {}
                      service: web-ui-tests
                      tags:
                        - team:A
                      timestamp: '2019-01-02T09:42:36.320Z'
                    id: AAAAAWgN8Xwgr1vKDQAAAABBV2dOOFh3ZzZobm1mWXJFYTR0OA
                    type: cipipeline
                  - attributes:
                      attributes:
                        adb: {}
                        eiusmod_adb: {}
                      service: web-ui-tests
                      tags:
                        - team:A
                      timestamp: '2019-01-02T09:42:36.320Z'
                    id: AAAAAWgN8Xwgr1vKDQAAAABBV2dOOFh3ZzZobm1mWXJFYTR0OA
                    type: cipipeline
                links:
                  next: >-
                    https://app.datadoghq.com/api/v2/ci/tests/events?filter[query]=foo&page[cursor]=eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==
                meta:
                  elapsed: 132
                  page:
                    after: >-
                      eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==
                  request_id: MWlFUjVaWGZTTTZPYzM0VXp1OXU2d3xLSVpEMjZKQ0VKUTI0dEYtM3RSOFVR
                  status: done
                  warnings:
                    - code: unknown_index
                      detail: 'indexes: foo, bar'
                      title: >-
                        One or several indexes are missing or invalid, results
                        hold data from the other indexes
                    - code: unknown_index
                      detail: 'indexes: foo, bar'
                      title: >-
                        One or several indexes are missing or invalid, results
                        hold data from the other indexes
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v2/ci/pipelines/events/search:
    post:
      tags:
        - CI Visibility Pipelines
      summary: Search pipelines events
      description: >-
        List endpoint returns CI Visibility pipeline events that match a log
        search query.

        [Results are paginated similarly to
        logs](https://docs.datadoghq.com/logs/guide/collect-multiple-logs-with-pagination).


        Use this endpoint to build complex events filtering and search.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                filter:
                  from: now-15m
                  query: '*'
                  to: now
                options:
                  time_offset: <long>
                  timezone: UTC
                page:
                  cursor: <string>
                  limit: 10
                sort: <string>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - attributes:
                      attributes:
                        esseb: {}
                      service: web-ui-tests
                      tags:
                        - team:A
                      timestamp: '2019-01-02T09:42:36.320Z'
                    id: AAAAAWgN8Xwgr1vKDQAAAABBV2dOOFh3ZzZobm1mWXJFYTR0OA
                    type: cipipeline
                  - attributes:
                      attributes:
                        adb: {}
                        eiusmod_adb: {}
                      service: web-ui-tests
                      tags:
                        - team:A
                      timestamp: '2019-01-02T09:42:36.320Z'
                    id: AAAAAWgN8Xwgr1vKDQAAAABBV2dOOFh3ZzZobm1mWXJFYTR0OA
                    type: cipipeline
                links:
                  next: >-
                    https://app.datadoghq.com/api/v2/ci/tests/events?filter[query]=foo&page[cursor]=eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==
                meta:
                  elapsed: 132
                  page:
                    after: >-
                      eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==
                  request_id: MWlFUjVaWGZTTTZPYzM0VXp1OXU2d3xLSVpEMjZKQ0VKUTI0dEYtM3RSOFVR
                  status: done
                  warnings:
                    - code: unknown_index
                      detail: 'indexes: foo, bar'
                      title: >-
                        One or several indexes are missing or invalid, results
                        hold data from the other indexes
                    - code: unknown_index
                      detail: 'indexes: foo, bar'
                      title: >-
                        One or several indexes are missing or invalid, results
                        hold data from the other indexes
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v2/ci/tests/analytics/aggregate:
    post:
      tags:
        - CI Visibility Tests
      summary: Aggregate tests events
      description: >-
        The API endpoint to aggregate CI Visibility test events into buckets of
        computed metrics and timeseries.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                compute:
                  - aggregation: <string>
                    interval: <string>
                    metric: <string>
                    type: total
                  - aggregation: <string>
                    interval: <string>
                    metric: <string>
                    type: total
                filter:
                  from: now-15m
                  query: '*'
                  to: now
                group_by:
                  - facet: <string>
                    histogram:
                      interval: <double>
                      min: <double>
                      max: <double>
                    limit: 10
                    missing: <string>
                    sort:
                      aggregation: <string>
                      metric: <string>
                      order: <string>
                      type: alphabetical
                    total: <boolean>
                  - facet: <string>
                    histogram:
                      interval: <double>
                      min: <double>
                      max: <double>
                    limit: 10
                    missing: <string>
                    sort:
                      aggregation: <string>
                      metric: <string>
                      order: <string>
                      type: alphabetical
                    total: <boolean>
                options:
                  time_offset: <long>
                  timezone: UTC
                page:
                  cursor: <string>
                  limit: 10
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  buckets:
                    - by:
                        '@test.service': web-ui-tests
                        '@test.status': skip
                      computes:
                        et_d4: fugiat proident do occaecat dolor
                        deserunt4b: nisi Excepteur
                    - by:
                        '@test.service': web-ui-tests
                        '@test.status': skip
                      computes:
                        ipsum_1: ipsum
                links:
                  next: >-
                    https://app.datadoghq.com/api/v2/ci/tests/events?filter[query]=foo&page[cursor]=eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==
                meta:
                  elapsed: 132
                  page:
                    after: >-
                      eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==
                  request_id: MWlFUjVaWGZTTTZPYzM0VXp1OXU2d3xLSVpEMjZKQ0VKUTI0dEYtM3RSOFVR
                  status: done
                  warnings:
                    - code: unknown_index
                      detail: 'indexes: foo, bar'
                      title: >-
                        One or several indexes are missing or invalid, results
                        hold data from the other indexes
                    - code: unknown_index
                      detail: 'indexes: foo, bar'
                      title: >-
                        One or several indexes are missing or invalid, results
                        hold data from the other indexes
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v2/ci/tests/events:
    get:
      tags:
        - CI Visibility Tests
      summary: Get a list of tests events
      description: >-
        List endpoint returns CI Visibility test events that match a log search
        query.

        [Results are paginated similarly to
        logs](https://docs.datadoghq.com/logs/guide/collect-multiple-logs-with-pagination).


        Use this endpoint to see your latest test events.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: filter[query]
          in: query
          schema:
            type: string
          description: Search query following log syntax.
          example: <string>
        - name: filter[from]
          in: query
          schema:
            type: string
          description: Minimum timestamp for requested events.
          example: <dateTime>
        - name: filter[to]
          in: query
          schema:
            type: string
          description: Maximum timestamp for requested events.
          example: <dateTime>
        - name: sort
          in: query
          schema:
            type: string
          description: Order of events in results.
          example: <string>
        - name: page[cursor]
          in: query
          schema:
            type: string
          description: List following results with a cursor provided in the previous query.
          example: <string>
        - name: page[limit]
          in: query
          schema:
            type: integer
          description: Maximum number of events in the response.
          example: '10'
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - attributes:
                      attributes:
                        sed_4: {}
                        quis_d3: {}
                      service: web-ui-tests
                      tags:
                        - team:A
                      timestamp: '2019-01-02T09:42:36.320Z'
                    id: AAAAAWgN8Xwgr1vKDQAAAABBV2dOOFh3ZzZobm1mWXJFYTR0OA
                    type: citest
                  - attributes:
                      attributes:
                        exercitation9f: {}
                        reprehenderit_563: {}
                        velitb8: {}
                      service: web-ui-tests
                      tags:
                        - team:A
                      timestamp: '2019-01-02T09:42:36.320Z'
                    id: AAAAAWgN8Xwgr1vKDQAAAABBV2dOOFh3ZzZobm1mWXJFYTR0OA
                    type: citest
                links:
                  next: >-
                    https://app.datadoghq.com/api/v2/ci/tests/events?filter[query]=foo&page[cursor]=eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==
                meta:
                  elapsed: 132
                  page:
                    after: >-
                      eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==
                  request_id: MWlFUjVaWGZTTTZPYzM0VXp1OXU2d3xLSVpEMjZKQ0VKUTI0dEYtM3RSOFVR
                  status: done
                  warnings:
                    - code: unknown_index
                      detail: 'indexes: foo, bar'
                      title: >-
                        One or several indexes are missing or invalid, results
                        hold data from the other indexes
                    - code: unknown_index
                      detail: 'indexes: foo, bar'
                      title: >-
                        One or several indexes are missing or invalid, results
                        hold data from the other indexes
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v2/ci/tests/events/search:
    post:
      tags:
        - CI Visibility Tests
      summary: Search tests events
      description: >-
        List endpoint returns CI Visibility test events that match a log search
        query.

        [Results are paginated similarly to
        logs](https://docs.datadoghq.com/logs/guide/collect-multiple-logs-with-pagination).


        Use this endpoint to build complex events filtering and search.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                filter:
                  from: now-15m
                  query: '*'
                  to: now
                options:
                  time_offset: <long>
                  timezone: UTC
                page:
                  cursor: <string>
                  limit: 10
                sort: <string>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - attributes:
                      attributes:
                        sed_4: {}
                        quis_d3: {}
                      service: web-ui-tests
                      tags:
                        - team:A
                      timestamp: '2019-01-02T09:42:36.320Z'
                    id: AAAAAWgN8Xwgr1vKDQAAAABBV2dOOFh3ZzZobm1mWXJFYTR0OA
                    type: citest
                  - attributes:
                      attributes:
                        exercitation9f: {}
                        reprehenderit_563: {}
                        velitb8: {}
                      service: web-ui-tests
                      tags:
                        - team:A
                      timestamp: '2019-01-02T09:42:36.320Z'
                    id: AAAAAWgN8Xwgr1vKDQAAAABBV2dOOFh3ZzZobm1mWXJFYTR0OA
                    type: citest
                links:
                  next: >-
                    https://app.datadoghq.com/api/v2/ci/tests/events?filter[query]=foo&page[cursor]=eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==
                meta:
                  elapsed: 132
                  page:
                    after: >-
                      eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==
                  request_id: MWlFUjVaWGZTTTZPYzM0VXp1OXU2d3xLSVpEMjZKQ0VKUTI0dEYtM3RSOFVR
                  status: done
                  warnings:
                    - code: unknown_index
                      detail: 'indexes: foo, bar'
                      title: >-
                        One or several indexes are missing or invalid, results
                        hold data from the other indexes
                    - code: unknown_index
                      detail: 'indexes: foo, bar'
                      title: >-
                        One or several indexes are missing or invalid, results
                        hold data from the other indexes
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v2/security/cloud_workload/policy/download:
    get:
      tags:
        - Cloud Workload Security
      summary: Get the latest Cloud Workload Security policy
      description: >-
        The download endpoint generates a Cloud Workload Security policy file
        from your currently active

        Cloud Workload Security rules, and downloads them as a .policy file.
        This file can then be deployed to

        your Agents to update the policy running in your environment.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/yaml
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/yaml
          content:
            text/plain:
              schema:
                type: string
              example: amet
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v2/security_monitoring/cloud_workload_security/agent_rules:
    get:
      tags:
        - Cloud Workload Security
      summary: Get all Cloud Workload Security Agent rules
      description: Get the list of Agent rules.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - attributes:
                      category: Process Activity
                      creationDate: 1624366480320
                      creator:
                        handle: datadog.user@example.com
                        name: Datadog User
                      defaultRule: false
                      description: My Agent rule
                      enabled: true
                      expression: exec.file.name == \"sh\"
                      name: my_agent_rule
                      updatedAt: 1624366480320
                      updater:
                        handle: datadog.user@example.com
                        name: Datadog User
                      version: 23
                    id: 3dd-0uc-h1s
                    type: agent_rule
                  - attributes:
                      category: Process Activity
                      creationDate: 1624366480320
                      creator:
                        handle: datadog.user@example.com
                        name: Datadog User
                      defaultRule: false
                      description: My Agent rule
                      enabled: true
                      expression: exec.file.name == \"sh\"
                      name: my_agent_rule
                      updatedAt: 1624366480320
                      updater:
                        handle: datadog.user@example.com
                        name: Datadog User
                      version: 23
                    id: 3dd-0uc-h1s
                    type: agent_rule
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    post:
      tags:
        - Cloud Workload Security
      summary: Create a Cloud Workload Security Agent rule
      description: Create a new Agent rule with the given parameters.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                data:
                  attributes:
                    name: <string>
                    expression: <string>
                    description: <string>
                    enabled: <boolean>
                  type: agent_rule
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  attributes:
                    category: Process Activity
                    creationDate: 1624366480320
                    creator:
                      handle: datadog.user@example.com
                      name: Datadog User
                    defaultRule: false
                    description: My Agent rule
                    enabled: true
                    expression: exec.file.name == \"sh\"
                    name: my_agent_rule
                    updatedAt: 1624366480320
                    updater:
                      handle: datadog.user@example.com
                      name: Datadog User
                    version: 23
                  id: 3dd-0uc-h1s
                  type: agent_rule
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '409':
          description: Conflict
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v2/security_monitoring/cloud_workload_security/agent_rules/{agent_rule_id}:
    delete:
      tags:
        - Cloud Workload Security
      summary: Delete a Cloud Workload Security Agent rule
      description: Delete a specific Agent rule.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: agent_rule_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the Agent rule.
          example: <string>
      responses:
        '204':
          description: No Content
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    get:
      tags:
        - Cloud Workload Security
      summary: Get a Cloud Workload Security Agent rule
      description: Get the details of a specific Agent rule.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: agent_rule_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the Agent rule.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  attributes:
                    category: Process Activity
                    creationDate: 1624366480320
                    creator:
                      handle: datadog.user@example.com
                      name: Datadog User
                    defaultRule: false
                    description: My Agent rule
                    enabled: true
                    expression: exec.file.name == \"sh\"
                    name: my_agent_rule
                    updatedAt: 1624366480320
                    updater:
                      handle: datadog.user@example.com
                      name: Datadog User
                    version: 23
                  id: 3dd-0uc-h1s
                  type: agent_rule
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    patch:
      tags:
        - Cloud Workload Security
      summary: Update a Cloud Workload Security Agent rule
      description: |-
        Update a specific Agent rule.
        Returns the Agent rule object when the request is successful.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                data:
                  attributes:
                    description: <string>
                    enabled: <boolean>
                    expression: <string>
                  type: agent_rule
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: agent_rule_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the Agent rule.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  attributes:
                    category: Process Activity
                    creationDate: 1624366480320
                    creator:
                      handle: datadog.user@example.com
                      name: Datadog User
                    defaultRule: false
                    description: My Agent rule
                    enabled: true
                    expression: exec.file.name == \"sh\"
                    name: my_agent_rule
                    updatedAt: 1624366480320
                    updater:
                      handle: datadog.user@example.com
                      name: Datadog User
                    version: 23
                  id: 3dd-0uc-h1s
                  type: agent_rule
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '409':
          description: Conflict
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v2/integrations/confluent-cloud/accounts:
    get:
      tags:
        - Confluent Cloud
      summary: List Confluent accounts
      description: List Confluent accounts.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - attributes:
                      api_key: TESTAPIKEY123
                      resources:
                        - resource_type: kafka
                          tags:
                            - myTag
                            - myTag2:myValue
                        - resource_type: kafka
                          tags:
                            - myTag
                            - myTag2:myValue
                      tags:
                        - myTag
                        - myTag2:myValue
                    id: account_id_abc123
                    type: confluent-cloud-accounts
                  - attributes:
                      api_key: TESTAPIKEY123
                      resources:
                        - resource_type: kafka
                          tags:
                            - myTag
                            - myTag2:myValue
                        - resource_type: kafka
                          tags:
                            - myTag
                            - myTag2:myValue
                      tags:
                        - myTag
                        - myTag2:myValue
                    id: account_id_abc123
                    type: confluent-cloud-accounts
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    post:
      tags:
        - Confluent Cloud
      summary: Add Confluent account
      description: Create a Confluent account.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                data:
                  attributes:
                    api_key: <string>
                    api_secret: <string>
                    resources:
                      - id: <string>
                        resource_type: <string>
                        tags:
                          - <string>
                          - <string>
                      - id: <string>
                        resource_type: <string>
                        tags:
                          - <string>
                          - <string>
                    tags:
                      - <string>
                      - <string>
                  type: confluent-cloud-accounts
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '201':
          description: Created
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  attributes:
                    api_key: TESTAPIKEY123
                    resources:
                      - resource_type: kafka
                        tags:
                          - myTag
                          - myTag2:myValue
                      - resource_type: kafka
                        tags:
                          - myTag
                          - myTag2:myValue
                    tags:
                      - myTag
                      - myTag2:myValue
                  id: account_id_abc123
                  type: confluent-cloud-accounts
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v2/integrations/confluent-cloud/accounts/{account_id}:
    delete:
      tags:
        - Confluent Cloud
      summary: Delete Confluent account
      description: Delete a Confluent account with the provided account ID.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: account_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) Confluent Account id.
          example: <string>
      responses:
        '204':
          description: No Content
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    get:
      tags:
        - Confluent Cloud
      summary: Get Confluent account
      description: Get the Confluent account with the provided account ID.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: account_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) Confluent Account id.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  attributes:
                    api_key: TESTAPIKEY123
                    resources:
                      - resource_type: kafka
                        tags:
                          - myTag
                          - myTag2:myValue
                      - resource_type: kafka
                        tags:
                          - myTag
                          - myTag2:myValue
                    tags:
                      - myTag
                      - myTag2:myValue
                  id: account_id_abc123
                  type: confluent-cloud-accounts
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    patch:
      tags:
        - Confluent Cloud
      summary: Update Confluent account
      description: Update the Confluent account with the provided account ID.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                data:
                  attributes:
                    api_key: <string>
                    api_secret: <string>
                    tags:
                      - <string>
                      - <string>
                  type: confluent-cloud-accounts
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: account_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) Confluent Account id.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  attributes:
                    api_key: TESTAPIKEY123
                    resources:
                      - resource_type: kafka
                        tags:
                          - myTag
                          - myTag2:myValue
                      - resource_type: kafka
                        tags:
                          - myTag
                          - myTag2:myValue
                    tags:
                      - myTag
                      - myTag2:myValue
                  id: account_id_abc123
                  type: confluent-cloud-accounts
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v2/integrations/confluent-cloud/accounts/{account_id}/resources:
    get:
      tags:
        - Confluent Cloud
      summary: List Confluent Account resources
      description: >-
        Get a Confluent resource for the account associated with the provided
        ID.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: account_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) Confluent Account id.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - attributes:
                      resource_type: kafka
                      tags:
                        - myTag
                        - myTag2:myValue
                    type: confluent-cloud-resources
                    id: resource_id_abc123
                  - attributes:
                      resource_type: kafka
                      tags:
                        - myTag
                        - myTag2:myValue
                    type: confluent-cloud-resources
                    id: resource_id_abc123
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    post:
      tags:
        - Confluent Cloud
      summary: Add resource to Confluent account
      description: >-
        Create a Confluent resource for the account associated with the provided
        ID.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                data:
                  attributes:
                    resource_type: <string>
                    tags:
                      - <string>
                      - <string>
                  type: confluent-cloud-resources
                  id: <string>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: account_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) Confluent Account id.
          example: <string>
      responses:
        '201':
          description: Created
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  attributes:
                    resource_type: kafka
                    tags:
                      - myTag
                      - myTag2:myValue
                  type: confluent-cloud-resources
                  id: resource_id_abc123
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v2/integrations/confluent-cloud/accounts/{account_id}/resources/{resource_id}:
    delete:
      tags:
        - Confluent Cloud
      summary: Delete resource from Confluent account
      description: >-
        Delete a Confluent resource with the provided resource id for the
        account associated with the provided account ID.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: account_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) Confluent Account id.
          example: <string>
        - name: resource_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) Confluent Account Resource ID.
          example: <string>
      responses:
        '204':
          description: No Content
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    get:
      tags:
        - Confluent Cloud
      summary: Get resource from Confluent account
      description: >-
        Get a Confluent resource with the provided resource id for the account
        associated with the provided account ID.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: account_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) Confluent Account id.
          example: <string>
        - name: resource_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) Confluent Account Resource ID.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  attributes:
                    resource_type: kafka
                    tags:
                      - myTag
                      - myTag2:myValue
                  type: confluent-cloud-resources
                  id: resource_id_abc123
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    patch:
      tags:
        - Confluent Cloud
      summary: Update resource in Confluent account
      description: >-
        Update a Confluent resource with the provided resource id for the
        account associated with the provided account ID.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                data:
                  attributes:
                    resource_type: <string>
                    tags:
                      - <string>
                      - <string>
                  type: confluent-cloud-resources
                  id: <string>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: account_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) Confluent Account id.
          example: <string>
        - name: resource_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) Confluent Account Resource ID.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  attributes:
                    resource_type: kafka
                    tags:
                      - myTag
                      - myTag2:myValue
                  type: confluent-cloud-resources
                  id: resource_id_abc123
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/dashboard/lists/manual:
    get:
      tags:
        - Dashboard Lists
      summary: Get all dashboard lists
      description: Fetch all of your existing dashboard list definitions.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                dashboard_lists:
                  - name: My Dashboard
                    author:
                      email: officia
                      handle: eu quis laboris ut
                      name: tempor enim adipisicing in occaecat
                    created: '1997-07-07T18:21:02.568Z'
                    dashboard_count: 5116160
                    id: 45532593
                    is_favorite: true
                    modified: '1984-09-27T02:32:39.427Z'
                    type: manual_dashboard_list
                  - name: My Dashboard
                    author:
                      email: sint velit amet
                      handle: dolore in
                      name: cill
                    created: '1994-06-17T04:04:02.408Z'
                    dashboard_count: 26872064
                    id: -81909612
                    is_favorite: false
                    modified: '2020-06-23T07:14:10.403Z'
                    type: manual_dashboard_list
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    post:
      tags:
        - Dashboard Lists
      summary: Create a dashboard list
      description: Create an empty dashboard list.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                name: My Dashboard
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                name: My Dashboard
                author:
                  email: minim cillum enim
                  handle: in sed eiusmod nulla
                  name: ad tempor
                created: '1952-09-24T22:48:08.936Z'
                dashboard_count: 64878972
                id: 9492575
                is_favorite: false
                modified: '1998-05-21T18:56:00.404Z'
                type: manual_dashboard_list
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/dashboard/lists/manual/{list_id}:
    delete:
      tags:
        - Dashboard Lists
      summary: Delete a dashboard list
      description: Delete a dashboard list.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: list_id
          in: path
          schema:
            type: number
          required: true
          description: (Required) ID of the dashboard list to delete.
          example: '-70569764'
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                deleted_dashboard_list_id: -64325036
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    get:
      tags:
        - Dashboard Lists
      summary: Get a dashboard list
      description: Fetch an existing dashboard list's definition.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: list_id
          in: path
          schema:
            type: number
          required: true
          description: (Required) ID of the dashboard list to fetch.
          example: '-70569764'
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                name: My Dashboard
                author:
                  email: minim cillum enim
                  handle: in sed eiusmod nulla
                  name: ad tempor
                created: '1952-09-24T22:48:08.936Z'
                dashboard_count: 64878972
                id: 9492575
                is_favorite: false
                modified: '1998-05-21T18:56:00.404Z'
                type: manual_dashboard_list
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    put:
      tags:
        - Dashboard Lists
      summary: Update a dashboard list
      description: Update the name of a dashboard list.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                name: My Dashboard
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: list_id
          in: path
          schema:
            type: number
          required: true
          description: (Required) ID of the dashboard list to update.
          example: '-70569764'
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                name: My Dashboard
                author:
                  email: minim cillum enim
                  handle: in sed eiusmod nulla
                  name: ad tempor
                created: '1952-09-24T22:48:08.936Z'
                dashboard_count: 64878972
                id: 9492575
                is_favorite: false
                modified: '1998-05-21T18:56:00.404Z'
                type: manual_dashboard_list
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v2/dashboard/lists/manual/{dashboard_list_id}/dashboards:
    delete:
      tags:
        - Dashboard Lists
      summary: Delete items from a dashboard list
      description: Delete dashboards from an existing dashboard list.
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: dashboard_list_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) ID of the dashboard list to delete items from.
          example: <long>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                deleted_dashboards_from_list:
                  - type: host_timeboard
                    id: q5j-nti-fv6
                  - type: host_timeboard
                    id: q5j-nti-fv6
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    get:
      tags:
        - Dashboard Lists
      summary: Get items of a Dashboard List
      description: Fetch the dashboard list’s dashboard definitions.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: dashboard_list_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) ID of the dashboard list to get items from.
          example: <long>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                dashboards: []
                total: -41515502
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    post:
      tags:
        - Dashboard Lists
      summary: Add Items to a Dashboard List
      description: Add dashboards to an existing dashboard list.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                dashboards:
                  - type: <string>
                    id: <string>
                  - type: <string>
                    id: <string>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: dashboard_list_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) ID of the dashboard list to add items to.
          example: <long>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                added_dashboards_to_list:
                  - type: host_timeboard
                    id: q5j-nti-fv6
                  - type: host_timeboard
                    id: q5j-nti-fv6
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    put:
      tags:
        - Dashboard Lists
      summary: Update items of a dashboard list
      description: Update dashboards of an existing dashboard list.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                dashboards:
                  - type: <string>
                    id: <string>
                  - type: <string>
                    id: <string>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: dashboard_list_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) ID of the dashboard list to update items from.
          example: <long>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                dashboards:
                  - type: host_timeboard
                    id: q5j-nti-fv6
                  - type: host_timeboard
                    id: q5j-nti-fv6
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/dashboard:
    delete:
      tags:
        - Dashboards
      summary: Delete dashboards
      description: >-
        Delete dashboards using the specified IDs. If there are any failures, no
        dashboards will be deleted (partial success is not allowed).
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '204':
          description: No Content
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    get:
      tags:
        - Dashboards
      summary: Get all dashboards
      description: >-
        Get all dashboards.


        **Note**: This query will only return custom created or cloned
        dashboards.

        This query will not return preset dashboards.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: filter[shared]
          in: query
          schema:
            type: boolean
          description: |-
            When `true`, this query only returns shared custom created
            or cloned dashboards.
          example: 'true'
        - name: filter[deleted]
          in: query
          schema:
            type: boolean
          description: >-
            When `true`, this query returns only deleted custom-created

            or cloned dashboards. This parameter is incompatible with
            `filter[shared]`.
          example: 'true'
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                dashboards:
                  - author_handle: ut eiusmod
                    created_at: '1999-12-19T16:00:25.745Z'
                    description: anim est in
                    id: sint mollit ut
                    is_read_only: false
                    layout_type: ordered
                    modified_at: '1974-08-04T10:00:03.624Z'
                    title: Duis in ipsum quis
                    url: Ut proident nulla laborum
                  - author_handle: labore consequat
                    created_at: '1988-02-16T05:45:06.842Z'
                    description: id amet enim aliqua ullamco
                    id: et sint dolor cupidatat Duis
                    is_read_only: false
                    layout_type: ordered
                    modified_at: '2015-08-10T06:53:36.423Z'
                    title: in ea sit sed
                    url: aliquip
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    patch:
      tags:
        - Dashboards
      summary: Restore deleted dashboards
      description: >-
        Restore dashboards using the specified IDs. If there are any failures,
        no dashboards will be restored (partial success is not allowed).
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                data:
                  - id: 123-abc-456
                    type: dashboard
                  - id: 789-def-101
                    type: dashboard
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '204':
          description: No Content
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    post:
      tags:
        - Dashboards
      summary: Create a new dashboard
      description: >-
        Create a dashboard using the specified options. When defining queries in
        your widgets, take note of which queries should have the `as_count()` or
        `as_rate()` modifiers appended.

        Refer to the following
        [documentation](https://docs.datadoghq.com/developers/metrics/type_modifiers/?tab=count#in-application-modifiers)
        for more information on these modifiers.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                title: ''
                layout_type: ordered
                widgets:
                  - definition:
                      type: alert_graph
                      alert_id: ''
                      viz_type: timeseries
                      time:
                        live_span: 5m
                      title: elit anim dolor
                      title_align: left
                      title_size: proident in anim Ut
                    id: -2648973
                    layout:
                      x: 0
                      'y': 0
                      width: 0
                      height: 0
                      is_column_break: true
                  - definition:
                      type: alert_graph
                      alert_id: ''
                      viz_type: timeseries
                      time:
                        live_span: 5m
                      title: consequat ut qui
                      title_align: right
                      title_size: labore sunt ullamco
                    id: 95873976
                    layout:
                      x: 0
                      'y': 0
                      width: 0
                      height: 0
                      is_column_break: true
                description: Ut al
                is_read_only: false
                notify_list:
                  - non aute veniam
                  - dolore
                reflow_type: fixed
                restricted_roles:
                  - incididunt qui ea eiusmod anim
                  - tempor Ut quis
                template_variable_presets:
                  - name: sit laborum magna adipisicing
                    template_variables:
                      - name: ad laboris velit veniam Lorem
                        value: ullamco et aliquip in ipsum
                        values:
                          - pariatur sit velit
                      - name: fugiat ea dolor
                        value: quis magna eiusmod
                        values:
                          - ipsum
                  - name: fugiat anim
                    template_variables:
                      - name: sit labore dolore
                        value: veniam in occaecat
                        values:
                          - anim in ipsum
                      - name: laboris ut
                        value: amet officia
                        values:
                          - officia dolor ipsum
                template_variables:
                  - name: host1
                    available_values:
                      - my-host
                      - host1
                      - host2
                    default: my-host
                    defaults:
                      - my-host-1
                      - my-host-2
                    prefix: host
                  - name: host1
                    available_values:
                      - my-host
                      - host1
                      - host2
                    default: my-host
                    defaults:
                      - my-host-1
                      - my-host-2
                    prefix: host
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                title: ''
                layout_type: ordered
                widgets:
                  - definition:
                      type: alert_graph
                      alert_id: ''
                      viz_type: timeseries
                      time:
                        live_span: 5m
                      title: velit laboris eiusmod
                      title_align: left
                      title_size: reprehenderit cupidatat culpa ut irure
                    id: 65733828
                    layout:
                      x: 0
                      'y': 0
                      width: 0
                      height: 0
                      is_column_break: false
                  - definition:
                      type: alert_graph
                      alert_id: ''
                      viz_type: timeseries
                      time:
                        live_span: 5m
                      title: cillum in
                      title_align: center
                      title_size: ipsum dolore nisi aute
                    id: 29722562
                    layout:
                      x: 0
                      'y': 0
                      width: 0
                      height: 0
                      is_column_break: true
                author_handle: test@datadoghq.com
                author_name: John Doe
                created_at: '1951-04-29T23:59:41.316Z'
                description: in velit
                id: 123-abc-456
                is_read_only: false
                modified_at: '1979-01-18T00:27:33.653Z'
                notify_list:
                  - et culpa ex
                  - dolore ipsum
                reflow_type: auto
                restricted_roles:
                  - cillum
                  - quis mollit
                template_variable_presets:
                  - name: qui nostrud anim Excepteur in
                    template_variables:
                      - name: tempor
                        value: proident dolor eu sed sit
                        values:
                          - dolor fugiat
                      - name: irure incididunt
                        value: dolor ut labore culpa do
                        values:
                          - eiusmod dolor in
                  - name: laborum deserunt sunt id Ut
                    template_variables:
                      - name: irure
                        value: amet officia
                        values:
                          - mollit in
                      - name: ea consequ
                        value: deserunt nulla eu
                        values:
                          - veniam laboris velit
                template_variables:
                  - name: host1
                    available_values:
                      - my-host
                      - host1
                      - host2
                    default: my-host
                    defaults:
                      - my-host-1
                      - my-host-2
                    prefix: host
                  - name: host1
                    available_values:
                      - my-host
                      - host1
                      - host2
                    default: my-host
                    defaults:
                      - my-host-1
                      - my-host-2
                    prefix: host
                url: /dashboard/123-abc-456/example-dashboard-title
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/dashboard/public:
    post:
      tags:
        - Dashboards
      summary: Create a shared dashboard
      description: >-
        Share a specified private dashboard, generating a URL at which it can be
        publicly viewed.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                dashboard_id: 123-abc-456
                dashboard_type: custom_timeboard
                share_type: open
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                dashboard_id: 123-abc-456
                dashboard_type: custom_timeboard
                author:
                  handle: test@datadoghq.com
                  name: exercitation et
                created_at: '1989-04-27T12:49:58.343Z'
                global_time:
                  live_span: 1h
                global_time_selectable_enabled: false
                public_url: amet fugiat ut ea
                selectable_template_vars:
                  - default_value: '*'
                    name: exampleVar
                    prefix: test
                    visible_tags:
                      - selectableValue1
                      - selectableValue2
                share_list:
                  - test@datadoghq.com
                  - test2@email.com
                share_type: open
                token: eiusmod ex in cupidatat sed
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/dashboard/public/{token}:
    delete:
      tags:
        - Dashboards
      summary: Revoke a shared dashboard URL
      description: >-
        Revoke the public URL for a dashboard (rendering it private) associated
        with the specified token.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: token
          in: path
          schema:
            type: string
          required: true
          description: (Required) The token of the shared dashboard.
          example: proident
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                deleted_public_dashboard_token: laboris do amet in
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    get:
      tags:
        - Dashboards
      summary: Get a shared dashboard
      description: >-
        Fetch an existing shared dashboard's sharing metadata associated with
        the specified token.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: token
          in: path
          schema:
            type: string
          required: true
          description: >-
            (Required) The token of the shared dashboard. Generated when a
            dashboard is shared.
          example: proident
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                dashboard_id: 123-abc-456
                dashboard_type: custom_timeboard
                author:
                  handle: test@datadoghq.com
                  name: exercitation et
                created_at: '1989-04-27T12:49:58.343Z'
                global_time:
                  live_span: 1h
                global_time_selectable_enabled: false
                public_url: amet fugiat ut ea
                selectable_template_vars:
                  - default_value: '*'
                    name: exampleVar
                    prefix: test
                    visible_tags:
                      - selectableValue1
                      - selectableValue2
                share_list:
                  - test@datadoghq.com
                  - test2@email.com
                share_type: open
                token: eiusmod ex in cupidatat sed
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    put:
      tags:
        - Dashboards
      summary: Update a shared dashboard
      description: Update a shared dashboard associated with the specified token.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                global_time:
                  live_span: 1h
                selectable_template_vars:
                  - default_value: '*'
                    name: exampleVar
                    prefix: test
                    visible_tags:
                      - selectableValue1
                      - selectableValue2
                share_list:
                  - test@datadoghq.com
                  - test2@datadoghq.com
                share_type: invite
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: token
          in: path
          schema:
            type: string
          required: true
          description: (Required) The token of the shared dashboard.
          example: proident
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                dashboard_id: 123-abc-456
                dashboard_type: custom_timeboard
                author:
                  handle: test@datadoghq.com
                  name: exercitation et
                created_at: '1989-04-27T12:49:58.343Z'
                global_time:
                  live_span: 1h
                global_time_selectable_enabled: false
                public_url: amet fugiat ut ea
                selectable_template_vars:
                  - default_value: '*'
                    name: exampleVar
                    prefix: test
                    visible_tags:
                      - selectableValue1
                      - selectableValue2
                share_list:
                  - test@datadoghq.com
                  - test2@email.com
                share_type: open
                token: eiusmod ex in cupidatat sed
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/dashboard/public/{token}/invitation:
    delete:
      tags:
        - Dashboards
      summary: Revoke shared dashboard invitations
      description: >-
        Revoke previously sent invitation emails and active sessions used to
        access a given shared dashboard for specific email addresses.
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: token
          in: path
          schema:
            type: string
          required: true
          description: (Required) The token of the shared dashboard.
          example: proident
      responses:
        '204':
          description: No Content
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    get:
      tags:
        - Dashboards
      summary: Get all invitations for a shared dashboard
      description: >-
        Describe the invitations that exist for the given shared dashboard
        (paginated).
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: page_size
          in: query
          schema:
            type: number
          description: The number of records to return in a single request.
          example: '-70569764'
        - name: page_number
          in: query
          schema:
            type: number
          description: The page to access (base 0).
          example: '-70569764'
        - name: token
          in: path
          schema:
            type: string
          required: true
          description: >-
            (Required) Token of the shared dashboard for which to fetch
            invitations.
          example: proident
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  attributes:
                    created_at: '2020-12-07T20:16:27.846985+00:00'
                    email: test@datadoghq.com
                    has_session: false
                    invitation_expiry: '2020-12-07T21:16:27.840542+00:00'
                    session_expiry: null
                    share_token: XXXXXX-123456abcedfg7890hijklmnopqrstuv
                  type: public_dashboard_invitation
                meta:
                  page:
                    total_count: 66359765
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    post:
      tags:
        - Dashboards
      summary: Send shared dashboard invitation email
      description: >-
        Send emails to specified email addresses containing links to access a
        given authenticated shared dashboard. Email addresses must already
        belong to the authenticated shared dashboard's share_list.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                data:
                  - attributes:
                      email: test@datadoghq.com
                    type: public_dashboard_invitation
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: token
          in: path
          schema:
            type: string
          required: true
          description: (Required) The token of the shared dashboard.
          example: proident
      responses:
        '201':
          description: Created
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  attributes:
                    created_at: '2020-12-07T20:16:27.846985+00:00'
                    email: test@datadoghq.com
                    has_session: false
                    invitation_expiry: '2020-12-07T21:16:27.840542+00:00'
                    session_expiry: null
                    share_token: XXXXXX-123456abcedfg7890hijklmnopqrstuv
                  type: public_dashboard_invitation
                meta:
                  page:
                    total_count: 66359765
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/dashboard/{dashboard_id}:
    delete:
      tags:
        - Dashboards
      summary: Delete a dashboard
      description: Delete a dashboard using the specified ID.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: dashboard_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the dashboard.
          example: proident
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                deleted_dashboard_id: culpa voluptate elit
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    get:
      tags:
        - Dashboards
      summary: Get a dashboard
      description: Get a dashboard using the specified ID.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: dashboard_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the dashboard.
          example: proident
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                title: ''
                layout_type: ordered
                widgets:
                  - definition:
                      type: alert_graph
                      alert_id: ''
                      viz_type: timeseries
                      time:
                        live_span: 5m
                      title: velit laboris eiusmod
                      title_align: left
                      title_size: reprehenderit cupidatat culpa ut irure
                    id: 65733828
                    layout:
                      x: 0
                      'y': 0
                      width: 0
                      height: 0
                      is_column_break: false
                  - definition:
                      type: alert_graph
                      alert_id: ''
                      viz_type: timeseries
                      time:
                        live_span: 5m
                      title: cillum in
                      title_align: center
                      title_size: ipsum dolore nisi aute
                    id: 29722562
                    layout:
                      x: 0
                      'y': 0
                      width: 0
                      height: 0
                      is_column_break: true
                author_handle: test@datadoghq.com
                author_name: John Doe
                created_at: '1951-04-29T23:59:41.316Z'
                description: in velit
                id: 123-abc-456
                is_read_only: false
                modified_at: '1979-01-18T00:27:33.653Z'
                notify_list:
                  - et culpa ex
                  - dolore ipsum
                reflow_type: auto
                restricted_roles:
                  - cillum
                  - quis mollit
                template_variable_presets:
                  - name: qui nostrud anim Excepteur in
                    template_variables:
                      - name: tempor
                        value: proident dolor eu sed sit
                        values:
                          - dolor fugiat
                      - name: irure incididunt
                        value: dolor ut labore culpa do
                        values:
                          - eiusmod dolor in
                  - name: laborum deserunt sunt id Ut
                    template_variables:
                      - name: irure
                        value: amet officia
                        values:
                          - mollit in
                      - name: ea consequ
                        value: deserunt nulla eu
                        values:
                          - veniam laboris velit
                template_variables:
                  - name: host1
                    available_values:
                      - my-host
                      - host1
                      - host2
                    default: my-host
                    defaults:
                      - my-host-1
                      - my-host-2
                    prefix: host
                  - name: host1
                    available_values:
                      - my-host
                      - host1
                      - host2
                    default: my-host
                    defaults:
                      - my-host-1
                      - my-host-2
                    prefix: host
                url: /dashboard/123-abc-456/example-dashboard-title
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    put:
      tags:
        - Dashboards
      summary: Update a dashboard
      description: Update a dashboard using the specified ID.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                title: ''
                layout_type: ordered
                widgets:
                  - definition:
                      type: alert_graph
                      alert_id: ''
                      viz_type: timeseries
                      time:
                        live_span: 5m
                      title: elit anim dolor
                      title_align: left
                      title_size: proident in anim Ut
                    id: -2648973
                    layout:
                      x: 0
                      'y': 0
                      width: 0
                      height: 0
                      is_column_break: true
                  - definition:
                      type: alert_graph
                      alert_id: ''
                      viz_type: timeseries
                      time:
                        live_span: 5m
                      title: consequat ut qui
                      title_align: right
                      title_size: labore sunt ullamco
                    id: 95873976
                    layout:
                      x: 0
                      'y': 0
                      width: 0
                      height: 0
                      is_column_break: true
                description: Ut al
                is_read_only: false
                notify_list:
                  - non aute veniam
                  - dolore
                reflow_type: fixed
                restricted_roles:
                  - incididunt qui ea eiusmod anim
                  - tempor Ut quis
                template_variable_presets:
                  - name: sit laborum magna adipisicing
                    template_variables:
                      - name: ad laboris velit veniam Lorem
                        value: ullamco et aliquip in ipsum
                        values:
                          - pariatur sit velit
                      - name: fugiat ea dolor
                        value: quis magna eiusmod
                        values:
                          - ipsum
                  - name: fugiat anim
                    template_variables:
                      - name: sit labore dolore
                        value: veniam in occaecat
                        values:
                          - anim in ipsum
                      - name: laboris ut
                        value: amet officia
                        values:
                          - officia dolor ipsum
                template_variables:
                  - name: host1
                    available_values:
                      - my-host
                      - host1
                      - host2
                    default: my-host
                    defaults:
                      - my-host-1
                      - my-host-2
                    prefix: host
                  - name: host1
                    available_values:
                      - my-host
                      - host1
                      - host2
                    default: my-host
                    defaults:
                      - my-host-1
                      - my-host-2
                    prefix: host
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: dashboard_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the dashboard.
          example: proident
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                title: ''
                layout_type: ordered
                widgets:
                  - definition:
                      type: alert_graph
                      alert_id: ''
                      viz_type: timeseries
                      time:
                        live_span: 5m
                      title: velit laboris eiusmod
                      title_align: left
                      title_size: reprehenderit cupidatat culpa ut irure
                    id: 65733828
                    layout:
                      x: 0
                      'y': 0
                      width: 0
                      height: 0
                      is_column_break: false
                  - definition:
                      type: alert_graph
                      alert_id: ''
                      viz_type: timeseries
                      time:
                        live_span: 5m
                      title: cillum in
                      title_align: center
                      title_size: ipsum dolore nisi aute
                    id: 29722562
                    layout:
                      x: 0
                      'y': 0
                      width: 0
                      height: 0
                      is_column_break: true
                author_handle: test@datadoghq.com
                author_name: John Doe
                created_at: '1951-04-29T23:59:41.316Z'
                description: in velit
                id: 123-abc-456
                is_read_only: false
                modified_at: '1979-01-18T00:27:33.653Z'
                notify_list:
                  - et culpa ex
                  - dolore ipsum
                reflow_type: auto
                restricted_roles:
                  - cillum
                  - quis mollit
                template_variable_presets:
                  - name: qui nostrud anim Excepteur in
                    template_variables:
                      - name: tempor
                        value: proident dolor eu sed sit
                        values:
                          - dolor fugiat
                      - name: irure incididunt
                        value: dolor ut labore culpa do
                        values:
                          - eiusmod dolor in
                  - name: laborum deserunt sunt id Ut
                    template_variables:
                      - name: irure
                        value: amet officia
                        values:
                          - mollit in
                      - name: ea consequ
                        value: deserunt nulla eu
                        values:
                          - veniam laboris velit
                template_variables:
                  - name: host1
                    available_values:
                      - my-host
                      - host1
                      - host2
                    default: my-host
                    defaults:
                      - my-host-1
                      - my-host-2
                    prefix: host
                  - name: host1
                    available_values:
                      - my-host
                      - host1
                      - host2
                    default: my-host
                    defaults:
                      - my-host-1
                      - my-host-2
                    prefix: host
                url: /dashboard/123-abc-456/example-dashboard-title
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/downtime:
    get:
      tags:
        - Downtimes
      summary: Get all downtimes
      description: Get all scheduled downtimes.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: current_only
          in: query
          schema:
            type: boolean
          description: Only return downtimes that are active when the request is made.
          example: 'true'
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                - active: true
                  active_child:
                    active: true
                    canceled: 1412799983
                    creator_id: 123456
                    disabled: false
                    downtime_type: 2
                    end: 1412793983
                    id: 1626
                    message: Message on the downtime
                    monitor_id: 123456
                    monitor_tags:
                      - '*'
                    mute_first_recovery_notification: false
                    parent_id: 123
                    recurrence:
                      period: 1
                      rrule: FREQ=MONTHLY;BYSETPOS=3;BYDAY=WE;INTERVAL=1
                      type: weeks
                      until_date: 1447786293
                      until_occurrences: 2
                      week_days:
                        - Mon
                        - Tue
                    scope:
                      - env:staging
                    start: 1412792983
                    timezone: America/New_York
                    updater_id: 123456
                  canceled: 1412799983
                  creator_id: 123456
                  disabled: false
                  downtime_type: 2
                  end: 1412793983
                  id: 1625
                  message: Message on the downtime
                  monitor_id: 123456
                  monitor_tags:
                    - '*'
                  mute_first_recovery_notification: false
                  parent_id: 123
                  recurrence:
                    period: 1
                    rrule: FREQ=MONTHLY;BYSETPOS=3;BYDAY=WE;INTERVAL=1
                    type: weeks
                    until_date: 1447786293
                    until_occurrences: 2
                    week_days:
                      - Mon
                      - Tue
                  scope:
                    - env:staging
                  start: 1412792983
                  timezone: America/New_York
                  updater_id: 123456
                - active: true
                  active_child:
                    active: true
                    canceled: 1412799983
                    creator_id: 123456
                    disabled: false
                    downtime_type: 2
                    end: 1412793983
                    id: 1626
                    message: Message on the downtime
                    monitor_id: 123456
                    monitor_tags:
                      - '*'
                    mute_first_recovery_notification: false
                    parent_id: 123
                    recurrence:
                      period: 1
                      rrule: FREQ=MONTHLY;BYSETPOS=3;BYDAY=WE;INTERVAL=1
                      type: weeks
                      until_date: 1447786293
                      until_occurrences: 2
                      week_days:
                        - Mon
                        - Tue
                    scope:
                      - env:staging
                    start: 1412792983
                    timezone: America/New_York
                    updater_id: 123456
                  canceled: 1412799983
                  creator_id: 123456
                  disabled: false
                  downtime_type: 2
                  end: 1412793983
                  id: 1625
                  message: Message on the downtime
                  monitor_id: 123456
                  monitor_tags:
                    - '*'
                  mute_first_recovery_notification: false
                  parent_id: 123
                  recurrence:
                    period: 1
                    rrule: FREQ=MONTHLY;BYSETPOS=3;BYDAY=WE;INTERVAL=1
                    type: weeks
                    until_date: 1447786293
                    until_occurrences: 2
                    week_days:
                      - Mon
                      - Tue
                  scope:
                    - env:staging
                  start: 1412792983
                  timezone: America/New_York
                  updater_id: 123456
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    post:
      tags:
        - Downtimes
      summary: Schedule a downtime
      description: Schedule a downtime.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                disabled: false
                end: 1412793983
                message: Message on the downtime
                monitor_id: 123456
                monitor_tags:
                  - '*'
                mute_first_recovery_notification: false
                parent_id: 123
                recurrence:
                  period: 1
                  rrule: FREQ=MONTHLY;BYSETPOS=3;BYDAY=WE;INTERVAL=1
                  type: weeks
                  until_date: 1447786293
                  until_occurrences: 2
                  week_days:
                    - Mon
                    - Tue
                scope:
                  - env:staging
                start: 1412792983
                timezone: America/New_York
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                active: true
                active_child:
                  active: true
                  canceled: 1412799983
                  creator_id: 123456
                  disabled: false
                  downtime_type: 2
                  end: 1412793983
                  id: 1626
                  message: Message on the downtime
                  monitor_id: 123456
                  monitor_tags:
                    - '*'
                  mute_first_recovery_notification: false
                  parent_id: 123
                  recurrence:
                    period: 1
                    rrule: FREQ=MONTHLY;BYSETPOS=3;BYDAY=WE;INTERVAL=1
                    type: weeks
                    until_date: 1447786293
                    until_occurrences: 2
                    week_days:
                      - Mon
                      - Tue
                  scope:
                    - env:staging
                  start: 1412792983
                  timezone: America/New_York
                  updater_id: 123456
                canceled: 1412799983
                creator_id: 123456
                disabled: false
                downtime_type: 2
                end: 1412793983
                id: 1625
                message: Message on the downtime
                monitor_id: 123456
                monitor_tags:
                  - '*'
                mute_first_recovery_notification: false
                parent_id: 123
                recurrence:
                  period: 1
                  rrule: FREQ=MONTHLY;BYSETPOS=3;BYDAY=WE;INTERVAL=1
                  type: weeks
                  until_date: 1447786293
                  until_occurrences: 2
                  week_days:
                    - Mon
                    - Tue
                scope:
                  - env:staging
                start: 1412792983
                timezone: America/New_York
                updater_id: 123456
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/downtime/cancel/by_scope:
    post:
      tags:
        - Downtimes
      summary: Cancel downtimes by scope
      description: Delete all downtimes that match the scope of `X`.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                scope: host:myserver
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                cancelled_ids:
                  - 123456789
                  - 123456790
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/downtime/{downtime_id}:
    delete:
      tags:
        - Downtimes
      summary: Cancel a downtime
      description: Cancel a downtime.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: downtime_id
          in: path
          schema:
            type: integer
          required: true
          description: (Required) ID of the downtime to cancel.
          example: '123456'
      responses:
        '204':
          description: No Content
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    get:
      tags:
        - Downtimes
      summary: Get a downtime
      description: Get downtime detail by `downtime_id`.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: downtime_id
          in: path
          schema:
            type: integer
          required: true
          description: (Required) ID of the downtime to fetch.
          example: '123456'
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                active: true
                active_child:
                  active: true
                  canceled: 1412799983
                  creator_id: 123456
                  disabled: false
                  downtime_type: 2
                  end: 1412793983
                  id: 1626
                  message: Message on the downtime
                  monitor_id: 123456
                  monitor_tags:
                    - '*'
                  mute_first_recovery_notification: false
                  parent_id: 123
                  recurrence:
                    period: 1
                    rrule: FREQ=MONTHLY;BYSETPOS=3;BYDAY=WE;INTERVAL=1
                    type: weeks
                    until_date: 1447786293
                    until_occurrences: 2
                    week_days:
                      - Mon
                      - Tue
                  scope:
                    - env:staging
                  start: 1412792983
                  timezone: America/New_York
                  updater_id: 123456
                canceled: 1412799983
                creator_id: 123456
                disabled: false
                downtime_type: 2
                end: 1412793983
                id: 1625
                message: Message on the downtime
                monitor_id: 123456
                monitor_tags:
                  - '*'
                mute_first_recovery_notification: false
                parent_id: 123
                recurrence:
                  period: 1
                  rrule: FREQ=MONTHLY;BYSETPOS=3;BYDAY=WE;INTERVAL=1
                  type: weeks
                  until_date: 1447786293
                  until_occurrences: 2
                  week_days:
                    - Mon
                    - Tue
                scope:
                  - env:staging
                start: 1412792983
                timezone: America/New_York
                updater_id: 123456
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    put:
      tags:
        - Downtimes
      summary: Update a downtime
      description: Update a single downtime by `downtime_id`.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                disabled: false
                end: 1412793983
                message: Message on the downtime
                monitor_id: 123456
                monitor_tags:
                  - '*'
                mute_first_recovery_notification: false
                parent_id: 123
                recurrence:
                  period: 1
                  rrule: FREQ=MONTHLY;BYSETPOS=3;BYDAY=WE;INTERVAL=1
                  type: weeks
                  until_date: 1447786293
                  until_occurrences: 2
                  week_days:
                    - Mon
                    - Tue
                scope:
                  - env:staging
                start: 1412792983
                timezone: America/New_York
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: downtime_id
          in: path
          schema:
            type: integer
          required: true
          description: (Required) ID of the downtime to update.
          example: '123456'
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                active: true
                active_child:
                  active: true
                  canceled: 1412799983
                  creator_id: 123456
                  disabled: false
                  downtime_type: 2
                  end: 1412793983
                  id: 1626
                  message: Message on the downtime
                  monitor_id: 123456
                  monitor_tags:
                    - '*'
                  mute_first_recovery_notification: false
                  parent_id: 123
                  recurrence:
                    period: 1
                    rrule: FREQ=MONTHLY;BYSETPOS=3;BYDAY=WE;INTERVAL=1
                    type: weeks
                    until_date: 1447786293
                    until_occurrences: 2
                    week_days:
                      - Mon
                      - Tue
                  scope:
                    - env:staging
                  start: 1412792983
                  timezone: America/New_York
                  updater_id: 123456
                canceled: 1412799983
                creator_id: 123456
                disabled: false
                downtime_type: 2
                end: 1412793983
                id: 1625
                message: Message on the downtime
                monitor_id: 123456
                monitor_tags:
                  - '*'
                mute_first_recovery_notification: false
                parent_id: 123
                recurrence:
                  period: 1
                  rrule: FREQ=MONTHLY;BYSETPOS=3;BYDAY=WE;INTERVAL=1
                  type: weeks
                  until_date: 1447786293
                  until_occurrences: 2
                  week_days:
                    - Mon
                    - Tue
                scope:
                  - env:staging
                start: 1412792983
                timezone: America/New_York
                updater_id: 123456
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/monitor/{monitor_id}/downtimes:
    get:
      tags:
        - Downtimes
      summary: Get all downtimes for a monitor
      description: Get all active downtimes for the specified monitor.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: monitor_id
          in: path
          schema:
            type: number
          required: true
          description: (Required) The id of the monitor
          example: '-70569764'
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                - active: true
                  active_child:
                    active: true
                    canceled: 1412799983
                    creator_id: 123456
                    disabled: false
                    downtime_type: 2
                    end: 1412793983
                    id: 1626
                    message: Message on the downtime
                    monitor_id: 123456
                    monitor_tags:
                      - '*'
                    mute_first_recovery_notification: false
                    parent_id: 123
                    recurrence:
                      period: 1
                      rrule: FREQ=MONTHLY;BYSETPOS=3;BYDAY=WE;INTERVAL=1
                      type: weeks
                      until_date: 1447786293
                      until_occurrences: 2
                      week_days:
                        - Mon
                        - Tue
                    scope:
                      - env:staging
                    start: 1412792983
                    timezone: America/New_York
                    updater_id: 123456
                  canceled: 1412799983
                  creator_id: 123456
                  disabled: false
                  downtime_type: 2
                  end: 1412793983
                  id: 1625
                  message: Message on the downtime
                  monitor_id: 123456
                  monitor_tags:
                    - '*'
                  mute_first_recovery_notification: false
                  parent_id: 123
                  recurrence:
                    period: 1
                    rrule: FREQ=MONTHLY;BYSETPOS=3;BYDAY=WE;INTERVAL=1
                    type: weeks
                    until_date: 1447786293
                    until_occurrences: 2
                    week_days:
                      - Mon
                      - Tue
                  scope:
                    - env:staging
                  start: 1412792983
                  timezone: America/New_York
                  updater_id: 123456
                - active: true
                  active_child:
                    active: true
                    canceled: 1412799983
                    creator_id: 123456
                    disabled: false
                    downtime_type: 2
                    end: 1412793983
                    id: 1626
                    message: Message on the downtime
                    monitor_id: 123456
                    monitor_tags:
                      - '*'
                    mute_first_recovery_notification: false
                    parent_id: 123
                    recurrence:
                      period: 1
                      rrule: FREQ=MONTHLY;BYSETPOS=3;BYDAY=WE;INTERVAL=1
                      type: weeks
                      until_date: 1447786293
                      until_occurrences: 2
                      week_days:
                        - Mon
                        - Tue
                    scope:
                      - env:staging
                    start: 1412792983
                    timezone: America/New_York
                    updater_id: 123456
                  canceled: 1412799983
                  creator_id: 123456
                  disabled: false
                  downtime_type: 2
                  end: 1412793983
                  id: 1625
                  message: Message on the downtime
                  monitor_id: 123456
                  monitor_tags:
                    - '*'
                  mute_first_recovery_notification: false
                  parent_id: 123
                  recurrence:
                    period: 1
                    rrule: FREQ=MONTHLY;BYSETPOS=3;BYDAY=WE;INTERVAL=1
                    type: weeks
                    until_date: 1447786293
                    until_occurrences: 2
                    week_days:
                      - Mon
                      - Tue
                  scope:
                    - env:staging
                  start: 1412792983
                  timezone: America/New_York
                  updater_id: 123456
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/graph/embed:
    get:
      tags:
        - Embeddable Graphs
      summary: Get all embeds
      description: Gets a list of previously created embeddable graphs.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                embedded_graphs:
                  - dash_name: tempor sit occaecat
                    dash_url: sunt laborum
                    embed_id: magna commod
                    graph_title: voluptate elit
                    html: officia
                    revoked: false
                    shared_by: -27622476
                  - dash_name: ut dolor fugiat officia
                    dash_url: Ut
                    embed_id: ut Lorem
                    graph_title: in
                    html: in ea
                    revoked: false
                    shared_by: 84915453
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    post:
      tags:
        - Embeddable Graphs
      summary: Create embed
      description: >-
        Creates a new embeddable graph.


        Note: If an embed already exists for the exact same query in a given
        organization,

        the older embed is returned instead of creating a new embed.


        If you are interested in using template variables, see

        [Embeddable Graphs with Template
        Variables](https://docs.datadoghq.com/dashboards/faq/embeddable-graphs-with-template-variables).
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                graph_json: ''
                legend: 'no'
                size: medium
                timeframe: 1_hour
                title: Embed created through API
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                dash_name: ad elit
                dash_url: adipisicing sunt amet
                embed_id: eu reprehenderit nulla irure ut
                graph_title: dolore in Ut deserunt
                html: dolor mollit dolore cupida
                revoked: true
                shared_by: -38635432
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/graph/embed/{embed_id}:
    get:
      tags:
        - Embeddable Graphs
      summary: Get specific embed
      description: Get the HTML fragment for a previously generated embed with `embed_id`.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: embed_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) Token of the embed.
          example: proident
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                dash_name: ad elit
                dash_url: adipisicing sunt amet
                embed_id: eu reprehenderit nulla irure ut
                graph_title: dolore in Ut deserunt
                html: dolor mollit dolore cupida
                revoked: true
                shared_by: -38635432
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/graph/embed/{embed_id}/enable:
    get:
      tags:
        - Embeddable Graphs
      summary: Enable embed
      description: Enable a specified embed.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: embed_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) ID of the embed.
          example: proident
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                success: Embed 00000000000 successfully enabled.
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/graph/embed/{embed_id}/revoke:
    get:
      tags:
        - Embeddable Graphs
      summary: Revoke embed
      description: Revoke a specified embed.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: embed_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) ID of the embed.
          example: proident
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                success: Embed 0000000000000 successfully revoked.
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/events:
    get:
      tags:
        - Events
      summary: Get a list of events
      description: >-
        The event stream can be queried and filtered by time, priority, sources
        and tags.


        **Notes**:

        - If the event you’re querying contains markdown formatting of any kind,

        you may see characters such as `%`,`\`,`n` in your output.


        - This endpoint returns a maximum of `1000` most recent results. To
        return additional results,

        identify the last timestamp of the last result and set that as the `end`
        query time to

        paginate the results. You can also use the page parameter to specify
        which set of `1000` results to return.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: start
          in: query
          schema:
            type: number
          description: (Required) POSIX timestamp.
          example: '-70569764'
        - name: end
          in: query
          schema:
            type: number
          description: (Required) POSIX timestamp.
          example: '-70569764'
        - name: priority
          in: query
          schema:
            type: string
          description: Priority of your events, either `low` or `normal`.
          example: normal
        - name: sources
          in: query
          schema:
            type: string
          description: A comma separated string of sources.
          example: proident
        - name: tags
          in: query
          schema:
            type: string
          description: >-
            A comma separated list indicating what tags, if any, should be used
            to filter the list of monitors by scope.
          example: host:host0
        - name: unaggregated
          in: query
          schema:
            type: boolean
          description: >-
            Set unaggregated to `true` to return all events within the specified
            [`start`,`end`] timeframe.

            Otherwise if an event is aggregated to a parent event with a
            timestamp outside of the timeframe,

            it won't be available in the output. Aggregated events with
            `is_aggregate=true` in the response will still be returned unless
            exclude_aggregate is set to `true.`
          example: 'true'
        - name: exclude_aggregate
          in: query
          schema:
            type: boolean
          description: >-
            Set `exclude_aggregate` to `true` to only return unaggregated events
            where `is_aggregate=false` in the response. If the
            `exclude_aggregate` parameter is set to `true`,

            then the unaggregated parameter is ignored and will be `true` by
            default.
          example: 'true'
        - name: page
          in: query
          schema:
            type: integer
          description: >-
            By default 1000 results are returned per request. Set page to the
            number of the page to return with `0` being the first page. The page
            parameter can only be used

            when either unaggregated or exclude_aggregate is set to `true.`
          example: '2000143318'
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                events:
                  - alert_type: info
                    date_happened: 12687271
                    device_name: anim nisi aliquip
                    host: anim aliquip nisi
                    id: -19209631
                    id_str: consectetur
                    payload: '{}'
                    priority: normal
                    source_type_name: commodo amet fugiat eiusmod
                    tags:
                      - environment:test
                    text: Oh boy!
                    title: Did you hear the news today?
                    url: tempor ea enim voluptate dolor
                  - alert_type: info
                    date_happened: -49208427
                    device_name: tempor minim
                    host: ea
                    id: -59908288
                    id_str: adipisic
                    payload: '{}'
                    priority: normal
                    source_type_name: culpa incidi
                    tags:
                      - environment:test
                    text: Oh boy!
                    title: Did you hear the news today?
                    url: Lorem culpa dolor in
                status: ullamco a
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    post:
      tags:
        - Events
      summary: Post an event
      description: |-
        This endpoint allows you to post events to the stream.
        Tag them, set priority and event aggregate them with other events.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                title: Did you hear the news today?
                text: Oh boy!
                aggregation_key: Ut
                alert_type: info
                date_happened: -80767504
                device_name: dolor eiusmod
                host: ipsum eu elit
                priority: normal
                related_event_id: -79027663
                source_type_name: eu amet id velit incididunt
                tags:
                  - environment:test
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '202':
          description: Accepted
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                event:
                  alert_type: info
                  date_happened: -75067910
                  device_name: Duis est laborum cupida
                  host: in ut sunt ipsum officia
                  id: 67153963
                  id_str: in Excepteur incididunt dolor
                  payload: '{}'
                  priority: normal
                  source_type_name: nostrud do non amet
                  tags:
                    - environment:test
                  text: Oh boy!
                  title: Did you hear the news today?
                  url: eiusmod ad
                status: amet cupidatat ullamco ad
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/events/{event_id}:
    get:
      tags:
        - Events
      summary: Get an event
      description: >-
        This endpoint allows you to query for event details.


        **Note**: If the event you’re querying contains markdown formatting of
        any kind,

        you may see characters such as `%`,`\`,`n` in your output.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: event_id
          in: path
          schema:
            type: number
          required: true
          description: (Required) The ID of the event.
          example: '-70569764'
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                event:
                  alert_type: info
                  date_happened: -75067910
                  device_name: Duis est laborum cupida
                  host: in ut sunt ipsum officia
                  id: 67153963
                  id_str: in Excepteur incididunt dolor
                  payload: '{}'
                  priority: normal
                  source_type_name: nostrud do non amet
                  tags:
                    - environment:test
                  text: Oh boy!
                  title: Did you hear the news today?
                  url: eiusmod ad
                status: amet cupidatat ullamco ad
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v2/events/search:
    post:
      tags:
        - Events
      summary: Search events
      description: >-
        List endpoint returns events that match an events search query.

        [Results are paginated similarly to
        logs](https://docs.datadoghq.com/logs/guide/collect-multiple-logs-with-pagination).


        Use this endpoint to build complex events filtering and search.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                filter:
                  from: now-15m
                  query: '*'
                  to: now
                options:
                  timeOffset: <long>
                  timezone: UTC
                page:
                  cursor: <string>
                  limit: 10
                sort: <string>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - attributes:
                      attributes:
                        aggregation_key: dolore culpa anim
                        date_happened: 21837648
                        device_name: magna ad laboris
                        duration: -631698
                        event_object: Did you hear the news today?
                        evt:
                          id: '6509751066204996294'
                          name: minim culpa
                          source_id: 36
                          type: error_tracking_alert
                        hostname: quis ad
                        monitor:
                          created_at: 1646318692000
                          group_status: 841943519
                          groups:
                            - sed incididunt nisi
                            - labore est
                          id: 30645300
                          message: consectetur voluptate
                          modified: 10646541
                          name: veniam ut sunt nulla officia
                          query: Duis esse
                          tags:
                            - environment:test
                          templated_name: commodo cupidatat nulla culpa
                          type: pariat
                        monitor_groups:
                          - ut ipsum
                          - consectetur fugiat eu ipsum Excepteur
                        monitor_id: -55413033
                        priority: normal
                        related_event_id: 61848129
                        service: datadog-api
                        source_type_name: sit eli
                        sourcecategory: in
                        status: info
                        tags:
                          - environment:test
                        timestamp: 1652274265000
                        title: Oh boy!
                      tags:
                        - team:A
                      timestamp: '2019-01-02T09:42:36.320Z'
                    id: AAAAAWgN8Xwgr1vKDQAAAABBV2dOOFh3ZzZobm1mWXJFYTR0OA
                    type: event
                  - attributes:
                      attributes:
                        aggregation_key: sed anim
                        date_happened: 8504966
                        device_name: id exercitati
                        duration: -50332
                        event_object: Did you hear the news today?
                        evt:
                          id: '6509751066204996294'
                          name: ut magna occaecat fugiat
                          source_id: 36
                          type: error_tracking_alert
                        hostname: ut sunt est voluptate
                        monitor:
                          created_at: 1646318692000
                          group_status: 64373858
                          groups:
                            - sint consectetur
                            - adipisicing id reprehenderit
                          id: 19085766
                          message: dolore
                          modified: -31882732
                          name: ad qui
                          query: et quis tempor commodo
                          tags:
                            - environment:test
                          templated_name: proident sit
                          type: dolor
                        monitor_groups:
                          - voluptate aute
                          - officia dolore Ut esse
                        monitor_id: 10490578
                        priority: normal
                        related_event_id: -44748431
                        service: datadog-api
                        source_type_name: exercitation laboris
                        sourcecategory: do sit non
                        status: info
                        tags:
                          - environment:test
                        timestamp: 1652274265000
                        title: Oh boy!
                      tags:
                        - team:A
                      timestamp: '2019-01-02T09:42:36.320Z'
                    id: AAAAAWgN8Xwgr1vKDQAAAABBV2dOOFh3ZzZobm1mWXJFYTR0OA
                    type: event
                links:
                  next: >-
                    https://app.datadoghq.com/api/v2/events?filter[query]=foo&page[cursor]=eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==
                meta:
                  elapsed: 132
                  page:
                    after: >-
                      eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==
                  request_id: MWlFUjVaWGZTTTZPYzM0VXp1OXU2d3xLSVpEMjZKQ0VKUTI0dEYtM3RSOFVR
                  warnings:
                    - code: unknown_index
                      detail: 'indexes: foo, bar'
                      title: >-
                        One or several indexes are missing or invalid. Results
                        hold data from the other indexes.
                    - code: unknown_index
                      detail: 'indexes: foo, bar'
                      title: >-
                        One or several indexes are missing or invalid. Results
                        hold data from the other indexes.
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/integration/gcp:
    delete:
      tags:
        - GCP Integration
      summary: Delete a GCP integration
      description: Delete a given Datadog-GCP integration.
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example: {}
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    get:
      tags:
        - GCP Integration
      summary: List all GCP integrations
      description: List all Datadog-GCP integrations configured in your Datadog account.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                - auth_provider_x509_cert_url: https://www.googleapis.com/oauth2/v1/certs
                  auth_uri: https://accounts.google.com/o/oauth2/auth
                  automute: true
                  client_email: api-dev@datadog-sandbox.iam.gserviceaccount.com
                  client_id: '123456712345671234567'
                  client_x509_cert_url: >-
                    https://www.googleapis.com/robot/v1/metadata/x509/$CLIENT_EMAIL
                  errors:
                    - '*'
                  host_filters: key:value,filter:example
                  private_key: private_key
                  private_key_id: 123456789abcdefghi123456789abcdefghijklm
                  project_id: datadog-apitest
                  token_uri: https://accounts.google.com/o/oauth2/token
                  type: service_account
                - auth_provider_x509_cert_url: https://www.googleapis.com/oauth2/v1/certs
                  auth_uri: https://accounts.google.com/o/oauth2/auth
                  automute: true
                  client_email: api-dev@datadog-sandbox.iam.gserviceaccount.com
                  client_id: '123456712345671234567'
                  client_x509_cert_url: >-
                    https://www.googleapis.com/robot/v1/metadata/x509/$CLIENT_EMAIL
                  errors:
                    - '*'
                  host_filters: key:value,filter:example
                  private_key: private_key
                  private_key_id: 123456789abcdefghi123456789abcdefghijklm
                  project_id: datadog-apitest
                  token_uri: https://accounts.google.com/o/oauth2/token
                  type: service_account
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    post:
      tags:
        - GCP Integration
      summary: Create a GCP integration
      description: Create a Datadog-GCP integration.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                auth_provider_x509_cert_url: https://www.googleapis.com/oauth2/v1/certs
                auth_uri: https://accounts.google.com/o/oauth2/auth
                automute: true
                client_email: api-dev@datadog-sandbox.iam.gserviceaccount.com
                client_id: '123456712345671234567'
                client_x509_cert_url: >-
                  https://www.googleapis.com/robot/v1/metadata/x509/$CLIENT_EMAIL
                errors:
                  - '*'
                host_filters: key:value,filter:example
                private_key: private_key
                private_key_id: 123456789abcdefghi123456789abcdefghijklm
                project_id: datadog-apitest
                token_uri: https://accounts.google.com/o/oauth2/token
                type: service_account
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example: {}
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    put:
      tags:
        - GCP Integration
      summary: Update a GCP integration
      description: >-
        Update a Datadog-GCP integrations host_filters and/or auto-mute.

        Requires a `project_id` and `client_email`, however these fields cannot
        be updated.

        If you need to update these fields, delete and use the create (`POST`)
        endpoint.

        The unspecified fields will keep their original values.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                auth_provider_x509_cert_url: https://www.googleapis.com/oauth2/v1/certs
                auth_uri: https://accounts.google.com/o/oauth2/auth
                automute: true
                client_email: api-dev@datadog-sandbox.iam.gserviceaccount.com
                client_id: '123456712345671234567'
                client_x509_cert_url: >-
                  https://www.googleapis.com/robot/v1/metadata/x509/$CLIENT_EMAIL
                errors:
                  - '*'
                host_filters: key:value,filter:example
                private_key: private_key
                private_key_id: 123456789abcdefghi123456789abcdefghijklm
                project_id: datadog-apitest
                token_uri: https://accounts.google.com/o/oauth2/token
                type: service_account
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example: {}
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/host/{host_name}/mute:
    post:
      tags:
        - Hosts
      summary: Mute a host
      description: Mute a host.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                end: 1579098130
                message: Muting this host for a test!
                override: false
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: host_name
          in: path
          schema:
            type: string
          required: true
          description: (Required) Name of the host to mute.
          example: proident
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                action: Muted
                end: 1579098130
                hostname: test.host
                message: Muting this host for a test!
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/host/{host_name}/unmute:
    post:
      tags:
        - Hosts
      summary: Unmute a host
      description: Unmutes a host. This endpoint takes no JSON arguments.
      requestBody:
        content: {}
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: host_name
          in: path
          schema:
            type: string
          required: true
          description: (Required) Name of the host to unmute.
          example: proident
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                action: Muted
                end: 1579098130
                hostname: test.host
                message: Muting this host for a test!
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/hosts:
    get:
      tags:
        - Hosts
      summary: Get all hosts for your organization
      description: |-
        This endpoint allows searching for hosts by name, alias, or tag.
        Hosts live within the past 3 hours are included by default.
        Retention is 7 days.
        Results are paginated with a max of 1000 results at a time.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: filter
          in: query
          schema:
            type: string
          description: String to filter search results.
          example: proident
        - name: sort_field
          in: query
          schema:
            type: string
          description: Sort hosts by this field.
          example: proident
        - name: sort_dir
          in: query
          schema:
            type: string
          description: Direction of sort. Options include `asc` and `desc`.
          example: proident
        - name: start
          in: query
          schema:
            type: number
          description: Host result to start search from.
          example: '-70569764'
        - name: count
          in: query
          schema:
            type: number
          description: Number of hosts to return. Max 1000.
          example: '-70569764'
        - name: from
          in: query
          schema:
            type: number
          description: >-
            Number of seconds since UNIX epoch from which you want to search
            your hosts.
          example: '-70569764'
        - name: include_muted_hosts_data
          in: query
          schema:
            type: boolean
          description: >-
            Include information on the muted status of hosts and when the mute
            expires.
          example: 'true'
        - name: include_hosts_metadata
          in: query
          schema:
            type: boolean
          description: >-
            Include additional metadata about the hosts (agent_version, machine,
            platform, processor, etc.).
          example: 'true'
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                host_list:
                  - aliases:
                      - mycoolhost-1
                      - mycoolhost-1
                    apps:
                      - agent
                      - agent
                    aws_name: mycoolhost-1
                    host_name: i-deadbeef
                    id: 123456
                    is_muted: false
                    last_reported_time: 1565000000
                    meta:
                      agent_checks:
                        - []
                        - []
                      agent_version: 7.32.3
                      cpuCores: 1
                      fbsdV:
                        - FreeBSD
                        - FreeBSD
                      gohai: >-
                        {"cpu":{"cache_size":"8192
                        KB","cpu_cores":"1","cpu_logical_processors":"1","family":"6","mhz":"2712.000","model":"142","model_name":"Intel(R)
                        Core(TM) i7-8559U CPU @
                        2.70GHz","stepping":"10","vendor_id":"GenuineIntel"},"filesystem":[{"kb_size":"3966896","mounted_on":"/dev","name":"udev"},{"kb_size":"797396","mounted_on":"/run","name":"tmpfs"},{"kb_size":"64800356","mounted_on":"/","name":"/dev/mapper/vagrant--vg-root"},{"kb_size":"3986972","mounted_on":"/dev/shm","name":"tmpfs"},{"kb_size":"5120","mounted_on":"/run/lock","name":"tmpfs"},{"kb_size":"3986972","mounted_on":"/sys/fs/cgroup","name":"tmpfs"},{"kb_size":"488245288","mounted_on":"/vagrant","name":"vagrant"},{"kb_size":"797392","mounted_on":"/run/user/1000","name":"tmpfs"}],"memory":{"swap_total":"1003516kB","total":"7973944kB"},"network":{"interfaces":[{"ipv4":"10.0.2.15","ipv4-network":"10.0.2.0/24","ipv6":"fe80::a00:27ff:fec2:be11","ipv6-network":"fe80::/64","macaddress":"08:00:27:c2:be:11","name":"eth0"},{"ipv4":"192.168.122.1","ipv4-network":"192.168.122.0/24","macaddress":"52:54:00:6f:1c:bf","name":"virbr0"}],"ipaddress":"10.0.2.15","ipaddressv6":"fe80::a00:27ff:fec2:be11","macaddress":"08:00:27:c2:be:11"},"platform":{"GOOARCH":"amd64","GOOS":"linux","goV":"1.16.7","hardware_platform":"x86_64","hostname":"vagrant","kernel_name":"Linux","kernel_release":"4.15.0-29-generic","kernel_version":"#31-Ubuntu
                        SMP Tue Jul 17 15:39:52 UTC
                        2018","machine":"x86_64","os":"GNU/Linux","processor":"x86_64","pythonV":"2.7.15rc1"}}
                      install_method:
                        installer_version: install_script-1.7.1
                        tool: install_script
                        tool_version: install_script
                      macV:
                        - Mac
                        - Mac
                      machine: amd64
                      nixV:
                        - Ubuntu
                        - Ubuntu
                      platform: linux
                      processor: Intel(R) Core(TM) i7-8559U CPU @ 2.70GHz
                      pythonV: 3.8.11
                      socket-fqdn: vagrant.vm.
                      socket-hostname: vagrant
                      winV:
                        - Windows
                        - Windows
                    metrics:
                      cpu: 99
                      iowait: 3.2
                      load: 0.5
                    mute_timeout: 31719162
                    name: i-hostname
                    sources:
                      - aws
                      - aws
                    tags_by_source:
                      aliqua_0dc:
                        - test.example.com.host
                        - test.example.com.host
                      velit2:
                        - test.example.com.host
                        - test.example.com.host
                    up: true
                  - aliases:
                      - mycoolhost-1
                      - mycoolhost-1
                    apps:
                      - agent
                      - agent
                    aws_name: mycoolhost-1
                    host_name: i-deadbeef
                    id: 123456
                    is_muted: false
                    last_reported_time: 1565000000
                    meta:
                      agent_checks:
                        - []
                        - []
                      agent_version: 7.32.3
                      cpuCores: 1
                      fbsdV:
                        - FreeBSD
                        - FreeBSD
                      gohai: >-
                        {"cpu":{"cache_size":"8192
                        KB","cpu_cores":"1","cpu_logical_processors":"1","family":"6","mhz":"2712.000","model":"142","model_name":"Intel(R)
                        Core(TM) i7-8559U CPU @
                        2.70GHz","stepping":"10","vendor_id":"GenuineIntel"},"filesystem":[{"kb_size":"3966896","mounted_on":"/dev","name":"udev"},{"kb_size":"797396","mounted_on":"/run","name":"tmpfs"},{"kb_size":"64800356","mounted_on":"/","name":"/dev/mapper/vagrant--vg-root"},{"kb_size":"3986972","mounted_on":"/dev/shm","name":"tmpfs"},{"kb_size":"5120","mounted_on":"/run/lock","name":"tmpfs"},{"kb_size":"3986972","mounted_on":"/sys/fs/cgroup","name":"tmpfs"},{"kb_size":"488245288","mounted_on":"/vagrant","name":"vagrant"},{"kb_size":"797392","mounted_on":"/run/user/1000","name":"tmpfs"}],"memory":{"swap_total":"1003516kB","total":"7973944kB"},"network":{"interfaces":[{"ipv4":"10.0.2.15","ipv4-network":"10.0.2.0/24","ipv6":"fe80::a00:27ff:fec2:be11","ipv6-network":"fe80::/64","macaddress":"08:00:27:c2:be:11","name":"eth0"},{"ipv4":"192.168.122.1","ipv4-network":"192.168.122.0/24","macaddress":"52:54:00:6f:1c:bf","name":"virbr0"}],"ipaddress":"10.0.2.15","ipaddressv6":"fe80::a00:27ff:fec2:be11","macaddress":"08:00:27:c2:be:11"},"platform":{"GOOARCH":"amd64","GOOS":"linux","goV":"1.16.7","hardware_platform":"x86_64","hostname":"vagrant","kernel_name":"Linux","kernel_release":"4.15.0-29-generic","kernel_version":"#31-Ubuntu
                        SMP Tue Jul 17 15:39:52 UTC
                        2018","machine":"x86_64","os":"GNU/Linux","processor":"x86_64","pythonV":"2.7.15rc1"}}
                      install_method:
                        installer_version: install_script-1.7.1
                        tool: install_script
                        tool_version: install_script
                      macV:
                        - Mac
                        - Mac
                      machine: amd64
                      nixV:
                        - Ubuntu
                        - Ubuntu
                      platform: linux
                      processor: Intel(R) Core(TM) i7-8559U CPU @ 2.70GHz
                      pythonV: 3.8.11
                      socket-fqdn: vagrant.vm.
                      socket-hostname: vagrant
                      winV:
                        - Windows
                        - Windows
                    metrics:
                      cpu: 99
                      iowait: 3.2
                      load: 0.5
                    mute_timeout: -49257482
                    name: i-hostname
                    sources:
                      - aws
                      - aws
                    tags_by_source:
                      nisi__48:
                        - test.example.com.host
                        - test.example.com.host
                    up: true
                total_matching: 1
                total_returned: 1
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/hosts/totals:
    get:
      tags:
        - Hosts
      summary: Get the total number of active hosts
      description: >-
        This endpoint returns the total number of active and up hosts in your
        Datadog account.

        Active means the host has reported in the past hour, and up means it has
        reported in the past two hours.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: from
          in: query
          schema:
            type: number
          description: >-
            Number of seconds from which you want to get total number of active
            hosts.
          example: '-70569764'
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                total_active: 47344033
                total_up: -69507512
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v2/teams:
    get:
      tags:
        - Incident Teams
      summary: Get a list of all incident teams
      description: >-
        Get all incident teams for the requesting user's organization. If the
        `include[users]` query parameter is provided, the included attribute
        will contain the users related to these incident teams.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: include
          in: query
          schema:
            type: string
          description: >-
            Specifies which types of related objects should be included in the
            response.
          example: <string>
        - name: page[size]
          in: query
          schema:
            type: integer
          description: Size for a given page.
          example: '10'
        - name: page[offset]
          in: query
          schema:
            type: integer
          description: Specific offset to use as the beginning of the returned page.
          example: '0'
        - name: filter
          in: query
          schema:
            type: string
          description: A search query that filters teams by name.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - attributes:
                      name: team name
                    type: teams
                included:
                  - attributes:
                      created_at: '1945-10-04T02:04:10.391Z'
                      disabled: false
                      email: eu
                      handle: eiusmod aliquip tempor
                      icon: dolor in
                      modified_at: '1983-03-20T23:51:15.289Z'
                      name: nostrud sint et officia
                      service_account: true
                      status: amet Ut deserunt esse consectetur
                      title: adipisicing
                      verified: true
                    id: officia occaecat sit dolor
                    relationships:
                      org:
                        data:
                          id: 00000000-0000-beef-0000-000000000000
                          type: orgs
                      other_orgs:
                        data: []
                      other_users:
                        data: []
                      roles:
                        data:
                          - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                            type: roles
                          - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                            type: roles
                    type: users
                  - attributes:
                      created_at: '1977-11-20T12:51:47.341Z'
                      disabled: false
                      email: consectetur do
                      handle: non reprehenderit cillum nulla
                      icon: anim
                      modified_at: '1997-10-08T00:50:28.647Z'
                      name: laborum dolore
                      service_account: true
                      status: minim incididunt
                      title: in nostrud in est fugiat
                      verified: false
                    id: in labore fugiat
                    relationships:
                      org:
                        data:
                          id: 00000000-0000-beef-0000-000000000000
                          type: orgs
                      other_orgs:
                        data: []
                      other_users:
                        data: []
                      roles:
                        data:
                          - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                            type: roles
                          - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                            type: roles
                    type: users
                meta:
                  pagination:
                    next_offset: 1000
                    offset: 10
                    size: 1000
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '401':
          description: Unauthorized
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    post:
      tags:
        - Incident Teams
      summary: Create a new incident team
      description: Creates a new incident team.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                data:
                  type: teams
                  attributes:
                    name: <string>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '201':
          description: Created
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  attributes:
                    created: '1958-12-10T22:59:16.119Z'
                    modified: '2011-11-25T09:33:13.303Z'
                    name: team name
                  id: 00000000-7ea3-0000-000a-000000000000
                  relationships:
                    created_by:
                      data:
                        id: 00000000-0000-0000-2345-000000000000
                        type: users
                    last_modified_by:
                      data:
                        id: 00000000-0000-0000-2345-000000000000
                        type: users
                  type: teams
                included:
                  - attributes:
                      created_at: '1997-03-11T05:51:31.061Z'
                      disabled: true
                      email: in fu
                      handle: ad est et in
                      icon: aliquip labore
                      modified_at: '1961-10-16T12:06:53.235Z'
                      name: 'nisi enim '
                      service_account: false
                      status: adipisicing ipsum cupidatat commodo laborum
                      title: id cillum veniam
                      verified: true
                    id: dolor
                    relationships:
                      org:
                        data:
                          id: 00000000-0000-beef-0000-000000000000
                          type: orgs
                      other_orgs:
                        data: []
                      other_users:
                        data: []
                      roles:
                        data:
                          - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                            type: roles
                          - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                            type: roles
                    type: users
                  - attributes:
                      created_at: '2019-05-05T01:52:49.317Z'
                      disabled: false
                      email: consequat irure et cupidatat
                      handle: mollit laborum sint laboris
                      icon: commodo ipsum tempor fugiat non
                      modified_at: '2002-05-05T23:40:13.472Z'
                      name: aute ess
                      service_account: false
                      status: tempor
                      title: esse dolor voluptate est
                      verified: false
                    id: incididunt qui
                    relationships:
                      org:
                        data:
                          id: 00000000-0000-beef-0000-000000000000
                          type: orgs
                      other_orgs:
                        data: []
                      other_users:
                        data: []
                      roles:
                        data:
                          - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                            type: roles
                          - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                            type: roles
                    type: users
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '401':
          description: Unauthorized
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v2/teams/{team_id}:
    delete:
      tags:
        - Incident Teams
      summary: Delete an existing incident team
      description: Deletes an existing incident team.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: team_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the incident team.
          example: <string>
      responses:
        '204':
          description: No Content
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '401':
          description: Unauthorized
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    get:
      tags:
        - Incident Teams
      summary: Get details of an incident team
      description: >-
        Get details of an incident team. If the `include[users]` query parameter
        is provided,

        the included attribute will contain the users related to these incident
        teams.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: include
          in: query
          schema:
            type: string
          description: >-
            Specifies which types of related objects should be included in the
            response.
          example: <string>
        - name: team_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the incident team.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  attributes:
                    created: '1958-12-10T22:59:16.119Z'
                    modified: '2011-11-25T09:33:13.303Z'
                    name: team name
                  id: 00000000-7ea3-0000-000a-000000000000
                  relationships:
                    created_by:
                      data:
                        id: 00000000-0000-0000-2345-000000000000
                        type: users
                    last_modified_by:
                      data:
                        id: 00000000-0000-0000-2345-000000000000
                        type: users
                  type: teams
                included:
                  - attributes:
                      created_at: '1997-03-11T05:51:31.061Z'
                      disabled: true
                      email: in fu
                      handle: ad est et in
                      icon: aliquip labore
                      modified_at: '1961-10-16T12:06:53.235Z'
                      name: 'nisi enim '
                      service_account: false
                      status: adipisicing ipsum cupidatat commodo laborum
                      title: id cillum veniam
                      verified: true
                    id: dolor
                    relationships:
                      org:
                        data:
                          id: 00000000-0000-beef-0000-000000000000
                          type: orgs
                      other_orgs:
                        data: []
                      other_users:
                        data: []
                      roles:
                        data:
                          - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                            type: roles
                          - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                            type: roles
                    type: users
                  - attributes:
                      created_at: '2019-05-05T01:52:49.317Z'
                      disabled: false
                      email: consequat irure et cupidatat
                      handle: mollit laborum sint laboris
                      icon: commodo ipsum tempor fugiat non
                      modified_at: '2002-05-05T23:40:13.472Z'
                      name: aute ess
                      service_account: false
                      status: tempor
                      title: esse dolor voluptate est
                      verified: false
                    id: incididunt qui
                    relationships:
                      org:
                        data:
                          id: 00000000-0000-beef-0000-000000000000
                          type: orgs
                      other_orgs:
                        data: []
                      other_users:
                        data: []
                      roles:
                        data:
                          - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                            type: roles
                          - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                            type: roles
                    type: users
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '401':
          description: Unauthorized
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    patch:
      tags:
        - Incident Teams
      summary: Update an existing incident team
      description: >-
        Updates an existing incident team. Only provide the attributes which
        should be updated as this request is a partial update.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                data:
                  type: teams
                  attributes:
                    name: <string>
                  id: <string>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: team_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the incident team.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  attributes:
                    created: '1958-12-10T22:59:16.119Z'
                    modified: '2011-11-25T09:33:13.303Z'
                    name: team name
                  id: 00000000-7ea3-0000-000a-000000000000
                  relationships:
                    created_by:
                      data:
                        id: 00000000-0000-0000-2345-000000000000
                        type: users
                    last_modified_by:
                      data:
                        id: 00000000-0000-0000-2345-000000000000
                        type: users
                  type: teams
                included:
                  - attributes:
                      created_at: '1997-03-11T05:51:31.061Z'
                      disabled: true
                      email: in fu
                      handle: ad est et in
                      icon: aliquip labore
                      modified_at: '1961-10-16T12:06:53.235Z'
                      name: 'nisi enim '
                      service_account: false
                      status: adipisicing ipsum cupidatat commodo laborum
                      title: id cillum veniam
                      verified: true
                    id: dolor
                    relationships:
                      org:
                        data:
                          id: 00000000-0000-beef-0000-000000000000
                          type: orgs
                      other_orgs:
                        data: []
                      other_users:
                        data: []
                      roles:
                        data:
                          - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                            type: roles
                          - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                            type: roles
                    type: users
                  - attributes:
                      created_at: '2019-05-05T01:52:49.317Z'
                      disabled: false
                      email: consequat irure et cupidatat
                      handle: mollit laborum sint laboris
                      icon: commodo ipsum tempor fugiat non
                      modified_at: '2002-05-05T23:40:13.472Z'
                      name: aute ess
                      service_account: false
                      status: tempor
                      title: esse dolor voluptate est
                      verified: false
                    id: incididunt qui
                    relationships:
                      org:
                        data:
                          id: 00000000-0000-beef-0000-000000000000
                          type: orgs
                      other_orgs:
                        data: []
                      other_users:
                        data: []
                      roles:
                        data:
                          - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                            type: roles
                          - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                            type: roles
                    type: users
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '401':
          description: Unauthorized
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /:
    get:
      tags:
        - IP Ranges
      summary: List IP Ranges
      description: Get information about Datadog IP ranges.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                agents:
                  prefixes_ipv4:
                    - aliquip exercitation qui
                    - nostrud
                  prefixes_ipv6:
                    - officia conseq
                    - dolore aliqua
                api:
                  prefixes_ipv4:
                    - pariatur quis non irure
                    - ut qui tempor
                  prefixes_ipv6:
                    - ut et ullamco
                    - eiusmod cupidatat veniam
                apm:
                  prefixes_ipv4:
                    - elit nulla
                    - exercitation minim culpa id non
                  prefixes_ipv6:
                    - proident eu
                    - commodo dolor tempor
                logs:
                  prefixes_ipv4:
                    - reprehenderit
                    - nisi
                  prefixes_ipv6:
                    - mollit in adipisicing nulla Ut
                    - ut labore elit
                modified: 2019-10-31-20-00-00
                process:
                  prefixes_ipv4:
                    - exercitation dolore culpa velit voluptate
                    - laborum eu deserunt
                  prefixes_ipv6:
                    - ut Excepteur culpa
                    - consequat
                synthetics:
                  prefixes_ipv4:
                    - amet magna elit veniam
                    - elit adipisicing dolore
                  prefixes_ipv4_by_location:
                    quis_17:
                      - occaecat est voluptate eiusmod
                      - amet ad sit qui
                    deserunt_6c:
                      - labore nisi
                      - ea Ut
                  prefixes_ipv6:
                    - Duis in consequat aute
                    - proident ullamco ad pariatur incididunt
                  prefixes_ipv6_by_location:
                    cillum_0:
                      - consectetur commodo l
                      - ipsum ullamco qui
                    deserunt_2:
                      - magna occaecat consectetur dolore
                      - deserunt pariatur
                    laboris87:
                      - et id
                      - laborum ut
                synthetics-private-locations:
                  prefixes_ipv4:
                    - enim ut ex adipisicing
                    - sint quis in et
                  prefixes_ipv6:
                    - in
                    - esse sit deserunt veniam
                version: 11
                webhooks:
                  prefixes_ipv4:
                    - voluptate ea
                    - ut mollit dolore velit
                  prefixes_ipv6:
                    - in consectetur labore fugiat
                    - elit veniam Duis
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/application_key:
    post:
      tags:
        - Key Management
      summary: Create an application key
      description: Create an application key with a given name.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                name: example user
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                application_key:
                  hash: 1234512345123459cda4eb9ced49a3d84fd0138c
                  name: app_key
                  owner: test_user
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '409':
          description: Conflict
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v2/current_user/application_keys/{app_key_id}:
    delete:
      tags:
        - Key Management
      summary: Delete an application key owned by current user
      description: Delete an application key owned by current user
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: app_key_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the application key.
          example: <string>
      responses:
        '204':
          description: No Content
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    patch:
      tags:
        - Key Management
      summary: Edit an application key owned by current user
      description: Edit an application key owned by current user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                data:
                  attributes:
                    name: <string>
                    scopes:
                      - <string>
                      - <string>
                  id: <string>
                  type: application_keys
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: app_key_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the application key.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  attributes:
                    created_at: '2020-11-23T10:00:00.000Z'
                    key: Lorem nisi aliquip
                    last4: abcd
                    name: Application Key for managing dashboards
                    scopes:
                      - dashboards_read
                      - dashboards_write
                      - dashboards_public_share
                  id: occaecat
                  relationships:
                    owned_by:
                      data:
                        id: 00000000-0000-0000-2345-000000000000
                        type: users
                  type: application_keys
                included:
                  - attributes:
                      created_at: '2020-08-14T05:30:02.603Z'
                      disabled: false
                      email: sit in
                      handle: laborum eiusmod amet in
                      icon: ut commodo qui
                      modified_at: '1974-05-16T20:27:03.878Z'
                      name: cupidatat
                      service_account: true
                      status: nulla mollit dolor sit
                      title: ipsum commodo
                      verified: false
                    id: laboris aliquip Excepteur
                    relationships:
                      org:
                        data:
                          id: 00000000-0000-beef-0000-000000000000
                          type: orgs
                      other_orgs:
                        data: []
                      other_users:
                        data: []
                      roles:
                        data:
                          - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                            type: roles
                          - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                            type: roles
                    type: users
                  - attributes:
                      created_at: '1982-02-15T22:01:08.559Z'
                      disabled: false
                      email: sed anim cupidatat quis sint
                      handle: eiusmod dolore dolor Lorem
                      icon: esse eiusmod id et enim
                      modified_at: '1981-04-01T20:10:54.919Z'
                      name: Duis est pariatur eu occaecat
                      service_account: true
                      status: nostrud
                      title: Duis ad consequat ut
                      verified: false
                    id: ut est Lorem nisi
                    relationships:
                      org:
                        data:
                          id: 00000000-0000-beef-0000-000000000000
                          type: orgs
                      other_orgs:
                        data: []
                      other_users:
                        data: []
                      roles:
                        data:
                          - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                            type: roles
                          - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                            type: roles
                    type: users
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    get:
      tags:
        - Key Management
      summary: Get one application key owned by current user
      description: Get an application key owned by current user
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: app_key_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the application key.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  attributes:
                    created_at: '2020-11-23T10:00:00.000Z'
                    key: Lorem nisi aliquip
                    last4: abcd
                    name: Application Key for managing dashboards
                    scopes:
                      - dashboards_read
                      - dashboards_write
                      - dashboards_public_share
                  id: occaecat
                  relationships:
                    owned_by:
                      data:
                        id: 00000000-0000-0000-2345-000000000000
                        type: users
                  type: application_keys
                included:
                  - attributes:
                      created_at: '2020-08-14T05:30:02.603Z'
                      disabled: false
                      email: sit in
                      handle: laborum eiusmod amet in
                      icon: ut commodo qui
                      modified_at: '1974-05-16T20:27:03.878Z'
                      name: cupidatat
                      service_account: true
                      status: nulla mollit dolor sit
                      title: ipsum commodo
                      verified: false
                    id: laboris aliquip Excepteur
                    relationships:
                      org:
                        data:
                          id: 00000000-0000-beef-0000-000000000000
                          type: orgs
                      other_orgs:
                        data: []
                      other_users:
                        data: []
                      roles:
                        data:
                          - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                            type: roles
                          - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                            type: roles
                    type: users
                  - attributes:
                      created_at: '1982-02-15T22:01:08.559Z'
                      disabled: false
                      email: sed anim cupidatat quis sint
                      handle: eiusmod dolore dolor Lorem
                      icon: esse eiusmod id et enim
                      modified_at: '1981-04-01T20:10:54.919Z'
                      name: Duis est pariatur eu occaecat
                      service_account: true
                      status: nostrud
                      title: Duis ad consequat ut
                      verified: false
                    id: ut est Lorem nisi
                    relationships:
                      org:
                        data:
                          id: 00000000-0000-beef-0000-000000000000
                          type: orgs
                      other_orgs:
                        data: []
                      other_users:
                        data: []
                      roles:
                        data:
                          - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                            type: roles
                          - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                            type: roles
                    type: users
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v2/api_keys:
    get:
      tags:
        - Key Management
      summary: Get all API keys
      description: List all API keys available for your account.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: page[size]
          in: query
          schema:
            type: integer
          description: Size for a given page.
          example: '10'
        - name: page[number]
          in: query
          schema:
            type: integer
          description: Specific page number to return.
          example: '0'
        - name: sort
          in: query
          schema:
            type: string
          description: |-
            API key attribute used to sort results. Sort order is ascending
            by default. In order to specify a descending sort, prefix the
            attribute with a minus sign.
          example: name
        - name: filter
          in: query
          schema:
            type: string
          description: Filter API keys by the specified string.
          example: <string>
        - name: filter[created_at][start]
          in: query
          schema:
            type: string
          description: Only include API keys created on or after the specified date.
          example: <string>
        - name: filter[created_at][end]
          in: query
          schema:
            type: string
          description: Only include API keys created on or before the specified date.
          example: <string>
        - name: filter[modified_at][start]
          in: query
          schema:
            type: string
          description: Only include API keys modified on or after the specified date.
          example: <string>
        - name: filter[modified_at][end]
          in: query
          schema:
            type: string
          description: Only include API keys modified on or before the specified date.
          example: <string>
        - name: include
          in: query
          schema:
            type: string
          description: >-
            Comma separated list of resource paths for related resources to
            include in the response. Supported resource paths are `created_by`
            and `modified_by`.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - attributes:
                      created_at: '2020-11-23T10:00:00.000Z'
                      last4: abcd
                      modified_at: '2020-11-23T10:00:00.000Z'
                      name: API Key for submitting metrics
                    id: voluptate sed cillum dolore
                    relationships:
                      created_by:
                        data:
                          id: 00000000-0000-0000-2345-000000000000
                          type: users
                      modified_by:
                        data:
                          id: 00000000-0000-0000-2345-000000000000
                          type: users
                    type: api_keys
                  - attributes:
                      created_at: '2020-11-23T10:00:00.000Z'
                      last4: abcd
                      modified_at: '2020-11-23T10:00:00.000Z'
                      name: API Key for submitting metrics
                    id: ea
                    relationships:
                      created_by:
                        data:
                          id: 00000000-0000-0000-2345-000000000000
                          type: users
                      modified_by:
                        data:
                          id: 00000000-0000-0000-2345-000000000000
                          type: users
                    type: api_keys
                included:
                  - attributes:
                      created_at: '1954-06-19T11:24:00.029Z'
                      disabled: false
                      email: dolor ea
                      handle: dolore consequat sunt aliquip
                      icon: cupidatat id
                      modified_at: '1974-03-04T06:43:22.536Z'
                      name: in sit mollit adipisicing
                      service_account: true
                      status: adipisicing consecte
                      title: sit aliquip Duis et
                      verified: false
                    id: exercitation deserunt ipsum adipisicing
                    relationships:
                      org:
                        data:
                          id: 00000000-0000-beef-0000-000000000000
                          type: orgs
                      other_orgs:
                        data: []
                      other_users:
                        data: []
                      roles:
                        data:
                          - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                            type: roles
                          - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                            type: roles
                    type: users
                  - attributes:
                      created_at: '1972-05-03T09:48:07.659Z'
                      disabled: true
                      email: dolor
                      handle: in in in
                      icon: proident deserunt non velit
                      modified_at: '1978-04-02T06:41:06.216Z'
                      name: commodo magna
                      service_account: false
                      status: aliquip qui ut in
                      title: quis culpa veniam
                      verified: true
                    id: est veniam eiusmod
                    relationships:
                      org:
                        data:
                          id: 00000000-0000-beef-0000-000000000000
                          type: orgs
                      other_orgs:
                        data: []
                      other_users:
                        data: []
                      roles:
                        data:
                          - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                            type: roles
                          - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                            type: roles
                    type: users
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    post:
      tags:
        - Key Management
      summary: Create an API key
      description: Create an API key.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                data:
                  attributes:
                    name: <string>
                  type: api_keys
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '201':
          description: Created
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  attributes:
                    created_at: '2020-11-23T10:00:00.000Z'
                    key: voluptate velit
                    last4: abcd
                    modified_at: '2020-11-23T10:00:00.000Z'
                    name: API Key for submitting metrics
                  id: U
                  relationships:
                    created_by:
                      data:
                        id: 00000000-0000-0000-2345-000000000000
                        type: users
                    modified_by:
                      data:
                        id: 00000000-0000-0000-2345-000000000000
                        type: users
                  type: api_keys
                included:
                  - attributes:
                      created_at: '1983-06-06T16:02:23.137Z'
                      disabled: false
                      email: cill
                      handle: culpa dolor Excepteur
                      icon: aliquip labore Lorem
                      modified_at: '1967-02-08T09:18:39.789Z'
                      name: Duis ad cillum
                      service_account: true
                      status: Duis exercitation quis culpa
                      title: nisi dolor incididunt fugiat
                      verified: true
                    id: fugiat amet dolore
                    relationships:
                      org:
                        data:
                          id: 00000000-0000-beef-0000-000000000000
                          type: orgs
                      other_orgs:
                        data: []
                      other_users:
                        data: []
                      roles:
                        data:
                          - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                            type: roles
                          - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                            type: roles
                    type: users
                  - attributes:
                      created_at: '1977-05-25T06:06:49.889Z'
                      disabled: true
                      email: est dolore
                      handle: culpa voluptate nostrud
                      icon: et enim pariatur
                      modified_at: '1949-10-04T20:19:53.049Z'
                      name: Duis
                      service_account: false
                      status: c
                      title: voluptate incididunt do esse
                      verified: true
                    id: consequat dolor sunt minim veniam
                    relationships:
                      org:
                        data:
                          id: 00000000-0000-beef-0000-000000000000
                          type: orgs
                      other_orgs:
                        data: []
                      other_users:
                        data: []
                      roles:
                        data:
                          - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                            type: roles
                          - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                            type: roles
                    type: users
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v2/api_keys/{api_key_id}:
    get:
      tags:
        - Key Management
      summary: Get API key
      description: Get an API key.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: include
          in: query
          schema:
            type: string
          description: >-
            Comma separated list of resource paths for related resources to
            include in the response. Supported resource paths are `created_by`
            and `modified_by`.
          example: <string>
        - name: api_key_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the API key.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  attributes:
                    created_at: '2020-11-23T10:00:00.000Z'
                    key: voluptate velit
                    last4: abcd
                    modified_at: '2020-11-23T10:00:00.000Z'
                    name: API Key for submitting metrics
                  id: U
                  relationships:
                    created_by:
                      data:
                        id: 00000000-0000-0000-2345-000000000000
                        type: users
                    modified_by:
                      data:
                        id: 00000000-0000-0000-2345-000000000000
                        type: users
                  type: api_keys
                included:
                  - attributes:
                      created_at: '1983-06-06T16:02:23.137Z'
                      disabled: false
                      email: cill
                      handle: culpa dolor Excepteur
                      icon: aliquip labore Lorem
                      modified_at: '1967-02-08T09:18:39.789Z'
                      name: Duis ad cillum
                      service_account: true
                      status: Duis exercitation quis culpa
                      title: nisi dolor incididunt fugiat
                      verified: true
                    id: fugiat amet dolore
                    relationships:
                      org:
                        data:
                          id: 00000000-0000-beef-0000-000000000000
                          type: orgs
                      other_orgs:
                        data: []
                      other_users:
                        data: []
                      roles:
                        data:
                          - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                            type: roles
                          - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                            type: roles
                    type: users
                  - attributes:
                      created_at: '1977-05-25T06:06:49.889Z'
                      disabled: true
                      email: est dolore
                      handle: culpa voluptate nostrud
                      icon: et enim pariatur
                      modified_at: '1949-10-04T20:19:53.049Z'
                      name: Duis
                      service_account: false
                      status: c
                      title: voluptate incididunt do esse
                      verified: true
                    id: consequat dolor sunt minim veniam
                    relationships:
                      org:
                        data:
                          id: 00000000-0000-beef-0000-000000000000
                          type: orgs
                      other_orgs:
                        data: []
                      other_users:
                        data: []
                      roles:
                        data:
                          - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                            type: roles
                          - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                            type: roles
                    type: users
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    patch:
      tags:
        - Key Management
      summary: Edit an API key
      description: Update an API key.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                data:
                  attributes:
                    name: <string>
                  id: <string>
                  type: api_keys
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: api_key_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the API key.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  attributes:
                    created_at: '2020-11-23T10:00:00.000Z'
                    key: voluptate velit
                    last4: abcd
                    modified_at: '2020-11-23T10:00:00.000Z'
                    name: API Key for submitting metrics
                  id: U
                  relationships:
                    created_by:
                      data:
                        id: 00000000-0000-0000-2345-000000000000
                        type: users
                    modified_by:
                      data:
                        id: 00000000-0000-0000-2345-000000000000
                        type: users
                  type: api_keys
                included:
                  - attributes:
                      created_at: '1983-06-06T16:02:23.137Z'
                      disabled: false
                      email: cill
                      handle: culpa dolor Excepteur
                      icon: aliquip labore Lorem
                      modified_at: '1967-02-08T09:18:39.789Z'
                      name: Duis ad cillum
                      service_account: true
                      status: Duis exercitation quis culpa
                      title: nisi dolor incididunt fugiat
                      verified: true
                    id: fugiat amet dolore
                    relationships:
                      org:
                        data:
                          id: 00000000-0000-beef-0000-000000000000
                          type: orgs
                      other_orgs:
                        data: []
                      other_users:
                        data: []
                      roles:
                        data:
                          - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                            type: roles
                          - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                            type: roles
                    type: users
                  - attributes:
                      created_at: '1977-05-25T06:06:49.889Z'
                      disabled: true
                      email: est dolore
                      handle: culpa voluptate nostrud
                      icon: et enim pariatur
                      modified_at: '1949-10-04T20:19:53.049Z'
                      name: Duis
                      service_account: false
                      status: c
                      title: voluptate incididunt do esse
                      verified: true
                    id: consequat dolor sunt minim veniam
                    relationships:
                      org:
                        data:
                          id: 00000000-0000-beef-0000-000000000000
                          type: orgs
                      other_orgs:
                        data: []
                      other_users:
                        data: []
                      roles:
                        data:
                          - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                            type: roles
                          - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                            type: roles
                    type: users
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    delete:
      tags:
        - Key Management
      summary: Delete an API key
      description: Delete an API key.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: api_key_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the API key.
          example: <string>
      responses:
        '204':
          description: No Content
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v2/current_user/application_keys:
    post:
      tags:
        - Key Management
      summary: Create an application key for current user
      description: Create an application key for current user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                data:
                  attributes:
                    name: <string>
                    scopes:
                      - <string>
                      - <string>
                  type: application_keys
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '201':
          description: Created
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  attributes:
                    created_at: '2020-11-23T10:00:00.000Z'
                    key: Lorem nisi aliquip
                    last4: abcd
                    name: Application Key for managing dashboards
                    scopes:
                      - dashboards_read
                      - dashboards_write
                      - dashboards_public_share
                  id: occaecat
                  relationships:
                    owned_by:
                      data:
                        id: 00000000-0000-0000-2345-000000000000
                        type: users
                  type: application_keys
                included:
                  - attributes:
                      created_at: '2020-08-14T05:30:02.603Z'
                      disabled: false
                      email: sit in
                      handle: laborum eiusmod amet in
                      icon: ut commodo qui
                      modified_at: '1974-05-16T20:27:03.878Z'
                      name: cupidatat
                      service_account: true
                      status: nulla mollit dolor sit
                      title: ipsum commodo
                      verified: false
                    id: laboris aliquip Excepteur
                    relationships:
                      org:
                        data:
                          id: 00000000-0000-beef-0000-000000000000
                          type: orgs
                      other_orgs:
                        data: []
                      other_users:
                        data: []
                      roles:
                        data:
                          - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                            type: roles
                          - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                            type: roles
                    type: users
                  - attributes:
                      created_at: '1982-02-15T22:01:08.559Z'
                      disabled: false
                      email: sed anim cupidatat quis sint
                      handle: eiusmod dolore dolor Lorem
                      icon: esse eiusmod id et enim
                      modified_at: '1981-04-01T20:10:54.919Z'
                      name: Duis est pariatur eu occaecat
                      service_account: true
                      status: nostrud
                      title: Duis ad consequat ut
                      verified: false
                    id: ut est Lorem nisi
                    relationships:
                      org:
                        data:
                          id: 00000000-0000-beef-0000-000000000000
                          type: orgs
                      other_orgs:
                        data: []
                      other_users:
                        data: []
                      roles:
                        data:
                          - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                            type: roles
                          - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                            type: roles
                    type: users
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    get:
      tags:
        - Key Management
      summary: Get all application keys owned by current user
      description: List all application keys available for current user
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: page[size]
          in: query
          schema:
            type: integer
          description: Size for a given page.
          example: '10'
        - name: page[number]
          in: query
          schema:
            type: integer
          description: Specific page number to return.
          example: '0'
        - name: sort
          in: query
          schema:
            type: string
          description: >-
            Application key attribute used to sort results. Sort order is
            ascending

            by default. In order to specify a descending sort, prefix the

            attribute with a minus sign.
          example: name
        - name: filter
          in: query
          schema:
            type: string
          description: Filter application keys by the specified string.
          example: <string>
        - name: filter[created_at][start]
          in: query
          schema:
            type: string
          description: >-
            Only include application keys created on or after the specified
            date.
          example: <string>
        - name: filter[created_at][end]
          in: query
          schema:
            type: string
          description: >-
            Only include application keys created on or before the specified
            date.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - attributes:
                      created_at: '2020-11-23T10:00:00.000Z'
                      last4: abcd
                      name: Application Key for managing dashboards
                      scopes:
                        - dashboards_read
                        - dashboards_write
                        - dashboards_public_share
                    id: Excepteur mollit aliquip
                    relationships:
                      owned_by:
                        data:
                          id: 00000000-0000-0000-2345-000000000000
                          type: users
                    type: application_keys
                  - attributes:
                      created_at: '2020-11-23T10:00:00.000Z'
                      last4: abcd
                      name: Application Key for managing dashboards
                      scopes:
                        - dashboards_read
                        - dashboards_write
                        - dashboards_public_share
                    id: commodo ipsum enim
                    relationships:
                      owned_by:
                        data:
                          id: 00000000-0000-0000-2345-000000000000
                          type: users
                    type: application_keys
                included:
                  - attributes:
                      created_at: '1967-09-06T10:50:33.683Z'
                      disabled: true
                      email: ea
                      handle: in Lorem ut
                      icon: est enim Duis culpa ut
                      modified_at: '2011-06-27T14:57:33.095Z'
                      name: anim dolor cillum dolor
                      service_account: true
                      status: officia deserunt
                      title: ut quis amet
                      verified: false
                    id: aute et officia
                    relationships:
                      org:
                        data:
                          id: 00000000-0000-beef-0000-000000000000
                          type: orgs
                      other_orgs:
                        data: []
                      other_users:
                        data: []
                      roles:
                        data:
                          - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                            type: roles
                          - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                            type: roles
                    type: users
                  - attributes:
                      created_at: '1971-05-13T05:54:26.615Z'
                      disabled: false
                      email: culpa enim do
                      handle: velit Duis Excepteur
                      icon: ut et
                      modified_at: '1990-10-20T08:39:15.756Z'
                      name: culpa incididunt mollit
                      service_account: false
                      status: sed Lorem Duis voluptate
                      title: velit culpa
                      verified: true
                    id: amet in cupidatat ex in
                    relationships:
                      org:
                        data:
                          id: 00000000-0000-beef-0000-000000000000
                          type: orgs
                      other_orgs:
                        data: []
                      other_users:
                        data: []
                      roles:
                        data:
                          - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                            type: roles
                          - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                            type: roles
                    type: users
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v2/application_keys:
    get:
      tags:
        - Key Management
      summary: Get all application keys
      description: List all application keys available for your org
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: page[size]
          in: query
          schema:
            type: integer
          description: Size for a given page.
          example: '10'
        - name: page[number]
          in: query
          schema:
            type: integer
          description: Specific page number to return.
          example: '0'
        - name: sort
          in: query
          schema:
            type: string
          description: >-
            Application key attribute used to sort results. Sort order is
            ascending

            by default. In order to specify a descending sort, prefix the

            attribute with a minus sign.
          example: name
        - name: filter
          in: query
          schema:
            type: string
          description: Filter application keys by the specified string.
          example: <string>
        - name: filter[created_at][start]
          in: query
          schema:
            type: string
          description: >-
            Only include application keys created on or after the specified
            date.
          example: <string>
        - name: filter[created_at][end]
          in: query
          schema:
            type: string
          description: >-
            Only include application keys created on or before the specified
            date.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - attributes:
                      created_at: '2020-11-23T10:00:00.000Z'
                      last4: abcd
                      name: Application Key for managing dashboards
                      scopes:
                        - dashboards_read
                        - dashboards_write
                        - dashboards_public_share
                    id: Excepteur mollit aliquip
                    relationships:
                      owned_by:
                        data:
                          id: 00000000-0000-0000-2345-000000000000
                          type: users
                    type: application_keys
                  - attributes:
                      created_at: '2020-11-23T10:00:00.000Z'
                      last4: abcd
                      name: Application Key for managing dashboards
                      scopes:
                        - dashboards_read
                        - dashboards_write
                        - dashboards_public_share
                    id: commodo ipsum enim
                    relationships:
                      owned_by:
                        data:
                          id: 00000000-0000-0000-2345-000000000000
                          type: users
                    type: application_keys
                included:
                  - attributes:
                      created_at: '1967-09-06T10:50:33.683Z'
                      disabled: true
                      email: ea
                      handle: in Lorem ut
                      icon: est enim Duis culpa ut
                      modified_at: '2011-06-27T14:57:33.095Z'
                      name: anim dolor cillum dolor
                      service_account: true
                      status: officia deserunt
                      title: ut quis amet
                      verified: false
                    id: aute et officia
                    relationships:
                      org:
                        data:
                          id: 00000000-0000-beef-0000-000000000000
                          type: orgs
                      other_orgs:
                        data: []
                      other_users:
                        data: []
                      roles:
                        data:
                          - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                            type: roles
                          - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                            type: roles
                    type: users
                  - attributes:
                      created_at: '1971-05-13T05:54:26.615Z'
                      disabled: false
                      email: culpa enim do
                      handle: velit Duis Excepteur
                      icon: ut et
                      modified_at: '1990-10-20T08:39:15.756Z'
                      name: culpa incididunt mollit
                      service_account: false
                      status: sed Lorem Duis voluptate
                      title: velit culpa
                      verified: true
                    id: amet in cupidatat ex in
                    relationships:
                      org:
                        data:
                          id: 00000000-0000-beef-0000-000000000000
                          type: orgs
                      other_orgs:
                        data: []
                      other_users:
                        data: []
                      roles:
                        data:
                          - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                            type: roles
                          - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                            type: roles
                    type: users
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v2/application_keys/{app_key_id}:
    get:
      tags:
        - Key Management
      summary: Get an application key
      description: Get an application key for your org.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: include
          in: query
          schema:
            type: string
          description: >-
            Resource path for related resources to include in the response. Only
            `owned_by` is supported.
          example: <string>
        - name: app_key_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the application key.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  attributes:
                    created_at: '2020-11-23T10:00:00.000Z'
                    key: Lorem nisi aliquip
                    last4: abcd
                    name: Application Key for managing dashboards
                    scopes:
                      - dashboards_read
                      - dashboards_write
                      - dashboards_public_share
                  id: occaecat
                  relationships:
                    owned_by:
                      data:
                        id: 00000000-0000-0000-2345-000000000000
                        type: users
                  type: application_keys
                included:
                  - attributes:
                      created_at: '2020-08-14T05:30:02.603Z'
                      disabled: false
                      email: sit in
                      handle: laborum eiusmod amet in
                      icon: ut commodo qui
                      modified_at: '1974-05-16T20:27:03.878Z'
                      name: cupidatat
                      service_account: true
                      status: nulla mollit dolor sit
                      title: ipsum commodo
                      verified: false
                    id: laboris aliquip Excepteur
                    relationships:
                      org:
                        data:
                          id: 00000000-0000-beef-0000-000000000000
                          type: orgs
                      other_orgs:
                        data: []
                      other_users:
                        data: []
                      roles:
                        data:
                          - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                            type: roles
                          - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                            type: roles
                    type: users
                  - attributes:
                      created_at: '1982-02-15T22:01:08.559Z'
                      disabled: false
                      email: sed anim cupidatat quis sint
                      handle: eiusmod dolore dolor Lorem
                      icon: esse eiusmod id et enim
                      modified_at: '1981-04-01T20:10:54.919Z'
                      name: Duis est pariatur eu occaecat
                      service_account: true
                      status: nostrud
                      title: Duis ad consequat ut
                      verified: false
                    id: ut est Lorem nisi
                    relationships:
                      org:
                        data:
                          id: 00000000-0000-beef-0000-000000000000
                          type: orgs
                      other_orgs:
                        data: []
                      other_users:
                        data: []
                      roles:
                        data:
                          - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                            type: roles
                          - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                            type: roles
                    type: users
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    patch:
      tags:
        - Key Management
      summary: Edit an application key
      description: Edit an application key
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                data:
                  attributes:
                    name: <string>
                    scopes:
                      - <string>
                      - <string>
                  id: <string>
                  type: application_keys
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: app_key_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the application key.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  attributes:
                    created_at: '2020-11-23T10:00:00.000Z'
                    key: Lorem nisi aliquip
                    last4: abcd
                    name: Application Key for managing dashboards
                    scopes:
                      - dashboards_read
                      - dashboards_write
                      - dashboards_public_share
                  id: occaecat
                  relationships:
                    owned_by:
                      data:
                        id: 00000000-0000-0000-2345-000000000000
                        type: users
                  type: application_keys
                included:
                  - attributes:
                      created_at: '2020-08-14T05:30:02.603Z'
                      disabled: false
                      email: sit in
                      handle: laborum eiusmod amet in
                      icon: ut commodo qui
                      modified_at: '1974-05-16T20:27:03.878Z'
                      name: cupidatat
                      service_account: true
                      status: nulla mollit dolor sit
                      title: ipsum commodo
                      verified: false
                    id: laboris aliquip Excepteur
                    relationships:
                      org:
                        data:
                          id: 00000000-0000-beef-0000-000000000000
                          type: orgs
                      other_orgs:
                        data: []
                      other_users:
                        data: []
                      roles:
                        data:
                          - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                            type: roles
                          - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                            type: roles
                    type: users
                  - attributes:
                      created_at: '1982-02-15T22:01:08.559Z'
                      disabled: false
                      email: sed anim cupidatat quis sint
                      handle: eiusmod dolore dolor Lorem
                      icon: esse eiusmod id et enim
                      modified_at: '1981-04-01T20:10:54.919Z'
                      name: Duis est pariatur eu occaecat
                      service_account: true
                      status: nostrud
                      title: Duis ad consequat ut
                      verified: false
                    id: ut est Lorem nisi
                    relationships:
                      org:
                        data:
                          id: 00000000-0000-beef-0000-000000000000
                          type: orgs
                      other_orgs:
                        data: []
                      other_users:
                        data: []
                      roles:
                        data:
                          - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                            type: roles
                          - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                            type: roles
                    type: users
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    delete:
      tags:
        - Key Management
      summary: Delete an application key
      description: Delete an application key
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: app_key_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the application key.
          example: <string>
      responses:
        '204':
          description: No Content
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v2/logs:
    post:
      tags:
        - Logs
      summary: Send logs
      description: >-
        Send your logs to your Datadog platform over HTTP. Limits per HTTP
        request are:


        - Maximum content size per payload (uncompressed): 5MB

        - Maximum size for a single log: 1MB

        - Maximum array size if sending multiple logs in an array: 1000 entries


        Any log exceeding 1MB is accepted and truncated by Datadog:

        - For a single log request, the API truncates the log at 1MB and returns
        a 2xx.

        - For a multi-logs request, the API processes all logs, truncates only
        logs larger than 1MB, and returns a 2xx.


        Datadog recommends sending your logs compressed.

        Add the `Content-Encoding: gzip` header to the request when sending
        compressed logs.


        The status codes answered by the HTTP API are:

        - 202: Accepted: the request has been accepted for processing

        - 400: Bad request (likely an issue in the payload formatting)

        - 401: Unauthorized (likely a missing API Key)

        - 403: Permission issue (likely using an invalid API Key)

        - 408: Request Timeout, request should be retried after some time

        - 413: Payload too large (batch is above 5MB uncompressed)

        - 429: Too Many Requests, request should be retried after some time

        - 500: Internal Server Error, the server encountered an unexpected
        condition that prevented it from fulfilling the request, request should
        be retried after some time

        - 503: Service Unavailable, the server is not ready to handle the
        request probably because it is overloaded, request should be retried
        after some time
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                - message: <string>
                  ddsource: <string>
                  ddtags: <string>
                  hostname: <string>
                  service: <string>
                - message: <string>
                  ddsource: <string>
                  ddtags: <string>
                  hostname: <string>
                  service: <string>
      parameters:
        - name: Content-Encoding
          in: header
          schema:
            type: string
          description: HTTP header used to compress the media-type.
          example: identity
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: ddtags
          in: query
          schema:
            type: string
          description: >-
            Log tags can be passed as query parameters with `text/plain` content
            type.
          example: <string>
      responses:
        '202':
          description: Accepted
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example: {}
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - detail: Malformed payload
                    status: '400'
                    title: Bad Request
                  - detail: Malformed payload
                    status: '400'
                    title: Bad Request
        '401':
          description: Unauthorized
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - detail: Malformed payload
                    status: '400'
                    title: Bad Request
                  - detail: Malformed payload
                    status: '400'
                    title: Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - detail: Malformed payload
                    status: '400'
                    title: Bad Request
                  - detail: Malformed payload
                    status: '400'
                    title: Bad Request
        '408':
          description: Request Timeout
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - detail: Malformed payload
                    status: '400'
                    title: Bad Request
                  - detail: Malformed payload
                    status: '400'
                    title: Bad Request
        '413':
          description: Request Entity Too Large
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - detail: Malformed payload
                    status: '400'
                    title: Bad Request
                  - detail: Malformed payload
                    status: '400'
                    title: Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - detail: Malformed payload
                    status: '400'
                    title: Bad Request
                  - detail: Malformed payload
                    status: '400'
                    title: Bad Request
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - detail: Malformed payload
                    status: '400'
                    title: Bad Request
                  - detail: Malformed payload
                    status: '400'
                    title: Bad Request
        '503':
          description: Service Unavailable
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - detail: Malformed payload
                    status: '400'
                    title: Bad Request
                  - detail: Malformed payload
                    status: '400'
                    title: Bad Request
  /api/v2/logs/analytics/aggregate:
    post:
      tags:
        - Logs
      summary: Aggregate events
      description: >-
        The API endpoint to aggregate events into buckets and compute metrics
        and timeseries.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                compute:
                  - aggregation: <string>
                    interval: <string>
                    metric: <string>
                    type: total
                  - aggregation: <string>
                    interval: <string>
                    metric: <string>
                    type: total
                filter:
                  from: now-15m
                  indexes:
                    - '*'
                  query: '*'
                  storage_tier: indexes
                  to: now
                group_by:
                  - facet: <string>
                    histogram:
                      interval: <double>
                      min: <double>
                      max: <double>
                    limit: 10
                    missing: <string>
                    sort:
                      aggregation: <string>
                      metric: <string>
                      order: <string>
                      type: alphabetical
                    total: <boolean>
                  - facet: <string>
                    histogram:
                      interval: <double>
                      min: <double>
                      max: <double>
                    limit: 10
                    missing: <string>
                    sort:
                      aggregation: <string>
                      metric: <string>
                      order: <string>
                      type: alphabetical
                    total: <boolean>
                options:
                  timeOffset: <long>
                  timezone: UTC
                page:
                  cursor: <string>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  buckets:
                    - by:
                        '@state': success
                        '@version': abc
                      computes:
                        aliqua960: aliquip incididunt consequat fugiat p
                        sit_8: qui id elit ad Ut
                    - by:
                        '@state': success
                        '@version': abc
                      computes:
                        Ut_8: de
                meta:
                  elapsed: 132
                  page:
                    after: >-
                      eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==
                  request_id: MWlFUjVaWGZTTTZPYzM0VXp1OXU2d3xLSVpEMjZKQ0VKUTI0dEYtM3RSOFVR
                  status: done
                  warnings:
                    - code: unknown_index
                      detail: 'indexes: foo, bar'
                      title: >-
                        One or several indexes are missing or invalid, results
                        hold data from the other indexes
                    - code: unknown_index
                      detail: 'indexes: foo, bar'
                      title: >-
                        One or several indexes are missing or invalid, results
                        hold data from the other indexes
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v2/logs/events/search:
    post:
      tags:
        - Logs
      summary: Search logs
      description: >-
        List endpoint returns logs that match a log search query.

        [Results are paginated][1].


        Use this endpoint to build complex logs filtering and search.


        **If you are considering archiving logs for your organization,

        consider use of the Datadog archive capabilities instead of the log list
        API.

        See [Datadog Logs Archive documentation][2].**


        [1]: /logs/guide/collect-multiple-logs-with-pagination

        [2]: https://docs.datadoghq.com/logs/archives
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                filter:
                  from: now-15m
                  indexes:
                    - '*'
                  query: '*'
                  storage_tier: indexes
                  to: now
                options:
                  timeOffset: <long>
                  timezone: UTC
                page:
                  cursor: <string>
                  limit: 10
                sort: <string>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - attributes:
                      attributes:
                        Ut_75: {}
                        adipisicing_8: {}
                      host: i-0123
                      message: Host connected to remote
                      service: agent
                      status: INFO
                      tags:
                        - team:A
                      timestamp: '2019-01-02T09:42:36.320Z'
                    id: AAAAAWgN8Xwgr1vKDQAAAABBV2dOOFh3ZzZobm1mWXJFYTR0OA
                    type: log
                  - attributes:
                      attributes:
                        deserunt68e: {}
                      host: i-0123
                      message: Host connected to remote
                      service: agent
                      status: INFO
                      tags:
                        - team:A
                      timestamp: '2019-01-02T09:42:36.320Z'
                    id: AAAAAWgN8Xwgr1vKDQAAAABBV2dOOFh3ZzZobm1mWXJFYTR0OA
                    type: log
                links:
                  next: >-
                    https://app.datadoghq.com/api/v2/logs/event?filter[query]=foo&page[cursor]=eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==
                meta:
                  elapsed: 132
                  page:
                    after: >-
                      eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==
                  request_id: MWlFUjVaWGZTTTZPYzM0VXp1OXU2d3xLSVpEMjZKQ0VKUTI0dEYtM3RSOFVR
                  status: done
                  warnings:
                    - code: unknown_index
                      detail: 'indexes: foo, bar'
                      title: >-
                        One or several indexes are missing or invalid, results
                        hold data from the other indexes
                    - code: unknown_index
                      detail: 'indexes: foo, bar'
                      title: >-
                        One or several indexes are missing or invalid, results
                        hold data from the other indexes
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v2/logs/events:
    get:
      tags:
        - Logs
      summary: Get a list of logs
      description: >-
        List endpoint returns logs that match a log search query.

        [Results are paginated][1].


        Use this endpoint to see your latest logs.


        **If you are considering archiving logs for your organization,

        consider use of the Datadog archive capabilities instead of the log list
        API.

        See [Datadog Logs Archive documentation][2].**


        [1]: /logs/guide/collect-multiple-logs-with-pagination

        [2]: https://docs.datadoghq.com/logs/archives
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: filter[query]
          in: query
          schema:
            type: string
          description: Search query following logs syntax.
          example: <string>
        - name: filter[index]
          in: query
          schema:
            type: string
          description: |-
            For customers with multiple indexes, the indexes to search
            Defaults to '*' which means all indexes
          example: <string>
        - name: filter[from]
          in: query
          schema:
            type: string
          description: Minimum timestamp for requested logs.
          example: <dateTime>
        - name: filter[to]
          in: query
          schema:
            type: string
          description: Maximum timestamp for requested logs.
          example: <dateTime>
        - name: filter[storage_tier]
          in: query
          schema:
            type: string
          description: Specifies the storage type to be used
          example: indexes
        - name: sort
          in: query
          schema:
            type: string
          description: Order of logs in results.
          example: <string>
        - name: page[cursor]
          in: query
          schema:
            type: string
          description: List following results with a cursor provided in the previous query.
          example: <string>
        - name: page[limit]
          in: query
          schema:
            type: integer
          description: Maximum number of logs in the response.
          example: '10'
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - attributes:
                      attributes:
                        Ut_75: {}
                        adipisicing_8: {}
                      host: i-0123
                      message: Host connected to remote
                      service: agent
                      status: INFO
                      tags:
                        - team:A
                      timestamp: '2019-01-02T09:42:36.320Z'
                    id: AAAAAWgN8Xwgr1vKDQAAAABBV2dOOFh3ZzZobm1mWXJFYTR0OA
                    type: log
                  - attributes:
                      attributes:
                        deserunt68e: {}
                      host: i-0123
                      message: Host connected to remote
                      service: agent
                      status: INFO
                      tags:
                        - team:A
                      timestamp: '2019-01-02T09:42:36.320Z'
                    id: AAAAAWgN8Xwgr1vKDQAAAABBV2dOOFh3ZzZobm1mWXJFYTR0OA
                    type: log
                links:
                  next: >-
                    https://app.datadoghq.com/api/v2/logs/event?filter[query]=foo&page[cursor]=eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==
                meta:
                  elapsed: 132
                  page:
                    after: >-
                      eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==
                  request_id: MWlFUjVaWGZTTTZPYzM0VXp1OXU2d3xLSVpEMjZKQ0VKUTI0dEYtM3RSOFVR
                  status: done
                  warnings:
                    - code: unknown_index
                      detail: 'indexes: foo, bar'
                      title: >-
                        One or several indexes are missing or invalid, results
                        hold data from the other indexes
                    - code: unknown_index
                      detail: 'indexes: foo, bar'
                      title: >-
                        One or several indexes are missing or invalid, results
                        hold data from the other indexes
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v2/logs/config/archive-order:
    get:
      tags:
        - Logs Archives
      summary: Get archive order
      description: |-
        Get the current order of your archives.
        This endpoint takes no JSON arguments.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  type: archive_order
                  attributes:
                    archive_ids:
                      - a2zcMylnM4OCHpYusxIi1g
                      - a2zcMylnM4OCHpYusxIi2g
                      - a2zcMylnM4OCHpYusxIi3g
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    put:
      tags:
        - Logs Archives
      summary: Update archive order
      description: >-
        Update the order of your archives. Since logs are processed
        sequentially, reordering an archive may change

        the structure and content of the data processed by other archives.


        **Note**: Using the `PUT` method updates your archive's order by
        replacing the current order

        with the new one.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                data:
                  type: archive_order
                  attributes:
                    archive_ids:
                      - <string>
                      - <string>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  type: archive_order
                  attributes:
                    archive_ids:
                      - a2zcMylnM4OCHpYusxIi1g
                      - a2zcMylnM4OCHpYusxIi2g
                      - a2zcMylnM4OCHpYusxIi3g
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v2/logs/config/archives:
    get:
      tags:
        - Logs Archives
      summary: Get all archives
      description: Get the list of configured logs archives with their definitions.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - type: archives
                    attributes:
                      name: Nginx Archive
                      query: source:nginx
                      destination:
                        storage_account: account-name
                        container: container-name
                        integration:
                          tenant_id: aaaaaaaa-1a1a-1a1a-1a1a-aaaaaaaaaaaa
                          client_id: aaaaaaaa-1a1a-1a1a-1a1a-aaaaaaaaaaaa
                        type: azure
                        path: in nulla
                        region: deserunt aliqua nostrud
                      include_tags: false
                      rehydration_max_scan_size_in_gb: 100
                      rehydration_tags:
                        - team:intake
                        - team:app
                      state: WORKING
                    id: a2zcMylnM4OCHpYusxIi3g
                  - type: archives
                    attributes:
                      name: Nginx Archive
                      query: source:nginx
                      destination:
                        storage_account: account-name
                        container: container-name
                        integration:
                          tenant_id: aaaaaaaa-1a1a-1a1a-1a1a-aaaaaaaaaaaa
                          client_id: aaaaaaaa-1a1a-1a1a-1a1a-aaaaaaaaaaaa
                        type: azure
                        path: mollit in enim
                        region: ut ex
                      include_tags: false
                      rehydration_max_scan_size_in_gb: 100
                      rehydration_tags:
                        - team:intake
                        - team:app
                      state: WORKING
                    id: a2zcMylnM4OCHpYusxIi3g
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    post:
      tags:
        - Logs Archives
      summary: Create an archive
      description: Create an archive in your organization.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                data:
                  type: archives
                  attributes:
                    name: <string>
                    query: <string>
                    destination:
                      storage_account: <string>
                      container: <string>
                      integration:
                        tenant_id: <string>
                        client_id: <string>
                      type: azure
                      path: <string>
                      region: <string>
                    include_tags: false
                    rehydration_max_scan_size_in_gb: <long>
                    rehydration_tags:
                      - <string>
                      - <string>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  type: archives
                  attributes:
                    name: Nginx Archive
                    query: source:nginx
                    destination:
                      storage_account: account-name
                      container: container-name
                      integration:
                        tenant_id: aaaaaaaa-1a1a-1a1a-1a1a-aaaaaaaaaaaa
                        client_id: aaaaaaaa-1a1a-1a1a-1a1a-aaaaaaaaaaaa
                      type: azure
                      path: magna incididunt dolor ex
                      region: minim sunt eu
                    include_tags: false
                    rehydration_max_scan_size_in_gb: 100
                    rehydration_tags:
                      - team:intake
                      - team:app
                    state: WORKING
                  id: a2zcMylnM4OCHpYusxIi3g
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v2/logs/config/archives/{archive_id}:
    delete:
      tags:
        - Logs Archives
      summary: Delete an archive
      description: Delete a given archive from your organization.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: archive_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the archive.
          example: <string>
      responses:
        '204':
          description: No Content
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    get:
      tags:
        - Logs Archives
      summary: Get an archive
      description: Get a specific archive from your organization.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: archive_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the archive.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  type: archives
                  attributes:
                    name: Nginx Archive
                    query: source:nginx
                    destination:
                      storage_account: account-name
                      container: container-name
                      integration:
                        tenant_id: aaaaaaaa-1a1a-1a1a-1a1a-aaaaaaaaaaaa
                        client_id: aaaaaaaa-1a1a-1a1a-1a1a-aaaaaaaaaaaa
                      type: azure
                      path: magna incididunt dolor ex
                      region: minim sunt eu
                    include_tags: false
                    rehydration_max_scan_size_in_gb: 100
                    rehydration_tags:
                      - team:intake
                      - team:app
                    state: WORKING
                  id: a2zcMylnM4OCHpYusxIi3g
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    put:
      tags:
        - Logs Archives
      summary: Update an archive
      description: >-
        Update a given archive configuration.


        **Note**: Using this method updates your archive configuration by
        **replacing**

        your current configuration with the new one sent to your Datadog
        organization.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                data:
                  type: archives
                  attributes:
                    name: <string>
                    query: <string>
                    destination:
                      storage_account: <string>
                      container: <string>
                      integration:
                        tenant_id: <string>
                        client_id: <string>
                      type: azure
                      path: <string>
                      region: <string>
                    include_tags: false
                    rehydration_max_scan_size_in_gb: <long>
                    rehydration_tags:
                      - <string>
                      - <string>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: archive_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the archive.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  type: archives
                  attributes:
                    name: Nginx Archive
                    query: source:nginx
                    destination:
                      storage_account: account-name
                      container: container-name
                      integration:
                        tenant_id: aaaaaaaa-1a1a-1a1a-1a1a-aaaaaaaaaaaa
                        client_id: aaaaaaaa-1a1a-1a1a-1a1a-aaaaaaaaaaaa
                      type: azure
                      path: magna incididunt dolor ex
                      region: minim sunt eu
                    include_tags: false
                    rehydration_max_scan_size_in_gb: 100
                    rehydration_tags:
                      - team:intake
                      - team:app
                    state: WORKING
                  id: a2zcMylnM4OCHpYusxIi3g
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v2/logs/config/archives/{archive_id}/readers:
    delete:
      tags:
        - Logs Archives
      summary: Revoke role from an archive
      description: >-
        Removes a role from an archive. ([Roles
        API](https://docs.datadoghq.com/api/v2/roles/))
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: archive_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the archive.
          example: <string>
      responses:
        '204':
          description: No Content
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    get:
      tags:
        - Logs Archives
      summary: List read roles for an archive
      description: Returns all read roles a given archive is restricted to.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: archive_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the archive.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - type: roles
                    attributes:
                      created_at: '1963-12-19T20:46:55.238Z'
                      modified_at: '1960-05-31T03:56:38.328Z'
                      name: minim do voluptate mollit
                      user_count: 83201105
                    id: velit laboris ipsum deserunt
                    relationships:
                      permissions:
                        data:
                          - id: ullamco enim
                            type: permissions
                          - id: sunt pariatur id Ut dolore
                            type: permissions
                  - type: roles
                    attributes:
                      created_at: '2001-03-11T06:17:01.142Z'
                      modified_at: '1960-10-18T03:12:45.140Z'
                      name: in quis voluptate
                      user_count: 23458115
                    id: dolore magna ea quis culpa
                    relationships:
                      permissions:
                        data:
                          - id: culpa fugiat eu sit
                            type: permissions
                          - id: enim non
                            type: permissions
                meta:
                  page:
                    total_count: 11851638
                    total_filtered_count: 18283781
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    post:
      tags:
        - Logs Archives
      summary: Grant role to an archive
      description: >-
        Adds a read role to an archive. ([Roles
        API](https://docs.datadoghq.com/api/v2/roles/))
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                data:
                  id: <string>
                  type: roles
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: archive_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the archive.
          example: <string>
      responses:
        '204':
          description: No Content
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/logs/config/index-order:
    get:
      tags:
        - Logs Indexes
      summary: Get indexes order
      description: >-
        Get the current order of your log indexes. This endpoint takes no JSON
        arguments.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                index_names:
                  - main
                  - payments
                  - web
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    put:
      tags:
        - Logs Indexes
      summary: Update indexes order
      description: >-
        This endpoint updates the index order of your organization.

        It returns the index order object passed in the request body when the
        request is successful.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                index_names:
                  - main
                  - payments
                  - web
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                index_names:
                  - main
                  - payments
                  - web
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error:
                  code: Ut dolore elit
                  message: veniam Lorem adipisicing sunt Duis
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/logs/config/indexes:
    get:
      tags:
        - Logs Indexes
      summary: Get all indexes
      description: >-
        The Index object describes the configuration of a log index.

        This endpoint returns an array of the `LogIndex` objects of your
        organization.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                indexes:
                  - name: main
                    filter:
                      query: source:python
                    daily_limit: 300000000
                    exclusion_filters:
                      - name: payment
                        filter:
                          sample_rate: 1
                          query: '*'
                        is_enabled: true
                      - name: payment
                        filter:
                          sample_rate: 1
                          query: '*'
                        is_enabled: true
                    is_rate_limited: false
                    num_retention_days: 15
                  - name: main
                    filter:
                      query: source:python
                    daily_limit: 300000000
                    exclusion_filters:
                      - name: payment
                        filter:
                          sample_rate: 1
                          query: '*'
                        is_enabled: false
                      - name: payment
                        filter:
                          sample_rate: 1
                          query: '*'
                        is_enabled: true
                    is_rate_limited: false
                    num_retention_days: 15
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    post:
      tags:
        - Logs Indexes
      summary: Create an index
      description: >-
        Creates a new index. Returns the Index object passed in the request body
        when the request is successful.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                name: main
                filter:
                  query: source:python
                daily_limit: 300000000
                exclusion_filters:
                  - name: payment
                    filter:
                      sample_rate: 1
                      query: '*'
                    is_enabled: true
                  - name: payment
                    filter:
                      sample_rate: 1
                      query: '*'
                    is_enabled: false
                num_retention_days: 15
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                name: main
                filter:
                  query: source:python
                daily_limit: 300000000
                exclusion_filters:
                  - name: payment
                    filter:
                      sample_rate: 1
                      query: '*'
                    is_enabled: true
                  - name: payment
                    filter:
                      sample_rate: 1
                      query: '*'
                    is_enabled: true
                is_rate_limited: false
                num_retention_days: 15
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error:
                  code: Ut dolore elit
                  message: veniam Lorem adipisicing sunt Duis
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/logs/config/indexes/{name}:
    get:
      tags:
        - Logs Indexes
      summary: Get an index
      description: >-
        Get one log index from your organization. This endpoint takes no JSON
        arguments.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: name
          in: path
          schema:
            type: string
          required: true
          description: (Required) Name of the log index.
          example: proident
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                name: main
                filter:
                  query: source:python
                daily_limit: 300000000
                exclusion_filters:
                  - name: payment
                    filter:
                      sample_rate: 1
                      query: '*'
                    is_enabled: true
                  - name: payment
                    filter:
                      sample_rate: 1
                      query: '*'
                    is_enabled: true
                is_rate_limited: false
                num_retention_days: 15
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error:
                  code: Ut dolore elit
                  message: veniam Lorem adipisicing sunt Duis
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    put:
      tags:
        - Logs Indexes
      summary: Update an index
      description: >-
        Update an index as identified by its name.

        Returns the Index object passed in the request body when the request is
        successful.


        Using the `PUT` method updates your index’s configuration by
        **replacing**

        your current configuration with the new one sent to your Datadog
        organization.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                filter:
                  query: source:python
                daily_limit: 300000000
                disable_daily_limit: false
                exclusion_filters:
                  - name: payment
                    filter:
                      sample_rate: 1
                      query: '*'
                    is_enabled: true
                  - name: payment
                    filter:
                      sample_rate: 1
                      query: '*'
                    is_enabled: true
                num_retention_days: 15
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: name
          in: path
          schema:
            type: string
          required: true
          description: (Required) Name of the log index.
          example: proident
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                name: main
                filter:
                  query: source:python
                daily_limit: 300000000
                exclusion_filters:
                  - name: payment
                    filter:
                      sample_rate: 1
                      query: '*'
                    is_enabled: true
                  - name: payment
                    filter:
                      sample_rate: 1
                      query: '*'
                    is_enabled: true
                is_rate_limited: false
                num_retention_days: 15
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error:
                  code: Ut dolore elit
                  message: veniam Lorem adipisicing sunt Duis
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error:
                  code: Ut dolore elit
                  message: veniam Lorem adipisicing sunt Duis
  /api/v2/logs/config/metrics:
    get:
      tags:
        - Logs Metrics
      summary: Get all log-based metrics
      description: Get the list of configured log-based metrics with their definitions.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - attributes:
                      compute:
                        aggregation_type: distribution
                        include_percentiles: true
                        path: '@duration'
                      filter:
                        query: service:web* AND @http.status_code:[200 TO 299]
                      group_by:
                        - path: '@http.status_code'
                          tag_name: status_code
                        - path: '@http.status_code'
                          tag_name: status_code
                    id: logs.page.load.count
                    type: logs_metrics
                  - attributes:
                      compute:
                        aggregation_type: distribution
                        include_percentiles: true
                        path: '@duration'
                      filter:
                        query: service:web* AND @http.status_code:[200 TO 299]
                      group_by:
                        - path: '@http.status_code'
                          tag_name: status_code
                        - path: '@http.status_code'
                          tag_name: status_code
                    id: logs.page.load.count
                    type: logs_metrics
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    post:
      tags:
        - Logs Metrics
      summary: Create a log-based metric
      description: >-
        Create a metric based on your ingested logs in your organization.

        Returns the log-based metric object from the request body when the
        request is successful.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                data:
                  id: <string>
                  type: logs_metrics
                  attributes:
                    compute:
                      aggregation_type: <string>
                      include_percentiles: <boolean>
                      path: <string>
                    filter:
                      query: '*'
                    group_by:
                      - path: <string>
                        tag_name: <string>
                      - path: <string>
                        tag_name: <string>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  attributes:
                    compute:
                      aggregation_type: distribution
                      include_percentiles: true
                      path: '@duration'
                    filter:
                      query: service:web* AND @http.status_code:[200 TO 299]
                    group_by:
                      - path: '@http.status_code'
                        tag_name: status_code
                      - path: '@http.status_code'
                        tag_name: status_code
                  id: logs.page.load.count
                  type: logs_metrics
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '409':
          description: Conflict
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v2/logs/config/metrics/{metric_id}:
    delete:
      tags:
        - Logs Metrics
      summary: Delete a log-based metric
      description: Delete a specific log-based metric from your organization.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: metric_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The name of the log-based metric.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    get:
      tags:
        - Logs Metrics
      summary: Get a log-based metric
      description: Get a specific log-based metric from your organization.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: metric_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The name of the log-based metric.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  attributes:
                    compute:
                      aggregation_type: distribution
                      include_percentiles: true
                      path: '@duration'
                    filter:
                      query: service:web* AND @http.status_code:[200 TO 299]
                    group_by:
                      - path: '@http.status_code'
                        tag_name: status_code
                      - path: '@http.status_code'
                        tag_name: status_code
                  id: logs.page.load.count
                  type: logs_metrics
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    patch:
      tags:
        - Logs Metrics
      summary: Update a log-based metric
      description: >-
        Update a specific log-based metric from your organization.

        Returns the log-based metric object from the request body when the
        request is successful.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                data:
                  type: logs_metrics
                  attributes:
                    compute:
                      include_percentiles: <boolean>
                    filter:
                      query: '*'
                    group_by:
                      - path: <string>
                        tag_name: <string>
                      - path: <string>
                        tag_name: <string>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: metric_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The name of the log-based metric.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  attributes:
                    compute:
                      aggregation_type: distribution
                      include_percentiles: true
                      path: '@duration'
                    filter:
                      query: service:web* AND @http.status_code:[200 TO 299]
                    group_by:
                      - path: '@http.status_code'
                        tag_name: status_code
                      - path: '@http.status_code'
                        tag_name: status_code
                  id: logs.page.load.count
                  type: logs_metrics
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/logs/config/pipeline-order:
    get:
      tags:
        - Logs Pipelines
      summary: Get pipeline order
      description: |-
        Get the current order of your pipelines.
        This endpoint takes no JSON arguments.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                pipeline_ids:
                  - tags
                  - org_ids
                  - products
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    put:
      tags:
        - Logs Pipelines
      summary: Update pipeline order
      description: >-
        Update the order of your pipelines. Since logs are processed
        sequentially, reordering a pipeline may change

        the structure and content of the data processed by other pipelines and
        their processors.


        **Note**: Using the `PUT` method updates your pipeline order by
        replacing your current order

        with the new one sent to your Datadog organization.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                pipeline_ids:
                  - tags
                  - org_ids
                  - products
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                pipeline_ids:
                  - tags
                  - org_ids
                  - products
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error:
                  code: Ut dolore elit
                  message: veniam Lorem adipisicing sunt Duis
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error:
                  code: Ut dolore elit
                  message: veniam Lorem adipisicing sunt Duis
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/logs/config/pipelines:
    get:
      tags:
        - Logs Pipelines
      summary: Get all pipelines
      description: |-
        Get all pipelines from your organization.
        This endpoint takes no JSON arguments.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                - name: ''
                  filter:
                    query: source:python
                  id: proident id
                  is_enabled: false
                  is_read_only: true
                  processors:
                    - source: message
                      grok:
                        match_rules: |
                          rule_name_1 foo
                          rule_name_2 bar
                        support_rules: |
                          rule_name_1 foo
                          rule_name_2 bar
                      type: grok-parser
                      is_enabled: false
                      name: et ex
                      samples:
                        - et
                        - aliqua laboris
                    - source: message
                      grok:
                        match_rules: |
                          rule_name_1 foo
                          rule_name_2 bar
                        support_rules: |
                          rule_name_1 foo
                          rule_name_2 bar
                      type: grok-parser
                      is_enabled: false
                      name: in aliquip
                      samples:
                        - amet ex adipisicing
                        - non id do cupidatat magna
                  type: pipeline
                - name: ''
                  filter:
                    query: source:python
                  id: anim amet magna
                  is_enabled: false
                  is_read_only: false
                  processors:
                    - source: message
                      grok:
                        match_rules: |
                          rule_name_1 foo
                          rule_name_2 bar
                        support_rules: |
                          rule_name_1 foo
                          rule_name_2 bar
                      type: grok-parser
                      is_enabled: false
                      name: quis mollit voluptate
                      samples:
                        - in
                        - aliqua irure
                    - source: message
                      grok:
                        match_rules: |
                          rule_name_1 foo
                          rule_name_2 bar
                        support_rules: |
                          rule_name_1 foo
                          rule_name_2 bar
                      type: grok-parser
                      is_enabled: false
                      name: aliquip consequat culpa dolor
                      samples:
                        - tempor eiusmod veniam ut aliquip
                        - est consequat
                  type: pipeline
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    post:
      tags:
        - Logs Pipelines
      summary: Create a pipeline
      description: Create a pipeline in your organization.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                name: ''
                filter:
                  query: source:python
                is_enabled: true
                processors:
                  - source: message
                    grok:
                      match_rules: |
                        rule_name_1 foo
                        rule_name_2 bar
                      support_rules: |
                        rule_name_1 foo
                        rule_name_2 bar
                    type: grok-parser
                    is_enabled: false
                    name: laboris aliqua m
                    samples:
                      - sed quis nostrud sit
                      - voluptate amet
                  - source: message
                    grok:
                      match_rules: |
                        rule_name_1 foo
                        rule_name_2 bar
                      support_rules: |
                        rule_name_1 foo
                        rule_name_2 bar
                    type: grok-parser
                    is_enabled: false
                    name: aliqua reprehenderit eu
                    samples:
                      - culpa Ut
                      - magna ut nostrud adipisicing
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                name: ''
                filter:
                  query: source:python
                id: cillum tempor ea elit
                is_enabled: false
                is_read_only: true
                processors:
                  - source: message
                    grok:
                      match_rules: |
                        rule_name_1 foo
                        rule_name_2 bar
                      support_rules: |
                        rule_name_1 foo
                        rule_name_2 bar
                    type: grok-parser
                    is_enabled: false
                    name: in
                    samples:
                      - ipsum amet
                      - aliqua irure laborum deserunt elit
                  - source: message
                    grok:
                      match_rules: |
                        rule_name_1 foo
                        rule_name_2 bar
                      support_rules: |
                        rule_name_1 foo
                        rule_name_2 bar
                    type: grok-parser
                    is_enabled: false
                    name: eiusmod voluptate exercitation
                    samples:
                      - culpa aliqua
                      - deserunt esse anim iru
                type: pipeline
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error:
                  code: Ut dolore elit
                  message: veniam Lorem adipisicing sunt Duis
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/logs/config/pipelines/{pipeline_id}:
    delete:
      tags:
        - Logs Pipelines
      summary: Delete a pipeline
      description: |-
        Delete a given pipeline from your organization.
        This endpoint takes no JSON arguments.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: pipeline_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) ID of the pipeline to delete.
          example: proident
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error:
                  code: Ut dolore elit
                  message: veniam Lorem adipisicing sunt Duis
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    get:
      tags:
        - Logs Pipelines
      summary: Get a pipeline
      description: |-
        Get a specific pipeline from your organization.
        This endpoint takes no JSON arguments.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: pipeline_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) ID of the pipeline to get.
          example: proident
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                name: ''
                filter:
                  query: source:python
                id: cillum tempor ea elit
                is_enabled: false
                is_read_only: true
                processors:
                  - source: message
                    grok:
                      match_rules: |
                        rule_name_1 foo
                        rule_name_2 bar
                      support_rules: |
                        rule_name_1 foo
                        rule_name_2 bar
                    type: grok-parser
                    is_enabled: false
                    name: in
                    samples:
                      - ipsum amet
                      - aliqua irure laborum deserunt elit
                  - source: message
                    grok:
                      match_rules: |
                        rule_name_1 foo
                        rule_name_2 bar
                      support_rules: |
                        rule_name_1 foo
                        rule_name_2 bar
                    type: grok-parser
                    is_enabled: false
                    name: eiusmod voluptate exercitation
                    samples:
                      - culpa aliqua
                      - deserunt esse anim iru
                type: pipeline
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error:
                  code: Ut dolore elit
                  message: veniam Lorem adipisicing sunt Duis
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    put:
      tags:
        - Logs Pipelines
      summary: Update a pipeline
      description: >-
        Update a given pipeline configuration to change it’s processors or their
        order.


        **Note**: Using this method updates your pipeline configuration by
        **replacing**

        your current configuration with the new one sent to your Datadog
        organization.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                name: ''
                filter:
                  query: source:python
                is_enabled: true
                processors:
                  - source: message
                    grok:
                      match_rules: |
                        rule_name_1 foo
                        rule_name_2 bar
                      support_rules: |
                        rule_name_1 foo
                        rule_name_2 bar
                    type: grok-parser
                    is_enabled: false
                    name: laboris aliqua m
                    samples:
                      - sed quis nostrud sit
                      - voluptate amet
                  - source: message
                    grok:
                      match_rules: |
                        rule_name_1 foo
                        rule_name_2 bar
                      support_rules: |
                        rule_name_1 foo
                        rule_name_2 bar
                    type: grok-parser
                    is_enabled: false
                    name: aliqua reprehenderit eu
                    samples:
                      - culpa Ut
                      - magna ut nostrud adipisicing
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: pipeline_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) ID of the pipeline to delete.
          example: proident
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                name: ''
                filter:
                  query: source:python
                id: cillum tempor ea elit
                is_enabled: false
                is_read_only: true
                processors:
                  - source: message
                    grok:
                      match_rules: |
                        rule_name_1 foo
                        rule_name_2 bar
                      support_rules: |
                        rule_name_1 foo
                        rule_name_2 bar
                    type: grok-parser
                    is_enabled: false
                    name: in
                    samples:
                      - ipsum amet
                      - aliqua irure laborum deserunt elit
                  - source: message
                    grok:
                      match_rules: |
                        rule_name_1 foo
                        rule_name_2 bar
                      support_rules: |
                        rule_name_1 foo
                        rule_name_2 bar
                    type: grok-parser
                    is_enabled: false
                    name: eiusmod voluptate exercitation
                    samples:
                      - culpa aliqua
                      - deserunt esse anim iru
                type: pipeline
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error:
                  code: Ut dolore elit
                  message: veniam Lorem adipisicing sunt Duis
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/distribution_points:
    post:
      tags:
        - Metrics
      summary: Submit distribution points
      description: >-
        The distribution points end-point allows you to post distribution data
        that can be graphed on Datadog’s dashboards.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"[object Object]"'
      parameters:
        - name: Content-Encoding
          in: header
          schema:
            type: string
          description: HTTP header used to compress the media-type.
          example: deflate
        - name: Content-Type
          in: header
          schema:
            type: string
          example: text/json
        - name: Accept
          in: header
          schema:
            type: string
          example: text/json
      responses:
        '202':
          description: Accepted
          headers:
            Content-Type:
              schema:
                type: string
                example: text/json
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: text/json
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: text/json
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '408':
          description: Request Timeout
          headers:
            Content-Type:
              schema:
                type: string
                example: text/json
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '413':
          description: Request Entity Too Large
          headers:
            Content-Type:
              schema:
                type: string
                example: text/json
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/metrics:
    get:
      tags:
        - Metrics
      summary: Get active metrics list
      description: Get the list of actively reporting metrics from a given time until now.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: from
          in: query
          schema:
            type: number
          description: (Required) Seconds since the Unix epoch.
          example: '-70569764'
        - name: host
          in: query
          schema:
            type: string
          description: >-
            Hostname for filtering the list of metrics returned.

            If set, metrics retrieved are those with the corresponding hostname
            tag.
          example: proident
        - name: tag_filter
          in: query
          schema:
            type: string
          description: >-
            Filter metrics that have been submitted with the given tags.
            Supports boolean and wildcard expressions.

            Cannot be combined with other filters.
          example: env IN (staging,test) AND service:web
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                from: qui Lorem elit dolore
                metrics:
                  - id Excepteur non
                  - amet officia
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/metrics/{metric_name}:
    get:
      tags:
        - Metrics
      summary: Get metric metadata
      description: Get metadata about a specific metric.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: metric_name
          in: path
          schema:
            type: string
          required: true
          description: (Required) Name of the metric for which to get metadata.
          example: proident
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                description: mollit Ut
                integration: culpa eiusmod
                per_unit: second
                short_name: voluptate ad
                statsd_interval: 85906177
                type: count
                unit: byte
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    put:
      tags:
        - Metrics
      summary: Edit metric metadata
      description: >-
        Edit metadata of a specific metric. Find out more about [supported
        types](https://docs.datadoghq.com/developers/metrics).
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                description: qui consectetur dolor
                per_unit: second
                short_name: sunt
                statsd_interval: -75461413
                type: count
                unit: byte
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: metric_name
          in: path
          schema:
            type: string
          required: true
          description: (Required) Name of the metric for which to edit metadata.
          example: proident
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                description: mollit Ut
                integration: culpa eiusmod
                per_unit: second
                short_name: voluptate ad
                statsd_interval: 85906177
                type: count
                unit: byte
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/query:
    get:
      tags:
        - Metrics
      summary: Query timeseries points
      description: Query timeseries points.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: from
          in: query
          schema:
            type: number
          description: >-
            (Required) Start of the queried time period, seconds since the Unix
            epoch.
          example: '-70569764'
        - name: to
          in: query
          schema:
            type: number
          description: >-
            (Required) End of the queried time period, seconds since the Unix
            epoch.
          example: '-70569764'
        - name: query
          in: query
          schema:
            type: string
          description: (Required) Query string.
          example: proident
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error: ex in exercitation amet est
                from_date: -12011311
                group_by:
                  - id cillum sit Lorem in
                  - Ut sed
                message: consequat
                query: cillum do deserunt
                res_type: time_series
                series:
                  - aggr: avg
                    display_name: system.cpu.idle
                    end: 28052444
                    expression: system.cpu.idle{host:foo,env:test}
                    interval: 21308355
                    length: -55775019
                    metric: system.cpu.idle
                    pointlist:
                      - - 1575317847
                        - 0.5
                    query_index: -92870034
                    scope: host:foo,env:test
                    start: -13283261
                    tag_set:
                      - dolor ut
                      - ea nisi officia adipisicing
                    unit:
                      - family: time
                        name: minute
                        plural: minutes
                        scale_factor: 60
                        short_name: min
                      - family: time
                        name: minute
                        plural: minutes
                        scale_factor: 60
                        short_name: min
                  - aggr: avg
                    display_name: system.cpu.idle
                    end: 27877700
                    expression: system.cpu.idle{host:foo,env:test}
                    interval: 33597018
                    length: -6367576
                    metric: system.cpu.idle
                    pointlist:
                      - - 1575317847
                        - 0.5
                    query_index: 94468024
                    scope: host:foo,env:test
                    start: 74850619
                    tag_set:
                      - sit quis dolo
                      - reprehenderit aute qui
                    unit:
                      - family: time
                        name: minute
                        plural: minutes
                        scale_factor: 60
                        short_name: min
                      - family: time
                        name: minute
                        plural: minutes
                        scale_factor: 60
                        short_name: min
                status: ok
                to_date: 40780839
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/search:
    get:
      tags:
        - Metrics
      summary: Search metrics
      description: Search for metrics from the last 24 hours in Datadog.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: q
          in: query
          schema:
            type: string
          description: >-
            (Required) Query string to search metrics upon. Can optionally be
            prefixed with `metrics:`.
          example: proident
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                results:
                  metrics:
                    - non Lorem anim Excepteur minim
                    - proident qui pariatur
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v2/metrics/{metric_name}/tags:
    post:
      tags:
        - Metrics
      summary: Create a tag configuration
      description: >-
        Create and define a list of queryable tag keys for an existing
        count/gauge/rate/distribution metric.

        Optionally, include percentile aggregations on any distribution metric
        or configure custom aggregations

        on any count, rate, or gauge metric.

        Can only be used with application keys of users with the `Manage Tags
        for Metrics` permission.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                data:
                  id: <string>
                  type: manage_tags
                  attributes:
                    tags: []
                    metric_type: gauge
                    aggregations:
                      - time: <string>
                        space: <string>
                      - time: <string>
                        space: <string>
                    include_percentiles: <boolean>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: metric_name
          in: path
          schema:
            type: string
          required: true
          description: (Required) The name of the metric.
          example: <string>
      responses:
        '201':
          description: Created
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  attributes:
                    aggregations:
                      - space: avg
                        time: avg
                    created_at: '2020-03-25T09:48:37.463835Z'
                    metric_type: gauge
                    modified_at: '2020-04-25T09:48:37.463835Z'
                    tags:
                      - app
                      - datacenter
                  type: manage_tags
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '409':
          description: Conflict
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    get:
      tags:
        - Metrics
      summary: List tag configuration by name
      description: Returns the tag configuration for the given metric name.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: metric_name
          in: path
          schema:
            type: string
          required: true
          description: (Required) The name of the metric.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  attributes:
                    aggregations:
                      - space: avg
                        time: avg
                    created_at: '2020-03-25T09:48:37.463835Z'
                    metric_type: gauge
                    modified_at: '2020-04-25T09:48:37.463835Z'
                    tags:
                      - app
                      - datacenter
                  type: manage_tags
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    patch:
      tags:
        - Metrics
      summary: Update a tag configuration
      description: >-
        Update the tag configuration of a metric or percentile aggregations of a
        distribution metric or custom aggregations

        of a count, rate, or gauge metric.

        Can only be used with application keys from users with the `Manage Tags
        for Metrics` permission.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                data:
                  id: <string>
                  type: manage_tags
                  attributes:
                    aggregations:
                      - time: <string>
                        space: <string>
                      - time: <string>
                        space: <string>
                    include_percentiles: <boolean>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: metric_name
          in: path
          schema:
            type: string
          required: true
          description: (Required) The name of the metric.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  attributes:
                    aggregations:
                      - space: avg
                        time: avg
                    created_at: '2020-03-25T09:48:37.463835Z'
                    metric_type: gauge
                    modified_at: '2020-04-25T09:48:37.463835Z'
                    tags:
                      - app
                      - datacenter
                  type: manage_tags
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    delete:
      tags:
        - Metrics
      summary: Delete a tag configuration
      description: |-
        Deletes a metric's tag configuration. Can only be used with application
        keys from users with the `Manage Tags for Metrics` permission.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: metric_name
          in: path
          schema:
            type: string
          required: true
          description: (Required) The name of the metric.
          example: <string>
      responses:
        '204':
          description: No Content
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v2/series:
    post:
      tags:
        - Metrics
      summary: Submit metrics
      description: >-
        The metrics end-point allows you to post time-series data that can be
        graphed on Datadog’s dashboards.

        The maximum payload size is 500 kilobytes (512000 bytes). Compressed
        payloads must have a decompressed size of less than 5 megabytes (5242880
        bytes).


        If you’re submitting metrics directly to the Datadog API without using
        DogStatsD, expect:


        - 64 bits for the timestamp

        - 64 bits for the value

        - 20 bytes for the metric names

        - 50 bytes for the timeseries

        - The full payload is approximately 100 bytes.


        Host name is one of the resources in the Resources field.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                series:
                  - metric: <string>
                    points:
                      - timestamp: <long>
                        value: <double>
                      - timestamp: <long>
                        value: <double>
                    interval: <long>
                    metadata:
                      origin:
                        metric_type: 0
                        product: 0
                        service: 0
                    resources:
                      - name: <string>
                        type: <string>
                      - name: <string>
                        type: <string>
                    source_type_name: <string>
                    tags:
                      - <string>
                      - <string>
                    type: <integer>
                    unit: <string>
                  - metric: <string>
                    points:
                      - timestamp: <long>
                        value: <double>
                      - timestamp: <long>
                        value: <double>
                    interval: <long>
                    metadata:
                      origin:
                        metric_type: 0
                        product: 0
                        service: 0
                    resources:
                      - name: <string>
                        type: <string>
                      - name: <string>
                        type: <string>
                    source_type_name: <string>
                    tags:
                      - <string>
                      - <string>
                    type: <integer>
                    unit: <string>
      parameters:
        - name: Content-Encoding
          in: header
          schema:
            type: string
          description: HTTP header used to compress the media-type.
          example: identity
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '202':
          description: Accepted
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - nisi tempor
                  - ea minim dolore amet
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '408':
          description: Request Timeout
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '413':
          description: Request Entity Too Large
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v2/metrics:
    get:
      tags:
        - Metrics
      summary: Get a list of metrics
      description: >-
        Returns all metrics that can be configured in the Metrics Summary page
        or with Metrics without Limits™ (matching additional filters if
        specified).
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: filter[configured]
          in: query
          schema:
            type: string
          description: Filter custom metrics that have configured tags.
          example: <boolean>
        - name: filter[tags_configured]
          in: query
          schema:
            type: string
          description: Filter tag configurations by configured tags.
          example: <string>
        - name: filter[metric_type]
          in: query
          schema:
            type: string
          description: Filter metrics by metric type.
          example: gauge
        - name: filter[include_percentiles]
          in: query
          schema:
            type: string
          description: |-
            Filter distributions with additional percentile
            aggregations enabled or disabled.
          example: <boolean>
        - name: filter[queried]
          in: query
          schema:
            type: string
          description: >-
            Filter custom metrics that have or have not been queried in the
            specified window[seconds].

            If no window is provided or the window is less than 2 hours, a
            default of 2 hours will be applied.
          example: <boolean>
        - name: filter[tags]
          in: query
          schema:
            type: string
          description: >-
            Filter metrics that have been submitted with the given tags.
            Supports boolean and wildcard expressions.

            Can only be combined with the filter[queried] filter.
          example: <string>
        - name: window[seconds]
          in: query
          schema:
            type: string
          description: >-
            The number of seconds of look back (from now) to apply to a
            filter[tag] or filter[queried] query.

            Defaults value is 3600 (1 hour), maximum value is 1,209,600 (2
            weeks).
          example: <long>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - type: metrics
                  - type: metrics
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v2/metrics/{metric_name}/all-tags:
    get:
      tags:
        - Metrics
      summary: List tags by metric name
      description: View indexed tag key-value pairs for a given metric name.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: metric_name
          in: path
          schema:
            type: string
          required: true
          description: (Required) The name of the metric.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  attributes:
                    tags:
                      - sport:golf
                      - sport:football
                      - animal:dog
                  id: test.metric.latency
                  type: metrics
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v2/metrics/{metric_name}/active-configurations:
    get:
      tags:
        - Metrics
      summary: List active tags and aggregations
      description: >-
        List tags and aggregations that are actively queried on dashboards and
        monitors for a given metric name.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: window[seconds]
          in: query
          schema:
            type: string
          description: >-
            The number of seconds of look back (from now).

            Default value is 604,800 (1 week), minimum value is 7200 (2 hours),
            maximum value is 2,630,000 (1 month).
          example: <long>
        - name: metric_name
          in: path
          schema:
            type: string
          required: true
          description: (Required) The name of the metric.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  attributes:
                    active_aggregations:
                      - space: sum
                        time: sum
                      - space: sum
                        time: count
                    active_tags:
                      - app
                      - datacenter
                  id: test.metric.latency
                  type: actively_queried_configurations
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v2/metrics/{metric_name}/volumes:
    get:
      tags:
        - Metrics
      summary: List distinct metric volumes by metric name
      description: >-
        View distinct metrics volumes for the given metric name.


        Custom metrics generated in-app from other products will return `null`
        for ingested volumes.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: metric_name
          in: path
          schema:
            type: string
          required: true
          description: (Required) The name of the metric.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  attributes:
                    distinct_volume: 10
                  id: test.metric.latency
                  type: distinct_metric_volumes
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v2/metrics/config/bulk-tags:
    post:
      tags:
        - Metrics
      summary: Configure tags for multiple metrics
      description: >-
        Create and define a list of queryable tag keys for a set of existing
        count, gauge, rate, and distribution metrics.

        Metrics are selected by passing a metric name prefix. Use the Delete
        method of this API path to remove tag configurations.

        Results can be sent to a set of account email addresses, just like the
        same operation in the Datadog web app.

        If multiple calls include the same metric, the last configuration
        applied (not by submit order) is used, do not

        expect deterministic ordering of concurrent calls.

        Can only be used with application keys of users with the `Manage Tags
        for Metrics` permission.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                data:
                  id: <string>
                  type: metric_bulk_configure_tags
                  attributes:
                    emails:
                      - <email>
                      - <email>
                    tags:
                      - <string>
                      - <string>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '202':
          description: Accepted
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  id: kafka.lag
                  type: metric_bulk_configure_tags
                  attributes:
                    emails:
                      - sue@example.com
                      - bob@example.com
                    status: Accepted
                    tags:
                      - host
                      - pod_name
                      - is_shadow
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v2/metrics/{metric_name}/estimate:
    get:
      tags:
        - Metrics
      summary: Tag Configuration Cardinality Estimator
      description: >-
        Returns the estimated cardinality for a metric with a given tag,
        percentile and number of aggregations configuration using Metrics
        without Limits&trade;.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: filter[groups]
          in: query
          schema:
            type: string
          description: Filtered tag keys that the metric is configured to query with.
          example: <string>
        - name: filter[hours_ago]
          in: query
          schema:
            type: string
          description: >-
            The number of hours of look back (from now) to estimate cardinality
            with.
          example: <integer>
        - name: filter[num_aggregations]
          in: query
          schema:
            type: string
          description: >-
            The number of aggregations that a `count`, `rate`, or `gauge` metric
            is configured to use. Max number of aggregation combos is 9.
          example: <integer>
        - name: filter[pct]
          in: query
          schema:
            type: string
          description: >-
            A boolean, for distribution metrics only, to estimate cardinality if
            the metric includes additional percentile aggregators.
          example: <boolean>
        - name: filter[timespan_h]
          in: query
          schema:
            type: string
          description: A window, in hours, from the look back to estimate cardinality with.
          example: <integer>
        - name: metric_name
          in: path
          schema:
            type: string
          required: true
          description: (Required) The name of the metric.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  attributes:
                    estimate_type: distribution
                    estimated_at: '2022-04-27T09:48:37.463835Z'
                    estimated_output_series: 50
                  id: test.metric.latency
                  type: metric_cardinality_estimate
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/monitor:
    get:
      tags:
        - Monitors
      summary: Get all monitor details
      description: Get details about the specified monitor from your organization.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: group_states
          in: query
          schema:
            type: string
          description: |-
            When specified, shows additional information about the group states.
            Choose one or more from `all`, `alert`, `warn`, and `no data`.
          example: alert
        - name: name
          in: query
          schema:
            type: string
          description: A string to filter monitors by name.
          example: proident
        - name: tags
          in: query
          schema:
            type: string
          description: >-
            A comma separated list indicating what tags, if any, should be used
            to filter the list of monitors by scope.

            For example, `host:host0`.
          example: host:host0
        - name: monitor_tags
          in: query
          schema:
            type: string
          description: >-
            A comma separated list indicating what service and/or custom tags,
            if any, should be used to filter the list of monitors.

            Tags created in the Datadog UI automatically have the service key
            prepended. For example, `service:my-app`.
          example: service:my-app
        - name: with_downtimes
          in: query
          schema:
            type: boolean
          description: >-
            If this argument is set to true, then the returned data includes all
            current active downtimes for each monitor.
          example: 'true'
        - name: id_offset
          in: query
          schema:
            type: number
          description: >-
            Use this parameter for paginating through large sets of monitors.
            Start with a value of zero, make a request, set the value to the
            last ID of result set, and then repeat until the response is empty.
          example: '-70569764'
        - name: page
          in: query
          schema:
            type: integer
          description: >-
            The page to start paginating from. If this argument is not
            specified, the request returns all monitors without pagination.
          example: '0'
        - name: page_size
          in: query
          schema:
            type: integer
          description: >-
            The number of monitors to return per page. If the page argument is
            not specified, the default behavior returns all monitors without a
            `page_size` limit. However, if page is specified and `page_size` is
            not, the argument defaults to 100.
          example: '20'
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                - type: query alert
                  query: avg(last_5m):sum:system.net.bytes_rcvd{host:host0} > 100
                  created: '1981-03-28T22:51:41.632Z'
                  creator:
                    email: dolor occaecat reprehenderit amet
                    handle: id in
                    name: est ut officia
                  deleted: '1975-10-14T19:40:52.246Z'
                  id: -54067151
                  message: culpa proident consequat commodo
                  modified: '1996-08-27T09:53:49.245Z'
                  multi: false
                  name: My monitor
                  options:
                    aggregation:
                      group_by: host
                      metric: metrics.name
                      type: count
                    device_ids:
                      - chrome.mobile_small
                      - firefox.mobile_small
                    enable_logs_sample: false
                    escalation_message: none
                    evaluation_delay: -28829092
                    group_retention_duration: laboris in tempor laborum
                    groupby_simple_monitor: true
                    include_tags: true
                    locked: true
                    min_failure_duration: 0
                    min_location_failed: 1
                    new_group_delay: 1255190
                    new_host_delay: 300
                    no_data_timeframe: -41497290
                    notify_audit: false
                    notify_by:
                      - amet fugiat ut non minim
                      - sunt laborum ea Ut dolore
                    notify_no_data: false
                    on_missing_data: show_no_data
                    renotify_interval: null
                    renotify_occurrences: -538791
                    renotify_statuses:
                      - alert
                      - alert
                    require_full_window: true
                    scheduling_options:
                      evaluation_window:
                        day_starts: '04:00'
                        hour_starts: 0
                        month_starts: 1
                    silenced:
                      in_2e9: 68906043
                    synthetics_check_id: labore
                    threshold_windows:
                      recovery_window: sit reprehenderit
                      trigger_window: enim non
                    thresholds:
                      critical: -95298922.35422324
                      critical_recovery: 54389726.79422119
                      ok: 60202614.29497516
                      unknown: 25187702.40465495
                      warning: -9581001.985892043
                      warning_recovery: -44754614.863010466
                    timeout_h: null
                    variables:
                      - data_source: rum
                        compute:
                          aggregation: avg
                          interval: 60000
                          metric: '@duration'
                        name: query_errors
                        group_by:
                          - facet: status
                            limit: 10
                            sort:
                              aggregation: avg
                              metric: in
                              order: desc
                          - facet: status
                            limit: 10
                            sort:
                              aggregation: avg
                              metric: in fugiat
                              order: desc
                        indexes:
                          - days-3
                          - days-7
                        search:
                          query: service:query
                      - data_source: rum
                        compute:
                          aggregation: avg
                          interval: 60000
                          metric: '@duration'
                        name: query_errors
                        group_by:
                          - facet: status
                            limit: 10
                            sort:
                              aggregation: avg
                              metric: do
                              order: desc
                          - facet: status
                            limit: 10
                            sort:
                              aggregation: avg
                              metric: culpa ut ut
                              order: desc
                        indexes:
                          - days-3
                          - days-7
                        search:
                          query: service:query
                  overall_state: Warn
                  priority: 1
                  restricted_roles:
                    - officia in adipisicing est
                    - in nisi aute
                  state:
                    groups:
                      nonf5:
                        last_nodata_ts: 36671468
                        last_notified_ts: -92521458
                        last_resolved_ts: -30756431
                        last_triggered_ts: 14456231
                        name: mollit dolore Duis irure sunt
                        status: Unknown
                      sint_1f7:
                        last_nodata_ts: 92169516
                        last_notified_ts: -30312877
                        last_resolved_ts: 30624564
                        last_triggered_ts: 34623767
                        name: esse Ut amet
                        status: Warn
                  tags:
                    - con
                    - culpa Duis exercitation commodo ex
                - type: query alert
                  query: avg(last_5m):sum:system.net.bytes_rcvd{host:host0} > 100
                  created: '1944-03-24T09:44:29.145Z'
                  creator:
                    email: occaecat aliqua anim
                    handle: sint laborum adi
                    name: incididunt sit irure
                  deleted: '1988-07-27T13:14:52.330Z'
                  id: -19910025
                  message: 'sunt '
                  modified: '2002-10-16T12:13:09.841Z'
                  multi: true
                  name: My monitor
                  options:
                    aggregation:
                      group_by: host
                      metric: metrics.name
                      type: count
                    device_ids:
                      - firefox.tablet
                      - tablet
                    enable_logs_sample: true
                    escalation_message: none
                    evaluation_delay: 38530660
                    group_retention_duration: consequat consectetur in esse
                    groupby_simple_monitor: true
                    include_tags: true
                    locked: false
                    min_failure_duration: 0
                    min_location_failed: 1
                    new_group_delay: 84485026
                    new_host_delay: 300
                    no_data_timeframe: 8504557
                    notify_audit: false
                    notify_by:
                      - qui eiusmod incididunt aute
                      - sed minim in
                    notify_no_data: false
                    on_missing_data: show_no_data
                    renotify_interval: null
                    renotify_occurrences: -6640716
                    renotify_statuses:
                      - warn
                      - warn
                    require_full_window: false
                    scheduling_options:
                      evaluation_window:
                        day_starts: '04:00'
                        hour_starts: 0
                        month_starts: 1
                    silenced:
                      dolora2b: -89563800
                      ea_69: 50589994
                      dolored4b: -91315442
                      ipsum_8: -45470315
                    synthetics_check_id: nostrud
                    threshold_windows:
                      recovery_window: labore in laborum Ut minim
                      trigger_window: velit officia magna mollit sed
                    thresholds:
                      critical: 36362196.224033594
                      critical_recovery: 88754425.18484625
                      ok: -60144457.18534853
                      unknown: 68887578.4775303
                      warning: -41512930.727600224
                      warning_recovery: 91963072.35659912
                    timeout_h: null
                    variables:
                      - data_source: rum
                        compute:
                          aggregation: avg
                          interval: 60000
                          metric: '@duration'
                        name: query_errors
                        group_by:
                          - facet: status
                            limit: 10
                            sort:
                              aggregation: avg
                              metric: 'Ut '
                              order: desc
                          - facet: status
                            limit: 10
                            sort:
                              aggregation: avg
                              metric: et qui sit amet
                              order: desc
                        indexes:
                          - days-3
                          - days-7
                        search:
                          query: service:query
                      - data_source: rum
                        compute:
                          aggregation: avg
                          interval: 60000
                          metric: '@duration'
                        name: query_errors
                        group_by:
                          - facet: status
                            limit: 10
                            sort:
                              aggregation: avg
                              metric: aliqua aliquip sint et ullamco
                              order: desc
                          - facet: status
                            limit: 10
                            sort:
                              aggregation: avg
                              metric: ''
                              order: desc
                        indexes:
                          - days-3
                          - days-7
                        search:
                          query: service:query
                  overall_state: Skipped
                  priority: 1
                  restricted_roles:
                    - eu cillum reprehenderit sed
                    - laborum sunt ut
                  state:
                    groups:
                      dolore0:
                        last_nodata_ts: -60165012
                        last_notified_ts: -4814332
                        last_resolved_ts: -13917177
                        last_triggered_ts: -21095967
                        name: do consectetur
                        status: Unknown
                  tags:
                    - nisi sunt Duis tempor Ut
                    - se
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    post:
      tags:
        - Monitors
      summary: Create a monitor
      description: >-
        Create a monitor using the specified options.


        #### Monitor Types


        The type of monitor chosen from:


        - anomaly: `query alert`

        - APM: `query alert` or `trace-analytics alert`

        - composite: `composite`

        - custom: `service check`

        - event: `event alert`

        - forecast: `query alert`

        - host: `service check`

        - integration: `query alert` or `service check`

        - live process: `process alert`

        - logs: `log alert`

        - metric: `query alert`

        - network: `service check`

        - outlier: `query alert`

        - process: `service check`

        - rum: `rum alert`

        - SLO: `slo alert`

        - watchdog: `event alert`

        - event-v2: `event-v2 alert`

        - audit: `audit alert`

        - error-tracking: `error-tracking alert`


        #### Query Types


        **Metric Alert Query**


        Example: `time_aggr(time_window):space_aggr:metric{tags} [by {key}]
        operator #`


        - `time_aggr`: avg, sum, max, min, change, or pct_change

        - `time_window`: `last_#m` (with `#` between 1 and 10080 depending on
        the monitor type) or `last_#h`(with `#` between 1 and 168 depending on
        the monitor type) or `last_1d`, or `last_1w`

        - `space_aggr`: avg, sum, min, or max

        - `tags`: one or more tags (comma-separated), or *

        - `key`: a 'key' in key:value tag syntax; defines a separate alert for
        each tag in the group (multi-alert)

        - `operator`: <, <=, >, >=, ==, or !=

        - `#`: an integer or decimal number used to set the threshold


        If you are using the `_change_` or `_pct_change_` time aggregator,
        instead use `change_aggr(time_aggr(time_window),

        timeshift):space_aggr:metric{tags} [by {key}] operator #` with:


        - `change_aggr` change, pct_change

        - `time_aggr` avg, sum, max, min [Learn
        more](https://docs.datadoghq.com/monitors/create/types/#define-the-conditions)

        - `time_window` last\_#m (between 1 and 2880 depending on the monitor
        type), last\_#h (between 1 and 48 depending on the monitor type), or
        last_#d (1 or 2)

        - `timeshift` #m_ago (5, 10, 15, or 30), #h_ago (1, 2, or 4), or 1d_ago


        Use this to create an outlier monitor using the following query:

        `avg(last_30m):outliers(avg:system.cpu.user{role:es-events-data} by
        {host}, 'dbscan', 7) > 0`


        **Service Check Query**


        Example: `"check".over(tags).last(count).by(group).count_by_status()`


        - `check` name of the check, for example `datadog.agent.up`

        - `tags` one or more quoted tags (comma-separated), or "*". for example:
        `.over("env:prod", "role:db")`; `over` cannot be blank.

        - `count` must be at greater than or equal to your max threshold
        (defined in the `options`). It is limited to 100.

        For example, if you've specified to notify on 1 critical, 3 ok, and 2
        warn statuses, `count` should be at least 3.

        - `group` must be specified for check monitors. Per-check grouping is
        already explicitly known for some service checks.

        For example, Postgres integration monitors are tagged by `db`, `host`,
        and `port`, and Network monitors by `host`, `instance`, and `url`. See
        [Service Checks](https://docs.datadoghq.com/api/latest/service-checks/)
        documentation for more information.


        **Event Alert Query**


        Example: `events('sources:nagios status:error,warning priority:normal
        tags: "string query"').rollup("count").last("1h")"`


        - `event`, the event query string:

        - `string_query` free text query to match against event title and text.

        - `sources` event sources (comma-separated).

        - `status` event statuses (comma-separated). Valid options: error, warn,
        and info.

        - `priority` event priorities (comma-separated). Valid options: low,
        normal, all.

        - `host` event reporting host (comma-separated).

        - `tags` event tags (comma-separated).

        - `excluded_tags` excluded event tags (comma-separated).

        - `rollup` the stats roll-up method. `count` is the only supported
        method now.

        - `last` the timeframe to roll up the counts. Examples: 45m, 4h.
        Supported timeframes: m, h and d. This value should not exceed 48 hours.


        **NOTE** The Event Alert Query is being deprecated and replaced by the
        Event V2 Alert Query. For more information, see the [Event Migration
        guide](https://docs.datadoghq.com/events/guides/migrating_to_new_events_features/).


        **Event V2 Alert Query**


        Example: `events(query).rollup(rollup_method[,
        measure]).last(time_window) operator #`


        - `query` The search query - following the [Log search
        syntax](https://docs.datadoghq.com/logs/search_syntax/).

        - `rollup_method` The stats roll-up method - supports `count`, `avg` and
        `cardinality`.

        - `measure` For `avg` and cardinality `rollup_method` - specify the
        measure or the facet name you want to use.

        - `time_window` #m (between 1 and 2880), #h (between 1 and 48).

        - `operator` `<`, `<=`, `>`, `>=`, `==`, or `!=`.

        - `#` an integer or decimal number used to set the threshold.


        **Process Alert Query**


        Example: `processes(search).over(tags).rollup('count').last(timeframe)
        operator #`


        - `search` free text search string for querying processes.

        Matching processes match results on the [Live
        Processes](https://docs.datadoghq.com/infrastructure/process/?tab=linuxwindows)
        page.

        - `tags` one or more tags (comma-separated)

        - `timeframe` the timeframe to roll up the counts. Examples: 10m, 4h.
        Supported timeframes: s, m, h and d

        - `operator` <, <=, >, >=, ==, or !=

        - `#` an integer or decimal number used to set the threshold


        **Logs Alert Query**


        Example: `logs(query).index(index_name).rollup(rollup_method[,
        measure]).last(time_window) operator #`


        - `query` The search query - following the [Log search
        syntax](https://docs.datadoghq.com/logs/search_syntax/).

        - `index_name` For multi-index organizations, the log index in which the
        request is performed.

        - `rollup_method` The stats roll-up method - supports `count`, `avg` and
        `cardinality`.

        - `measure` For `avg` and cardinality `rollup_method` - specify the
        measure or the facet name you want to use.

        - `time_window` #m (between 1 and 2880), #h (between 1 and 48).

        - `operator` `<`, `<=`, `>`, `>=`, `==`, or `!=`.

        - `#` an integer or decimal number used to set the threshold.


        **Composite Query**


        Example: `12345 && 67890`, where `12345` and `67890` are the IDs of
        non-composite monitors


        * `name` [*required*, *default* = **dynamic, based on query**]: The name
        of the alert.

        * `message` [*required*, *default* = **dynamic, based on query**]: A
        message to include with notifications for this monitor.

        Email notifications can be sent to specific users by using the same
        '@username' notation as events.

        * `tags` [*optional*, *default* = **empty list**]: A list of tags to
        associate with your monitor.

        When getting all monitor details via the API, use the `monitor_tags`
        argument to filter results by these tags.

        It is only available via the API and isn't visible or editable in the
        Datadog UI.


        **SLO Alert Query**


        Example: `error_budget("slo_id").over("time_window") operator #`


        - `slo_id`: The alphanumeric SLO ID of the SLO you are configuring the
        alert for.

        - `time_window`: The time window of the SLO target you wish to alert on.
        Valid options: `7d`, `30d`, `90d`.

        - `operator`: `>=` or `>`


        **Audit Alert Query**


        Example: `audits(query).rollup(rollup_method[,
        measure]).last(time_window) operator #`


        - `query` The search query - following the [Log search
        syntax](https://docs.datadoghq.com/logs/search_syntax/).

        - `rollup_method` The stats roll-up method - supports `count`, `avg` and
        `cardinality`.

        - `measure` For `avg` and cardinality `rollup_method` - specify the
        measure or the facet name you want to use.

        - `time_window` #m (between 1 and 2880), #h (between 1 and 48).

        - `operator` `<`, `<=`, `>`, `>=`, `==`, or `!=`.

        - `#` an integer or decimal number used to set the threshold.


        **NOTE** Only available on US1-FED and in closed beta on US1, EU, US3,
        and US5.


        **CI Pipelines Alert Query**


        Example: `ci-pipelines(query).rollup(rollup_method[,
        measure]).last(time_window) operator #`


        - `query` The search query - following the [Log search
        syntax](https://docs.datadoghq.com/logs/search_syntax/).

        - `rollup_method` The stats roll-up method - supports `count`, `avg`,
        and `cardinality`.

        - `measure` For `avg` and cardinality `rollup_method` - specify the
        measure or the facet name you want to use.

        - `time_window` #m (between 1 and 2880), #h (between 1 and 48).

        - `operator` `<`, `<=`, `>`, `>=`, `==`, or `!=`.

        - `#` an integer or decimal number used to set the threshold.


        **NOTE** CI Pipeline monitors are in alpha on US1, EU, US3 and US5.


        **CI Tests Alert Query**


        Example: `ci-tests(query).rollup(rollup_method[,
        measure]).last(time_window) operator #`


        - `query` The search query - following the [Log search
        syntax](https://docs.datadoghq.com/logs/search_syntax/).

        - `rollup_method` The stats roll-up method - supports `count`, `avg`,
        and `cardinality`.

        - `measure` For `avg` and cardinality `rollup_method` - specify the
        measure or the facet name you want to use.

        - `time_window` #m (between 1 and 2880), #h (between 1 and 48).

        - `operator` `<`, `<=`, `>`, `>=`, `==`, or `!=`.

        - `#` an integer or decimal number used to set the threshold.


        **NOTE** CI Test monitors are available only in closed beta on US1, EU,
        US3 and US5.


        **Error Tracking Alert Query**


        Example(RUM): `error-tracking-rum(query).rollup(rollup_method[,
        measure]).last(time_window) operator #`

        Example(APM Traces):
        `error-tracking-traces(query).rollup(rollup_method[,
        measure]).last(time_window) operator #`


        - `query` The search query - following the [Log search
        syntax](https://docs.datadoghq.com/logs/search_syntax/).

        - `rollup_method` The stats roll-up method - supports `count`, `avg`,
        and `cardinality`.

        - `measure` For `avg` and cardinality `rollup_method` - specify the
        measure or the facet name you want to use.

        - `time_window` #m (between 1 and 2880), #h (between 1 and 48).

        - `operator` `<`, `<=`, `>`, `>=`, `==`, or `!=`.

        - `#` an integer or decimal number used to set the threshold.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                message: You may need to add web hosts if this is consistently high.
                name: Bytes received on host0
                options:
                  no_data_timeframe: 20
                  notify_no_data: true
                query: avg(last_5m):sum:system.net.bytes_rcvd{host:host0} > 100
                tags:
                  - app:webserver
                  - frontend
                type: query alert
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                type: query alert
                query: avg(last_5m):sum:system.net.bytes_rcvd{host:host0} > 100
                created: '1981-05-17T07:49:00.717Z'
                creator:
                  email: deserunt cillum
                  handle: ea et sint pariatur
                  name: quis voluptate
                deleted: '1998-09-21T08:14:15.749Z'
                id: 1739976
                message: amet Ut sed
                modified: '2003-09-09T17:31:42.162Z'
                multi: true
                name: My monitor
                options:
                  aggregation:
                    group_by: host
                    metric: metrics.name
                    type: count
                  device_ids:
                    - chrome.tablet
                    - chrome.mobile_small
                  enable_logs_sample: true
                  escalation_message: none
                  evaluation_delay: -10370079
                  group_retention_duration: magna
                  groupby_simple_monitor: false
                  include_tags: true
                  locked: true
                  min_failure_duration: 0
                  min_location_failed: 1
                  new_group_delay: 77980591
                  new_host_delay: 300
                  no_data_timeframe: 78751953
                  notify_audit: false
                  notify_by:
                    - in eiusmod nulla in
                    - sint velit proident ut
                  notify_no_data: false
                  on_missing_data: default
                  renotify_interval: null
                  renotify_occurrences: 62278963
                  renotify_statuses:
                    - alert
                    - alert
                  require_full_window: true
                  scheduling_options:
                    evaluation_window:
                      day_starts: '04:00'
                      hour_starts: 0
                      month_starts: 1
                  silenced:
                    officia21a: 90886369
                    fugiat__1: -11493932
                    fugiat__ed: -27200184
                    ullamco_ba1: 52953697
                  synthetics_check_id: irure magna consectetur
                  threshold_windows:
                    recovery_window: aute tempor
                    trigger_window: anim ut ipsum
                  thresholds:
                    critical: 17717560.689544246
                    critical_recovery: -52526948.41181218
                    ok: 73452579.53404939
                    unknown: 14286163.90016897
                    warning: -52245817.64421865
                    warning_recovery: 24907559.78806521
                  timeout_h: null
                  variables:
                    - data_source: rum
                      compute:
                        aggregation: avg
                        interval: 60000
                        metric: '@duration'
                      name: query_errors
                      group_by:
                        - facet: status
                          limit: 10
                          sort:
                            aggregation: avg
                            metric: irure ad qui non consequat
                            order: desc
                        - facet: status
                          limit: 10
                          sort:
                            aggregation: avg
                            metric: magna proident do in
                            order: desc
                      indexes:
                        - days-3
                        - days-7
                      search:
                        query: service:query
                    - data_source: rum
                      compute:
                        aggregation: avg
                        interval: 60000
                        metric: '@duration'
                      name: query_errors
                      group_by:
                        - facet: status
                          limit: 10
                          sort:
                            aggregation: avg
                            metric: ad
                            order: desc
                        - facet: status
                          limit: 10
                          sort:
                            aggregation: avg
                            metric: in nostrud Excepte
                            order: desc
                      indexes:
                        - days-3
                        - days-7
                      search:
                        query: service:query
                overall_state: Unknown
                priority: 1
                restricted_roles:
                  - amet ut
                  - reprehenderit
                state:
                  groups:
                    temporcb4:
                      last_nodata_ts: -6752874
                      last_notified_ts: -11690218
                      last_resolved_ts: 59955958
                      last_triggered_ts: -32156499
                      name: Ut
                      status: No Data
                    nostrud3:
                      last_nodata_ts: 37881911
                      last_notified_ts: -52237773
                      last_resolved_ts: 65550440
                      last_triggered_ts: -65606890
                      name: mollit incididunt veniam
                      status: Unknown
                tags:
                  - minim non fugiat officia tempor
                  - commodo Except
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/monitor/can_delete:
    get:
      tags:
        - Monitors
      summary: Check if a monitor can be deleted
      description: Check if the given monitors can be deleted.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: monitor_ids
          in: query
          schema:
            type: string
          description: (Required) The IDs of the monitor to check.
          example: 666486743,666486743
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data: {}
                errors:
                  officia7f3:
                    - ea dolore laborum eiusmod
                    - consequat Lorem id
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '409':
          description: Conflict
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data: {}
                errors:
                  officia7f3:
                    - ea dolore laborum eiusmod
                    - consequat Lorem id
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/monitor/groups/search:
    get:
      tags:
        - Monitors
      summary: Monitors group search
      description: Search and filter your monitor groups details.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: query
          in: query
          schema:
            type: string
          description: >-
            After entering a search query in your [Manage Monitor page][1] use
            the query parameter value in the

            URL of the page as value for this parameter. Consult the dedicated
            [manage monitor documentation][2]

            page to learn more.


            The query can contain any number of space-separated monitor
            attributes, for instance `query="type:metric status:alert"`.


            [1]: https://app.datadoghq.com/monitors/manage

            [2]: /monitors/manage/#find-the-monitors
          example: proident
        - name: page
          in: query
          schema:
            type: integer
          description: Page to start paginating from.
          example: '0'
        - name: per_page
          in: query
          schema:
            type: integer
          description: Number of monitors to return per page.
          example: '30'
        - name: sort
          in: query
          schema:
            type: string
          description: >-
            String for sort order, composed of field and sort order separate by
            a comma, for example `name,asc`. Supported sort directions: `asc`,
            `desc`. Supported fields:


            * `name`

            * `status`

            * `tags`
          example: proident
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                counts:
                  status:
                    - count: 90165132
                      name: {}
                    - count: 16005406
                      name: {}
                  type:
                    - count: -21490890
                      name: {}
                    - count: 54183353
                      name: {}
                groups:
                  - group: cupidatat magna minim
                    group_tags:
                      - nulla nostrud minim dolor ullamco
                      - do aliqua aute laborum
                    last_nodata_ts: 22857159
                    last_triggered_ts: -20839704
                    monitor_id: -80127628
                    monitor_name: non
                    status: Skipped
                  - group: aute ipsum sint
                    group_tags:
                      - et aute eiusmod velit adipisicing
                      - est nostrud
                    last_nodata_ts: -66911516
                    last_triggered_ts: 29080657
                    monitor_id: 77379172
                    monitor_name: aliquip exercitation
                    status: OK
                metadata:
                  page: -22435393
                  page_count: 18723613
                  per_page: 56798508
                  total_count: 25655245
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/monitor/search:
    get:
      tags:
        - Monitors
      summary: Monitors search
      description: Search and filter your monitors details.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: query
          in: query
          schema:
            type: string
          description: >-
            After entering a search query in your [Manage Monitor page][1] use
            the query parameter value in the

            URL of the page as value for this parameter. Consult the dedicated
            [manage monitor documentation][2]

            page to learn more.


            The query can contain any number of space-separated monitor
            attributes, for instance `query="type:metric status:alert"`.


            [1]: https://app.datadoghq.com/monitors/manage

            [2]: /monitors/manage/#find-the-monitors
          example: proident
        - name: page
          in: query
          schema:
            type: integer
          description: Page to start paginating from.
          example: '0'
        - name: per_page
          in: query
          schema:
            type: integer
          description: Number of monitors to return per page.
          example: '30'
        - name: sort
          in: query
          schema:
            type: string
          description: >-
            String for sort order, composed of field and sort order separate by
            a comma, for example `name,asc`. Supported sort directions: `asc`,
            `desc`. Supported fields:


            * `name`

            * `status`

            * `tags`
          example: proident
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                counts:
                  muted:
                    - count: -41486966
                      name: {}
                    - count: -91028898
                      name: {}
                  status:
                    - count: 84217947
                      name: {}
                    - count: -76849244
                      name: {}
                  tag:
                    - count: -38296256
                      name: {}
                    - count: -76856778
                      name: {}
                  type:
                    - count: 68210325
                      name: {}
                    - count: -20295315
                      name: {}
                metadata:
                  page: 98268407
                  page_count: -18159579
                  per_page: -6146205
                  total_count: 57121783
                monitors:
                  - classification: dol
                    creator:
                      email: consectetur eu
                      handle: aute ea anim
                      name: nulla
                    id: -58738357
                    last_triggered_ts: 42195435
                    metrics:
                      - ad nisi ea
                      - aliqua
                    name: labore aute sint tempor
                    notifications:
                      - handle: culpa
                        name: minim
                      - handle: cupidatat Dui
                        name: Duis aute eu dolor
                    org_id: 66972965
                    query: avg(last_5m):sum:system.net.bytes_rcvd{host:host0} > 100
                    scopes:
                      - host:app2
                      - env:dev,env:prod
                    status: Warn
                    tags:
                      - nulla exercitation elit
                      - do officia
                    type: query alert
                  - classification: reprehenderit Lorem sed
                    creator:
                      email: et
                      handle: dolore dolore
                      name: ex incididunt
                    id: -26077481
                    last_triggered_ts: -14158918
                    metrics:
                      - dolor laboris dolore
                      - of
                    name: reprehenderit voluptate pariatur eiusmod
                    notifications:
                      - handle: consectetur proident aliquip
                        name: exercitation ipsum
                      - handle: dolor do pariatur con
                        name: dolor Duis aliqua
                    org_id: 83075881
                    query: avg(last_5m):sum:system.net.bytes_rcvd{host:host0} > 100
                    scopes:
                      - host:app2
                      - env:dev,env:prod
                    status: No Data
                    tags:
                      - nostrud elit nulla
                      - ut do Lorem incididunt
                    type: query alert
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/monitor/validate:
    post:
      tags:
        - Monitors
      summary: Validate a monitor
      description: Validate the monitor provided in the request.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                type: query alert
                query: avg(last_5m):sum:system.net.bytes_rcvd{host:host0} > 100
                message: officia sit Excepteur
                name: My monitor
                options:
                  enable_logs_sample: true
                  escalation_message: none
                  evaluation_delay: 20815486
                  group_retention_duration: sunt Dui
                  groupby_simple_monitor: true
                  include_tags: true
                  locked: false
                  min_failure_duration: 0
                  min_location_failed: 1
                  new_group_delay: 13785861
                  new_host_delay: 300
                  no_data_timeframe: -50453472
                  notify_audit: false
                  notify_by:
                    - quis
                    - elit proident Duis pariatur
                  notify_no_data: false
                  on_missing_data: default
                  renotify_interval: null
                  renotify_occurrences: -81787851
                  renotify_statuses:
                    - no data
                    - no data
                  require_full_window: false
                  scheduling_options:
                    evaluation_window:
                      day_starts: '04:00'
                      hour_starts: 0
                      month_starts: 1
                  silenced:
                    do_0c: 34810941
                    ipsum_9: 87586834
                    dolore75: -23340944
                  synthetics_check_id: ad minim D
                  threshold_windows:
                    recovery_window: deserunt adipisicing esse
                    trigger_window: Excepteur ad qui
                  thresholds:
                    critical: 97604199.5206329
                    critical_recovery: -45532330.53864383
                    ok: -39008659.47833494
                    unknown: 46728046.59352502
                    warning: 12810696.551380426
                    warning_recovery: -86015692.88514161
                  timeout_h: null
                  variables:
                    - data_source: rum
                      compute:
                        aggregation: avg
                        interval: 60000
                        metric: '@duration'
                      name: query_errors
                      group_by:
                        - facet: status
                          limit: 10
                          sort:
                            aggregation: avg
                            metric: nulla consectetur ut
                            order: desc
                        - facet: status
                          limit: 10
                          sort:
                            aggregation: avg
                            metric: dolor anim
                            order: desc
                      indexes:
                        - days-3
                        - days-7
                      search:
                        query: service:query
                    - data_source: rum
                      compute:
                        aggregation: avg
                        interval: 60000
                        metric: '@duration'
                      name: query_errors
                      group_by:
                        - facet: status
                          limit: 10
                          sort:
                            aggregation: avg
                            metric: irure Excepteur ea ut
                            order: desc
                        - facet: status
                          limit: 10
                          sort:
                            aggregation: avg
                            metric: in
                            order: desc
                      indexes:
                        - days-3
                        - days-7
                      search:
                        query: service:query
                priority: 4
                restricted_roles:
                  - occaecat exercitation
                  - 'laborum '
                tags:
                  - dolor veniam officia tempor
                  - ad dolor nulla anim
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example: {}
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/monitor/{monitor_id}:
    delete:
      tags:
        - Monitors
      summary: Delete a monitor
      description: Delete the specified monitor
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: force
          in: query
          schema:
            type: boolean
          description: >-
            Delete the monitor even if it's referenced by other resources (for
            example SLO, composite monitor).
          example: 'false'
        - name: monitor_id
          in: path
          schema:
            type: integer
          required: true
          description: (Required) The ID of the monitor.
          example: '666486743'
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                deleted_monitor_id: 666486743
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '401':
          description: Unauthorized
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    get:
      tags:
        - Monitors
      summary: Get a monitor's details
      description: Get details about the specified monitor from your organization.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: group_states
          in: query
          schema:
            type: string
          description: >-
            When specified, shows additional information about the group states.
            Choose one or more from `all`, `alert`, `warn`, and `no data`.
          example: proident
        - name: monitor_id
          in: path
          schema:
            type: integer
          required: true
          description: (Required) The ID of the monitor
          example: '666486743'
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                type: query alert
                query: avg(last_5m):sum:system.net.bytes_rcvd{host:host0} > 100
                created: '1981-05-17T07:49:00.717Z'
                creator:
                  email: deserunt cillum
                  handle: ea et sint pariatur
                  name: quis voluptate
                deleted: '1998-09-21T08:14:15.749Z'
                id: 1739976
                message: amet Ut sed
                modified: '2003-09-09T17:31:42.162Z'
                multi: true
                name: My monitor
                options:
                  aggregation:
                    group_by: host
                    metric: metrics.name
                    type: count
                  device_ids:
                    - chrome.tablet
                    - chrome.mobile_small
                  enable_logs_sample: true
                  escalation_message: none
                  evaluation_delay: -10370079
                  group_retention_duration: magna
                  groupby_simple_monitor: false
                  include_tags: true
                  locked: true
                  min_failure_duration: 0
                  min_location_failed: 1
                  new_group_delay: 77980591
                  new_host_delay: 300
                  no_data_timeframe: 78751953
                  notify_audit: false
                  notify_by:
                    - in eiusmod nulla in
                    - sint velit proident ut
                  notify_no_data: false
                  on_missing_data: default
                  renotify_interval: null
                  renotify_occurrences: 62278963
                  renotify_statuses:
                    - alert
                    - alert
                  require_full_window: true
                  scheduling_options:
                    evaluation_window:
                      day_starts: '04:00'
                      hour_starts: 0
                      month_starts: 1
                  silenced:
                    officia21a: 90886369
                    fugiat__1: -11493932
                    fugiat__ed: -27200184
                    ullamco_ba1: 52953697
                  synthetics_check_id: irure magna consectetur
                  threshold_windows:
                    recovery_window: aute tempor
                    trigger_window: anim ut ipsum
                  thresholds:
                    critical: 17717560.689544246
                    critical_recovery: -52526948.41181218
                    ok: 73452579.53404939
                    unknown: 14286163.90016897
                    warning: -52245817.64421865
                    warning_recovery: 24907559.78806521
                  timeout_h: null
                  variables:
                    - data_source: rum
                      compute:
                        aggregation: avg
                        interval: 60000
                        metric: '@duration'
                      name: query_errors
                      group_by:
                        - facet: status
                          limit: 10
                          sort:
                            aggregation: avg
                            metric: irure ad qui non consequat
                            order: desc
                        - facet: status
                          limit: 10
                          sort:
                            aggregation: avg
                            metric: magna proident do in
                            order: desc
                      indexes:
                        - days-3
                        - days-7
                      search:
                        query: service:query
                    - data_source: rum
                      compute:
                        aggregation: avg
                        interval: 60000
                        metric: '@duration'
                      name: query_errors
                      group_by:
                        - facet: status
                          limit: 10
                          sort:
                            aggregation: avg
                            metric: ad
                            order: desc
                        - facet: status
                          limit: 10
                          sort:
                            aggregation: avg
                            metric: in nostrud Excepte
                            order: desc
                      indexes:
                        - days-3
                        - days-7
                      search:
                        query: service:query
                overall_state: Unknown
                priority: 1
                restricted_roles:
                  - amet ut
                  - reprehenderit
                state:
                  groups:
                    temporcb4:
                      last_nodata_ts: -6752874
                      last_notified_ts: -11690218
                      last_resolved_ts: 59955958
                      last_triggered_ts: -32156499
                      name: Ut
                      status: No Data
                    nostrud3:
                      last_nodata_ts: 37881911
                      last_notified_ts: -52237773
                      last_resolved_ts: 65550440
                      last_triggered_ts: -65606890
                      name: mollit incididunt veniam
                      status: Unknown
                tags:
                  - minim non fugiat officia tempor
                  - commodo Except
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    put:
      tags:
        - Monitors
      summary: Edit a monitor
      description: Edit the specified monitor.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                message: dolore esse eiusmod et
                name: in commodo
                options:
                  enable_logs_sample: true
                  escalation_message: none
                  evaluation_delay: -89473790
                  group_retention_duration: ipsum ut consectetur
                  groupby_simple_monitor: true
                  include_tags: true
                  locked: true
                  min_failure_duration: 0
                  min_location_failed: 1
                  new_group_delay: -60393992
                  new_host_delay: 300
                  no_data_timeframe: -34282288
                  notify_audit: false
                  notify_by:
                    - et
                    - do sunt nisi ut
                  notify_no_data: false
                  on_missing_data: show_no_data
                  renotify_interval: null
                  renotify_occurrences: 35543060
                  renotify_statuses:
                    - no data
                    - no data
                  require_full_window: true
                  scheduling_options:
                    evaluation_window:
                      day_starts: '04:00'
                      hour_starts: 0
                      month_starts: 1
                  silenced:
                    incididunt_d: 34295747
                  synthetics_check_id: laboris nisi
                  threshold_windows:
                    recovery_window: reprehenderit dolor ut
                    trigger_window: nulla
                  thresholds:
                    critical: 13452221.25356558
                    critical_recovery: 73617361.9996022
                    ok: -70439047.9393469
                    unknown: -24233772.759714216
                    warning: -93863665.74337476
                    warning_recovery: -57152728.909905374
                  timeout_h: null
                  variables:
                    - data_source: rum
                      compute:
                        aggregation: avg
                        interval: 60000
                        metric: '@duration'
                      name: query_errors
                      group_by:
                        - facet: status
                          limit: 10
                          sort:
                            aggregation: avg
                            metric: dolore Lorem
                            order: desc
                        - facet: status
                          limit: 10
                          sort:
                            aggregation: avg
                            metric: irure labore velit
                            order: desc
                      indexes:
                        - days-3
                        - days-7
                      search:
                        query: service:query
                    - data_source: rum
                      compute:
                        aggregation: avg
                        interval: 60000
                        metric: '@duration'
                      name: query_errors
                      group_by:
                        - facet: status
                          limit: 10
                          sort:
                            aggregation: avg
                            metric: culpa nisi id eu
                            order: desc
                        - facet: status
                          limit: 10
                          sort:
                            aggregation: avg
                            metric: reprehenderit id magna
                            order: desc
                      indexes:
                        - days-3
                        - days-7
                      search:
                        query: service:query
                priority: 1
                query: aliqua anim
                restricted_roles:
                  - esse in in pariatur
                  - Excepteur ipsum irure
                tags:
                  - Duis anim sed cillum
                  - esse et
                type: query alert
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: monitor_id
          in: path
          schema:
            type: integer
          required: true
          description: (Required) The ID of the monitor.
          example: '666486743'
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                type: query alert
                query: avg(last_5m):sum:system.net.bytes_rcvd{host:host0} > 100
                created: '1981-05-17T07:49:00.717Z'
                creator:
                  email: deserunt cillum
                  handle: ea et sint pariatur
                  name: quis voluptate
                deleted: '1998-09-21T08:14:15.749Z'
                id: 1739976
                message: amet Ut sed
                modified: '2003-09-09T17:31:42.162Z'
                multi: true
                name: My monitor
                options:
                  aggregation:
                    group_by: host
                    metric: metrics.name
                    type: count
                  device_ids:
                    - chrome.tablet
                    - chrome.mobile_small
                  enable_logs_sample: true
                  escalation_message: none
                  evaluation_delay: -10370079
                  group_retention_duration: magna
                  groupby_simple_monitor: false
                  include_tags: true
                  locked: true
                  min_failure_duration: 0
                  min_location_failed: 1
                  new_group_delay: 77980591
                  new_host_delay: 300
                  no_data_timeframe: 78751953
                  notify_audit: false
                  notify_by:
                    - in eiusmod nulla in
                    - sint velit proident ut
                  notify_no_data: false
                  on_missing_data: default
                  renotify_interval: null
                  renotify_occurrences: 62278963
                  renotify_statuses:
                    - alert
                    - alert
                  require_full_window: true
                  scheduling_options:
                    evaluation_window:
                      day_starts: '04:00'
                      hour_starts: 0
                      month_starts: 1
                  silenced:
                    officia21a: 90886369
                    fugiat__1: -11493932
                    fugiat__ed: -27200184
                    ullamco_ba1: 52953697
                  synthetics_check_id: irure magna consectetur
                  threshold_windows:
                    recovery_window: aute tempor
                    trigger_window: anim ut ipsum
                  thresholds:
                    critical: 17717560.689544246
                    critical_recovery: -52526948.41181218
                    ok: 73452579.53404939
                    unknown: 14286163.90016897
                    warning: -52245817.64421865
                    warning_recovery: 24907559.78806521
                  timeout_h: null
                  variables:
                    - data_source: rum
                      compute:
                        aggregation: avg
                        interval: 60000
                        metric: '@duration'
                      name: query_errors
                      group_by:
                        - facet: status
                          limit: 10
                          sort:
                            aggregation: avg
                            metric: irure ad qui non consequat
                            order: desc
                        - facet: status
                          limit: 10
                          sort:
                            aggregation: avg
                            metric: magna proident do in
                            order: desc
                      indexes:
                        - days-3
                        - days-7
                      search:
                        query: service:query
                    - data_source: rum
                      compute:
                        aggregation: avg
                        interval: 60000
                        metric: '@duration'
                      name: query_errors
                      group_by:
                        - facet: status
                          limit: 10
                          sort:
                            aggregation: avg
                            metric: ad
                            order: desc
                        - facet: status
                          limit: 10
                          sort:
                            aggregation: avg
                            metric: in nostrud Excepte
                            order: desc
                      indexes:
                        - days-3
                        - days-7
                      search:
                        query: service:query
                overall_state: Unknown
                priority: 1
                restricted_roles:
                  - amet ut
                  - reprehenderit
                state:
                  groups:
                    temporcb4:
                      last_nodata_ts: -6752874
                      last_notified_ts: -11690218
                      last_resolved_ts: 59955958
                      last_triggered_ts: -32156499
                      name: Ut
                      status: No Data
                    nostrud3:
                      last_nodata_ts: 37881911
                      last_notified_ts: -52237773
                      last_resolved_ts: 65550440
                      last_triggered_ts: -65606890
                      name: mollit incididunt veniam
                      status: Unknown
                tags:
                  - minim non fugiat officia tempor
                  - commodo Except
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '401':
          description: Unauthorized
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/monitor/{monitor_id}/mute:
    post:
      tags:
        - Monitors
      summary: Mute a monitor
      description: Mute the specified monitor.
      requestBody:
        content: {}
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: scope
          in: query
          schema:
            type: string
          description: >-
            The scope to apply the mute to.

            For example, if your alert is grouped by `{host}`, you might mute
            `host:app1`.
          example: role:db
        - name: end
          in: query
          schema:
            type: number
          description: A POSIX timestamp for when the mute should end.
          example: '-70569764'
        - name: monitor_id
          in: path
          schema:
            type: number
          required: true
          description: (Required) The id of the monitor
          example: '-70569764'
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                type: query alert
                query: avg(last_5m):sum:system.net.bytes_rcvd{host:host0} > 100
                created: '1981-05-17T07:49:00.717Z'
                creator:
                  email: deserunt cillum
                  handle: ea et sint pariatur
                  name: quis voluptate
                deleted: '1998-09-21T08:14:15.749Z'
                id: 1739976
                message: amet Ut sed
                modified: '2003-09-09T17:31:42.162Z'
                multi: true
                name: My monitor
                options:
                  aggregation:
                    group_by: host
                    metric: metrics.name
                    type: count
                  device_ids:
                    - chrome.tablet
                    - chrome.mobile_small
                  enable_logs_sample: true
                  escalation_message: none
                  evaluation_delay: -10370079
                  group_retention_duration: magna
                  groupby_simple_monitor: false
                  include_tags: true
                  locked: true
                  min_failure_duration: 0
                  min_location_failed: 1
                  new_group_delay: 77980591
                  new_host_delay: 300
                  no_data_timeframe: 78751953
                  notify_audit: false
                  notify_by:
                    - in eiusmod nulla in
                    - sint velit proident ut
                  notify_no_data: false
                  on_missing_data: default
                  renotify_interval: null
                  renotify_occurrences: 62278963
                  renotify_statuses:
                    - alert
                    - alert
                  require_full_window: true
                  scheduling_options:
                    evaluation_window:
                      day_starts: '04:00'
                      hour_starts: 0
                      month_starts: 1
                  silenced:
                    officia21a: 90886369
                    fugiat__1: -11493932
                    fugiat__ed: -27200184
                    ullamco_ba1: 52953697
                  synthetics_check_id: irure magna consectetur
                  threshold_windows:
                    recovery_window: aute tempor
                    trigger_window: anim ut ipsum
                  thresholds:
                    critical: 17717560.689544246
                    critical_recovery: -52526948.41181218
                    ok: 73452579.53404939
                    unknown: 14286163.90016897
                    warning: -52245817.64421865
                    warning_recovery: 24907559.78806521
                  timeout_h: null
                  variables:
                    - data_source: rum
                      compute:
                        aggregation: avg
                        interval: 60000
                        metric: '@duration'
                      name: query_errors
                      group_by:
                        - facet: status
                          limit: 10
                          sort:
                            aggregation: avg
                            metric: irure ad qui non consequat
                            order: desc
                        - facet: status
                          limit: 10
                          sort:
                            aggregation: avg
                            metric: magna proident do in
                            order: desc
                      indexes:
                        - days-3
                        - days-7
                      search:
                        query: service:query
                    - data_source: rum
                      compute:
                        aggregation: avg
                        interval: 60000
                        metric: '@duration'
                      name: query_errors
                      group_by:
                        - facet: status
                          limit: 10
                          sort:
                            aggregation: avg
                            metric: ad
                            order: desc
                        - facet: status
                          limit: 10
                          sort:
                            aggregation: avg
                            metric: in nostrud Excepte
                            order: desc
                      indexes:
                        - days-3
                        - days-7
                      search:
                        query: service:query
                overall_state: Unknown
                priority: 1
                restricted_roles:
                  - amet ut
                  - reprehenderit
                state:
                  groups:
                    temporcb4:
                      last_nodata_ts: -6752874
                      last_notified_ts: -11690218
                      last_resolved_ts: 59955958
                      last_triggered_ts: -32156499
                      name: Ut
                      status: No Data
                    nostrud3:
                      last_nodata_ts: 37881911
                      last_notified_ts: -52237773
                      last_resolved_ts: 65550440
                      last_triggered_ts: -65606890
                      name: mollit incididunt veniam
                      status: Unknown
                tags:
                  - minim non fugiat officia tempor
                  - commodo Except
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '401':
          description: Unauthorized
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/monitor/{monitor_id}/unmute:
    post:
      tags:
        - Monitors
      summary: Unmute a monitor
      description: Unmute the specified monitor.
      requestBody:
        content: {}
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: scope
          in: query
          schema:
            type: string
          description: >-
            The scope to apply the mute to.

            For example, if your alert is grouped by `{host}`, you might mute
            `host:app1`.
          example: role:db
        - name: all_scopes
          in: query
          schema:
            type: boolean
          description: Clear muting across all scopes. Default is `false`.
          example: 'false'
        - name: monitor_id
          in: path
          schema:
            type: number
          required: true
          description: (Required) The id of the monitor
          example: '-70569764'
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                type: query alert
                query: avg(last_5m):sum:system.net.bytes_rcvd{host:host0} > 100
                created: '1981-05-17T07:49:00.717Z'
                creator:
                  email: deserunt cillum
                  handle: ea et sint pariatur
                  name: quis voluptate
                deleted: '1998-09-21T08:14:15.749Z'
                id: 1739976
                message: amet Ut sed
                modified: '2003-09-09T17:31:42.162Z'
                multi: true
                name: My monitor
                options:
                  aggregation:
                    group_by: host
                    metric: metrics.name
                    type: count
                  device_ids:
                    - chrome.tablet
                    - chrome.mobile_small
                  enable_logs_sample: true
                  escalation_message: none
                  evaluation_delay: -10370079
                  group_retention_duration: magna
                  groupby_simple_monitor: false
                  include_tags: true
                  locked: true
                  min_failure_duration: 0
                  min_location_failed: 1
                  new_group_delay: 77980591
                  new_host_delay: 300
                  no_data_timeframe: 78751953
                  notify_audit: false
                  notify_by:
                    - in eiusmod nulla in
                    - sint velit proident ut
                  notify_no_data: false
                  on_missing_data: default
                  renotify_interval: null
                  renotify_occurrences: 62278963
                  renotify_statuses:
                    - alert
                    - alert
                  require_full_window: true
                  scheduling_options:
                    evaluation_window:
                      day_starts: '04:00'
                      hour_starts: 0
                      month_starts: 1
                  silenced:
                    officia21a: 90886369
                    fugiat__1: -11493932
                    fugiat__ed: -27200184
                    ullamco_ba1: 52953697
                  synthetics_check_id: irure magna consectetur
                  threshold_windows:
                    recovery_window: aute tempor
                    trigger_window: anim ut ipsum
                  thresholds:
                    critical: 17717560.689544246
                    critical_recovery: -52526948.41181218
                    ok: 73452579.53404939
                    unknown: 14286163.90016897
                    warning: -52245817.64421865
                    warning_recovery: 24907559.78806521
                  timeout_h: null
                  variables:
                    - data_source: rum
                      compute:
                        aggregation: avg
                        interval: 60000
                        metric: '@duration'
                      name: query_errors
                      group_by:
                        - facet: status
                          limit: 10
                          sort:
                            aggregation: avg
                            metric: irure ad qui non consequat
                            order: desc
                        - facet: status
                          limit: 10
                          sort:
                            aggregation: avg
                            metric: magna proident do in
                            order: desc
                      indexes:
                        - days-3
                        - days-7
                      search:
                        query: service:query
                    - data_source: rum
                      compute:
                        aggregation: avg
                        interval: 60000
                        metric: '@duration'
                      name: query_errors
                      group_by:
                        - facet: status
                          limit: 10
                          sort:
                            aggregation: avg
                            metric: ad
                            order: desc
                        - facet: status
                          limit: 10
                          sort:
                            aggregation: avg
                            metric: in nostrud Excepte
                            order: desc
                      indexes:
                        - days-3
                        - days-7
                      search:
                        query: service:query
                overall_state: Unknown
                priority: 1
                restricted_roles:
                  - amet ut
                  - reprehenderit
                state:
                  groups:
                    temporcb4:
                      last_nodata_ts: -6752874
                      last_notified_ts: -11690218
                      last_resolved_ts: 59955958
                      last_triggered_ts: -32156499
                      name: Ut
                      status: No Data
                    nostrud3:
                      last_nodata_ts: 37881911
                      last_notified_ts: -52237773
                      last_resolved_ts: 65550440
                      last_triggered_ts: -65606890
                      name: mollit incididunt veniam
                      status: Unknown
                tags:
                  - minim non fugiat officia tempor
                  - commodo Except
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '401':
          description: Unauthorized
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/monitor/{monitor_id}/validate:
    post:
      tags:
        - Monitors
      summary: Validate an existing monitor
      description: Validate the monitor provided in the request.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                type: query alert
                query: avg(last_5m):sum:system.net.bytes_rcvd{host:host0} > 100
                message: officia sit Excepteur
                name: My monitor
                options:
                  enable_logs_sample: true
                  escalation_message: none
                  evaluation_delay: 20815486
                  group_retention_duration: sunt Dui
                  groupby_simple_monitor: true
                  include_tags: true
                  locked: false
                  min_failure_duration: 0
                  min_location_failed: 1
                  new_group_delay: 13785861
                  new_host_delay: 300
                  no_data_timeframe: -50453472
                  notify_audit: false
                  notify_by:
                    - quis
                    - elit proident Duis pariatur
                  notify_no_data: false
                  on_missing_data: default
                  renotify_interval: null
                  renotify_occurrences: -81787851
                  renotify_statuses:
                    - no data
                    - no data
                  require_full_window: false
                  scheduling_options:
                    evaluation_window:
                      day_starts: '04:00'
                      hour_starts: 0
                      month_starts: 1
                  silenced:
                    do_0c: 34810941
                    ipsum_9: 87586834
                    dolore75: -23340944
                  synthetics_check_id: ad minim D
                  threshold_windows:
                    recovery_window: deserunt adipisicing esse
                    trigger_window: Excepteur ad qui
                  thresholds:
                    critical: 97604199.5206329
                    critical_recovery: -45532330.53864383
                    ok: -39008659.47833494
                    unknown: 46728046.59352502
                    warning: 12810696.551380426
                    warning_recovery: -86015692.88514161
                  timeout_h: null
                  variables:
                    - data_source: rum
                      compute:
                        aggregation: avg
                        interval: 60000
                        metric: '@duration'
                      name: query_errors
                      group_by:
                        - facet: status
                          limit: 10
                          sort:
                            aggregation: avg
                            metric: nulla consectetur ut
                            order: desc
                        - facet: status
                          limit: 10
                          sort:
                            aggregation: avg
                            metric: dolor anim
                            order: desc
                      indexes:
                        - days-3
                        - days-7
                      search:
                        query: service:query
                    - data_source: rum
                      compute:
                        aggregation: avg
                        interval: 60000
                        metric: '@duration'
                      name: query_errors
                      group_by:
                        - facet: status
                          limit: 10
                          sort:
                            aggregation: avg
                            metric: irure Excepteur ea ut
                            order: desc
                        - facet: status
                          limit: 10
                          sort:
                            aggregation: avg
                            metric: in
                            order: desc
                      indexes:
                        - days-3
                        - days-7
                      search:
                        query: service:query
                priority: 4
                restricted_roles:
                  - occaecat exercitation
                  - 'laborum '
                tags:
                  - dolor veniam officia tempor
                  - ad dolor nulla anim
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: monitor_id
          in: path
          schema:
            type: integer
          required: true
          description: (Required) The ID of the monitor
          example: '666486743'
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example: {}
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /v1/monitor/mute_all:
    post:
      tags:
        - Monitors
      summary: Mute all monitors
      description: >-
        Muting prevents all monitors from notifying through email and posts to
        the

        [event stream](https://docs.datadoghq.com/events).

        State changes are only visible by checking the alert page.
      requestBody:
        content: {}
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                type: query alert
                query: avg(last_5m):sum:system.net.bytes_rcvd{host:host0} > 100
                created: '1981-05-17T07:49:00.717Z'
                creator:
                  email: deserunt cillum
                  handle: ea et sint pariatur
                  name: quis voluptate
                deleted: '1998-09-21T08:14:15.749Z'
                id: 1739976
                message: amet Ut sed
                modified: '2003-09-09T17:31:42.162Z'
                multi: true
                name: My monitor
                options:
                  aggregation:
                    group_by: host
                    metric: metrics.name
                    type: count
                  device_ids:
                    - chrome.tablet
                    - chrome.mobile_small
                  enable_logs_sample: true
                  escalation_message: none
                  evaluation_delay: -10370079
                  group_retention_duration: magna
                  groupby_simple_monitor: false
                  include_tags: true
                  locked: true
                  min_failure_duration: 0
                  min_location_failed: 1
                  new_group_delay: 77980591
                  new_host_delay: 300
                  no_data_timeframe: 78751953
                  notify_audit: false
                  notify_by:
                    - in eiusmod nulla in
                    - sint velit proident ut
                  notify_no_data: false
                  on_missing_data: default
                  renotify_interval: null
                  renotify_occurrences: 62278963
                  renotify_statuses:
                    - alert
                    - alert
                  require_full_window: true
                  scheduling_options:
                    evaluation_window:
                      day_starts: '04:00'
                      hour_starts: 0
                      month_starts: 1
                  silenced:
                    officia21a: 90886369
                    fugiat__1: -11493932
                    fugiat__ed: -27200184
                    ullamco_ba1: 52953697
                  synthetics_check_id: irure magna consectetur
                  threshold_windows:
                    recovery_window: aute tempor
                    trigger_window: anim ut ipsum
                  thresholds:
                    critical: 17717560.689544246
                    critical_recovery: -52526948.41181218
                    ok: 73452579.53404939
                    unknown: 14286163.90016897
                    warning: -52245817.64421865
                    warning_recovery: 24907559.78806521
                  timeout_h: null
                  variables:
                    - data_source: rum
                      compute:
                        aggregation: avg
                        interval: 60000
                        metric: '@duration'
                      name: query_errors
                      group_by:
                        - facet: status
                          limit: 10
                          sort:
                            aggregation: avg
                            metric: irure ad qui non consequat
                            order: desc
                        - facet: status
                          limit: 10
                          sort:
                            aggregation: avg
                            metric: magna proident do in
                            order: desc
                      indexes:
                        - days-3
                        - days-7
                      search:
                        query: service:query
                    - data_source: rum
                      compute:
                        aggregation: avg
                        interval: 60000
                        metric: '@duration'
                      name: query_errors
                      group_by:
                        - facet: status
                          limit: 10
                          sort:
                            aggregation: avg
                            metric: ad
                            order: desc
                        - facet: status
                          limit: 10
                          sort:
                            aggregation: avg
                            metric: in nostrud Excepte
                            order: desc
                      indexes:
                        - days-3
                        - days-7
                      search:
                        query: service:query
                overall_state: Unknown
                priority: 1
                restricted_roles:
                  - amet ut
                  - reprehenderit
                state:
                  groups:
                    temporcb4:
                      last_nodata_ts: -6752874
                      last_notified_ts: -11690218
                      last_resolved_ts: 59955958
                      last_triggered_ts: -32156499
                      name: Ut
                      status: No Data
                    nostrud3:
                      last_nodata_ts: 37881911
                      last_notified_ts: -52237773
                      last_resolved_ts: 65550440
                      last_triggered_ts: -65606890
                      name: mollit incididunt veniam
                      status: Unknown
                tags:
                  - minim non fugiat officia tempor
                  - commodo Except
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '401':
          description: Unauthorized
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /v1/monitor/unmute_all:
    post:
      tags:
        - Monitors
      summary: Unmute all monitors
      description: |-
        Disables muting all monitors. Throws an error if mute all
        was not enabled previously.
      requestBody:
        content: {}
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '401':
          description: Unauthorized
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/notebooks:
    get:
      tags:
        - Notebooks
      summary: Get all notebooks
      description: >-
        Get all notebooks. This can also be used to search for notebooks with a
        particular `query` in the notebook

        `name` or author `handle`.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: author_handle
          in: query
          schema:
            type: string
          description: Return notebooks created by the given `author_handle`.
          example: test@datadoghq.com
        - name: exclude_author_handle
          in: query
          schema:
            type: string
          description: Return notebooks not created by the given `author_handle`.
          example: test@datadoghq.com
        - name: start
          in: query
          schema:
            type: integer
          description: The index of the first notebook you want returned.
          example: '0'
        - name: count
          in: query
          schema:
            type: integer
          description: The number of notebooks to be returned.
          example: '5'
        - name: sort_field
          in: query
          schema:
            type: string
          description: Sort by field `modified`, `name`, or `created`.
          example: modified
        - name: sort_dir
          in: query
          schema:
            type: string
          description: Sort by direction `asc` or `desc`.
          example: desc
        - name: query
          in: query
          schema:
            type: string
          description: >-
            Return only notebooks with `query` string in notebook name or author
            handle.
          example: postmortem
        - name: include_cells
          in: query
          schema:
            type: boolean
          description: >-
            Value of `false` excludes the `cells` and global `time` for each
            notebook.
          example: 'false'
        - name: is_template
          in: query
          schema:
            type: boolean
          description: >-
            True value returns only template notebooks. Default is false
            (returns only non-template notebooks).
          example: 'false'
        - name: type
          in: query
          schema:
            type: string
          description: >-
            If type is provided, returns only notebooks with that metadata type.
            Default does not have type filtering.
          example: investigation
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - id: 123456
                    type: notebooks
                    attributes:
                      name: Example Notebook
                      author:
                        created_at: '1987-09-23T04:27:20.756Z'
                        disabled: false
                        email: irure reprehenderit consectetur
                        handle: reprehenderit ullamco
                        icon: ea commodo amet magna
                        name: eiusmod Ut Excepteur cillum ad
                        status: cupidatat
                        title: mollit exercitation occaecat cillum
                        verified: false
                      cells:
                        - id: abcd1234
                          type: notebook_cells
                          attributes:
                            definition:
                              type: markdown
                              text: |-
                                # Example Header 
                                example content
                        - id: abcd1234
                          type: notebook_cells
                          attributes:
                            definition:
                              type: markdown
                              text: |-
                                # Example Header 
                                example content
                      created: '2021-02-24T23:14:15.173964+00:00'
                      metadata:
                        is_template: false
                        take_snapshots: false
                        type: investigation
                      modified: '2021-02-24T23:15:23.274966+00:00'
                      status: published
                      time:
                        live_span: 1h
                  - id: 123456
                    type: notebooks
                    attributes:
                      name: Example Notebook
                      author:
                        created_at: '2016-06-20T02:13:48.056Z'
                        disabled: false
                        email: enim Lorem
                        handle: eiusmod velit
                        icon: eiusmod amet
                        name: dolore in anim
                        status: cillum amet veniam laboris
                        title: Duis veniam velit
                        verified: false
                      cells:
                        - id: abcd1234
                          type: notebook_cells
                          attributes:
                            definition:
                              type: markdown
                              text: |-
                                # Example Header 
                                example content
                        - id: abcd1234
                          type: notebook_cells
                          attributes:
                            definition:
                              type: markdown
                              text: |-
                                # Example Header 
                                example content
                      created: '2021-02-24T23:14:15.173964+00:00'
                      metadata:
                        is_template: false
                        take_snapshots: false
                        type: investigation
                      modified: '2021-02-24T23:15:23.274966+00:00'
                      status: published
                      time:
                        live_span: 1h
                meta:
                  page:
                    total_count: -5176285
                    total_filtered_count: -92159132
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    post:
      tags:
        - Notebooks
      summary: Create a notebook
      description: Create a notebook using the specified options.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                data:
                  attributes:
                    cells:
                      - attributes:
                          definition:
                            text: |-
                              ## Some test markdown

                              With some example content.
                            type: markdown
                        type: notebook_cells
                      - attributes:
                          definition:
                            requests:
                              - display_type: line
                                q: avg:system.load.1{*}
                                style:
                                  line_type: solid
                                  line_width: normal
                                  palette: dog_classic
                            show_legend: true
                            type: timeseries
                            yaxis:
                              scale: linear
                          graph_size: m
                          split_by:
                            keys: []
                            tags: []
                          time: null
                        type: notebook_cells
                    name: Example Notebook
                    time:
                      live_span: 1h
                  type: notebooks
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  id: 123456
                  type: notebooks
                  attributes:
                    cells:
                      - id: abcd1234
                        type: notebook_cells
                        attributes:
                          definition:
                            type: markdown
                            text: |-
                              # Example Header 
                              example content
                      - id: abcd1234
                        type: notebook_cells
                        attributes:
                          definition:
                            type: markdown
                            text: |-
                              # Example Header 
                              example content
                    time:
                      live_span: 1h
                    name: Example Notebook
                    author:
                      created_at: '1977-02-04T22:08:05.048Z'
                      disabled: true
                      email: ea ut nulla officia
                      handle: est consectetur sed
                      icon: tempor ad consectet
                      name: in sit deserunt Ut
                      status: aliqua con
                      title: fugiat deserunt in aute
                      verified: false
                    created: '2021-02-24T23:14:15.173964+00:00'
                    metadata:
                      is_template: false
                      take_snapshots: false
                      type: investigation
                    modified: '2021-02-24T23:15:23.274966+00:00'
                    status: published
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/notebooks/{notebook_id}:
    delete:
      tags:
        - Notebooks
      summary: Delete a notebook
      description: Delete a notebook using the specified ID.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: notebook_id
          in: path
          schema:
            type: number
          required: true
          description: (Required) Unique ID, assigned when you create the notebook.
          example: '-70569764'
      responses:
        '204':
          description: No Content
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    get:
      tags:
        - Notebooks
      summary: Get a notebook
      description: Get a notebook using the specified notebook ID.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: notebook_id
          in: path
          schema:
            type: number
          required: true
          description: (Required) Unique ID, assigned when you create the notebook.
          example: '-70569764'
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  id: 123456
                  type: notebooks
                  attributes:
                    cells:
                      - id: abcd1234
                        type: notebook_cells
                        attributes:
                          definition:
                            type: markdown
                            text: |-
                              # Example Header 
                              example content
                      - id: abcd1234
                        type: notebook_cells
                        attributes:
                          definition:
                            type: markdown
                            text: |-
                              # Example Header 
                              example content
                    time:
                      live_span: 1h
                    name: Example Notebook
                    author:
                      created_at: '1977-02-04T22:08:05.048Z'
                      disabled: true
                      email: ea ut nulla officia
                      handle: est consectetur sed
                      icon: tempor ad consectet
                      name: in sit deserunt Ut
                      status: aliqua con
                      title: fugiat deserunt in aute
                      verified: false
                    created: '2021-02-24T23:14:15.173964+00:00'
                    metadata:
                      is_template: false
                      take_snapshots: false
                      type: investigation
                    modified: '2021-02-24T23:15:23.274966+00:00'
                    status: published
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    put:
      tags:
        - Notebooks
      summary: Update a notebook
      description: Update a notebook using the specified ID.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                data:
                  attributes:
                    cells:
                      - attributes:
                          definition:
                            text: |-
                              ## Some updated test markdown

                              With some example content.
                            type: markdown
                        type: notebook_cells
                      - attributes:
                          definition:
                            requests:
                              - display_type: bars
                                q: avg:system.load.1{*}
                                style:
                                  line_type: solid
                                  line_width: normal
                                  palette: warm
                            show_legend: true
                            type: timeseries
                            yaxis:
                              scale: linear
                          graph_size: m
                          split_by:
                            keys: []
                            tags: []
                          time: null
                        id: abcd1234
                        type: notebook_cells
                    name: Example Notebook
                    time:
                      live_span: 1h
                  type: notebooks
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: notebook_id
          in: path
          schema:
            type: number
          required: true
          description: (Required) Unique ID, assigned when you create the notebook.
          example: '-70569764'
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  id: 123456
                  type: notebooks
                  attributes:
                    cells:
                      - id: abcd1234
                        type: notebook_cells
                        attributes:
                          definition:
                            type: markdown
                            text: |-
                              # Example Header 
                              example content
                      - id: abcd1234
                        type: notebook_cells
                        attributes:
                          definition:
                            type: markdown
                            text: |-
                              # Example Header 
                              example content
                    time:
                      live_span: 1h
                    name: Example Notebook
                    author:
                      created_at: '1977-02-04T22:08:05.048Z'
                      disabled: true
                      email: ea ut nulla officia
                      handle: est consectetur sed
                      icon: tempor ad consectet
                      name: in sit deserunt Ut
                      status: aliqua con
                      title: fugiat deserunt in aute
                      verified: false
                    created: '2021-02-24T23:14:15.173964+00:00'
                    metadata:
                      is_template: false
                      take_snapshots: false
                      type: investigation
                    modified: '2021-02-24T23:15:23.274966+00:00'
                    status: published
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '409':
          description: Conflict
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v2/integration/opsgenie/services:
    get:
      tags:
        - Opsgenie Integration
      summary: Get all service objects
      description: Get a list of all services from the Datadog Opsgenie integration.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - id: 596da4af-0563-4097-90ff-07230c3f9db3
                    type: opsgenie-service
                    attributes:
                      custom_url: null
                      name: fake-opsgenie-service-name
                      region: us
                  - id: 596da4af-0563-4097-90ff-07230c3f9db3
                    type: opsgenie-service
                    attributes:
                      custom_url: null
                      name: fake-opsgenie-service-name
                      region: us
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    post:
      tags:
        - Opsgenie Integration
      summary: Create a new service object
      description: Create a new service object in the Opsgenie integration.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                data:
                  type: opsgenie-service
                  attributes:
                    name: <string>
                    opsgenie_api_key: <string>
                    region: <string>
                    custom_url: <string>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '201':
          description: Created
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  id: 596da4af-0563-4097-90ff-07230c3f9db3
                  type: opsgenie-service
                  attributes:
                    custom_url: null
                    name: fake-opsgenie-service-name
                    region: us
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '409':
          description: Conflict
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v2/integration/opsgenie/services/{integration_service_id}:
    delete:
      tags:
        - Opsgenie Integration
      summary: Delete a single service object
      description: Delete a single service object in the Datadog Opsgenie integration.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: integration_service_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The UUID of the service.
          example: <string>
      responses:
        '204':
          description: No Content
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    get:
      tags:
        - Opsgenie Integration
      summary: Get a single service object
      description: Get a single service from the Datadog Opsgenie integration.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: integration_service_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The UUID of the service.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  id: 596da4af-0563-4097-90ff-07230c3f9db3
                  type: opsgenie-service
                  attributes:
                    custom_url: null
                    name: fake-opsgenie-service-name
                    region: us
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '409':
          description: Conflict
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    patch:
      tags:
        - Opsgenie Integration
      summary: Update a single service object
      description: Update a single service object in the Datadog Opsgenie integration.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                data:
                  id: <string>
                  type: opsgenie-service
                  attributes:
                    custom_url: <string>
                    name: <string>
                    opsgenie_api_key: <string>
                    region: <string>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: integration_service_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The UUID of the service.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  id: 596da4af-0563-4097-90ff-07230c3f9db3
                  type: opsgenie-service
                  attributes:
                    custom_url: null
                    name: fake-opsgenie-service-name
                    region: us
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '409':
          description: Conflict
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/org:
    get:
      tags:
        - Organizations
      summary: List your managed organizations
      description: This endpoint returns data on your top-level organization.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                orgs:
                  - billing:
                      type: parent_billing
                    created: '2019-09-26T17:28:28Z'
                    description: some description
                    name: New child org
                    public_id: abcdef12345
                    settings:
                      private_widget_share: false
                      saml:
                        enabled: false
                      saml_autocreate_access_role: st
                      saml_autocreate_users_domains:
                        domains:
                          - example.com
                          - example.com
                        enabled: false
                      saml_can_be_enabled: false
                      saml_idp_endpoint: https://my.saml.endpoint
                      saml_idp_initiated_login:
                        enabled: false
                      saml_idp_metadata_uploaded: false
                      saml_login_url: https://my.saml.login.url
                      saml_strict_mode:
                        enabled: false
                    subscription:
                      type: pro
                    trial: false
                  - billing:
                      type: parent_billing
                    created: '2019-09-26T17:28:28Z'
                    description: some description
                    name: New child org
                    public_id: abcdef12345
                    settings:
                      private_widget_share: false
                      saml:
                        enabled: false
                      saml_autocreate_access_role: st
                      saml_autocreate_users_domains:
                        domains:
                          - example.com
                          - example.com
                        enabled: false
                      saml_can_be_enabled: false
                      saml_idp_endpoint: https://my.saml.endpoint
                      saml_idp_initiated_login:
                        enabled: false
                      saml_idp_metadata_uploaded: false
                      saml_login_url: https://my.saml.login.url
                      saml_strict_mode:
                        enabled: false
                    subscription:
                      type: pro
                    trial: false
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    post:
      tags:
        - Organizations
      summary: Create a child organization
      description: >-
        Create a child organization.


        This endpoint requires the

        [multi-organization
        account](https://docs.datadoghq.com/account_management/multi_organization/)

        feature and must be enabled by

        [contacting support](https://docs.datadoghq.com/help/).


        Once a new child organization is created, you can interact with it

        by using the `org.public_id`, `api_key.key`, and

        `application_key.hash` provided in the response.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                name: New child org
                billing:
                  type: parent_billing
                subscription:
                  type: pro
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                api_key:
                  created: '2019-08-02 15:31:07'
                  created_by: john@example.com
                  key: 1234512345123456abcabc912349abcd
                  name: example user
                application_key:
                  hash: 1234512345123459cda4eb9ced49a3d84fd0138c
                  name: example user
                  owner: example.com
                org:
                  billing:
                    type: parent_billing
                  created: '2019-09-26T17:28:28Z'
                  description: some description
                  name: New child org
                  public_id: abcdef12345
                  settings:
                    private_widget_share: false
                    saml:
                      enabled: false
                    saml_autocreate_access_role: st
                    saml_autocreate_users_domains:
                      domains:
                        - example.com
                        - example.com
                      enabled: false
                    saml_can_be_enabled: false
                    saml_idp_endpoint: https://my.saml.endpoint
                    saml_idp_initiated_login:
                      enabled: false
                    saml_idp_metadata_uploaded: false
                    saml_login_url: https://my.saml.login.url
                    saml_strict_mode:
                      enabled: false
                  subscription:
                    type: pro
                  trial: false
                user:
                  access_role: st
                  disabled: false
                  email: test@datadoghq.com
                  handle: test@datadoghq.com
                  icon: /path/to/matching/gravatar/icon
                  name: test user
                  verified: true
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/org/{public_id}:
    get:
      tags:
        - Organizations
      summary: Get organization information
      description: Get organization information.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: public_id
          in: path
          schema:
            type: string
          required: true
          description: >-
            (Required) The `public_id` of the organization you are operating
            within.
          example: abc123
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                org:
                  billing:
                    type: parent_billing
                  created: '2019-09-26T17:28:28Z'
                  description: some description
                  name: New child org
                  public_id: abcdef12345
                  settings:
                    private_widget_share: false
                    saml:
                      enabled: false
                    saml_autocreate_access_role: st
                    saml_autocreate_users_domains:
                      domains:
                        - example.com
                        - example.com
                      enabled: false
                    saml_can_be_enabled: false
                    saml_idp_endpoint: https://my.saml.endpoint
                    saml_idp_initiated_login:
                      enabled: false
                    saml_idp_metadata_uploaded: false
                    saml_login_url: https://my.saml.login.url
                    saml_strict_mode:
                      enabled: false
                  subscription:
                    type: pro
                  trial: false
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    put:
      tags:
        - Organizations
      summary: Update your organization
      description: Update your organization.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                billing:
                  type: parent_billing
                description: some description
                name: New child org
                public_id: abcdef12345
                settings:
                  private_widget_share: false
                  saml:
                    enabled: false
                  saml_autocreate_access_role: st
                  saml_autocreate_users_domains:
                    domains:
                      - example.com
                      - example.com
                    enabled: false
                  saml_can_be_enabled: false
                  saml_idp_endpoint: https://my.saml.endpoint
                  saml_idp_initiated_login:
                    enabled: false
                  saml_idp_metadata_uploaded: false
                  saml_login_url: https://my.saml.login.url
                  saml_strict_mode:
                    enabled: false
                subscription:
                  type: pro
                trial: false
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: public_id
          in: path
          schema:
            type: string
          required: true
          description: >-
            (Required) The `public_id` of the organization you are operating
            within.
          example: abc123
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                org:
                  billing:
                    type: parent_billing
                  created: '2019-09-26T17:28:28Z'
                  description: some description
                  name: New child org
                  public_id: abcdef12345
                  settings:
                    private_widget_share: false
                    saml:
                      enabled: false
                    saml_autocreate_access_role: st
                    saml_autocreate_users_domains:
                      domains:
                        - example.com
                        - example.com
                      enabled: false
                    saml_can_be_enabled: false
                    saml_idp_endpoint: https://my.saml.endpoint
                    saml_idp_initiated_login:
                      enabled: false
                    saml_idp_metadata_uploaded: false
                    saml_login_url: https://my.saml.login.url
                    saml_strict_mode:
                      enabled: false
                  subscription:
                    type: pro
                  trial: false
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/org/{public_id}/downgrade:
    post:
      tags:
        - Organizations
      summary: Spin-off Child Organization
      description: >-
        Only available for MSP customers. Removes a child organization from the
        hierarchy of the master organization and places the child organization
        on a 30-day trial.
      requestBody:
        content: {}
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: public_id
          in: path
          schema:
            type: string
          required: true
          description: >-
            (Required) The `public_id` of the organization you are operating
            within.
          example: abc123
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                message: ad velit non
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v2/saml_configurations/idp_metadata:
    post:
      tags:
        - Organizations
      summary: Upload IdP metadata
      description: >-
        Endpoint for uploading IdP metadata for SAML setup.


        Use this endpoint to upload or replace IdP metadata for SAML login
        configuration.
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                idp_file:
                  type: string
                  description: The IdP metadata XML file
                  format: binary
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: multipart/form-data
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/integration/pagerduty/configuration/services:
    post:
      tags:
        - PagerDuty Integration
      summary: Create a new service object
      description: Create a new service object in the PagerDuty integration.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                service_name: ''
                service_key: ''
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '201':
          description: Created
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                service_name: ''
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/integration/pagerduty/configuration/services/{service_name}:
    delete:
      tags:
        - PagerDuty Integration
      summary: Delete a single service object
      description: Delete a single service object in the Datadog-PagerDuty integration.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: service_name
          in: path
          schema:
            type: string
          required: true
          description: (Required) The service name
          example: proident
      responses:
        '204':
          description: No Content
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    get:
      tags:
        - PagerDuty Integration
      summary: Get a single service object
      description: Get service name in the Datadog-PagerDuty integration.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: service_name
          in: path
          schema:
            type: string
          required: true
          description: (Required) The service name.
          example: proident
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                service_name: ''
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    put:
      tags:
        - PagerDuty Integration
      summary: Update a single service object
      description: Update a single service object in the Datadog-PagerDuty integration.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                service_key: ''
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: service_name
          in: path
          schema:
            type: string
          required: true
          description: (Required) The service name
          example: proident
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v2/processes:
    get:
      tags:
        - Processes
      summary: Get all processes
      description: Get all processes for your organization.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: search
          in: query
          schema:
            type: string
          description: String to search processes by.
          example: <string>
        - name: tags
          in: query
          schema:
            type: string
          description: Comma-separated list of tags to filter processes by.
          example: <string>
        - name: from
          in: query
          schema:
            type: string
          description: >-
            Unix timestamp (number of seconds since epoch) of the start of the
            query window.

            If not provided, the start of the query window will be 15 minutes
            before the `to` timestamp. If neither

            `from` nor `to` are provided, the query window will be `[now - 15m,
            now]`.
          example: <long>
        - name: to
          in: query
          schema:
            type: string
          description: >-
            Unix timestamp (number of seconds since epoch) of the end of the
            query window.

            If not provided, the end of the query window will be 15 minutes
            after the `from` timestamp. If neither

            `from` nor `to` are provided, the query window will be `[now - 15m,
            now]`.
          example: <long>
        - name: page[limit]
          in: query
          schema:
            type: integer
          description: Maximum number of results returned.
          example: '1000'
        - name: page[cursor]
          in: query
          schema:
            type: string
          description: >-
            String to query the next page of results.

            This key is provided with each valid response from the API in
            `meta.page.after`.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - attributes:
                      cmdline: do Ut laboris ut
                      host: Lorem irure anim est non
                      pid: 40324843
                      ppid: -3127012
                      start: voluptate esse
                      tags:
                        - dolore Excepteur nisi ipsum nostrud
                        - do in velit exercitation
                      timestamp: reprehenderit quis et
                      user: magna minim dolore
                    id: nostrud
                    type: process
                  - attributes:
                      cmdline: fugiat dolor officia dolore
                      host: quis dolor in
                      pid: 66274826
                      ppid: 81274761
                      start: quis ad mollit
                      tags:
                        - incididunt ea ex
                        - elit exer
                      timestamp: ut
                      user: dolor
                    id: anim sit
                    type: process
                meta:
                  page:
                    after: 911abf1204838d9cdfcb9a96d0b6a1bd03e1b514074f1ce1737c4cbd
                    size: 1512
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v2/permissions:
    get:
      tags:
        - Roles
      summary: List permissions
      description: Returns a list of all permissions, including name, description, and ID.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - type: permissions
                    attributes:
                      created: '1969-08-13T07:47:40.986Z'
                      description: in esse laborum nostrud sit
                      display_name: et
                      display_type: nostrud Lorem culpa
                      group_name: laborum Ut voluptate fugiat
                      name: cupidata
                      restricted: false
                    id: et Excepteur occaecat
                  - type: permissions
                    attributes:
                      created: '1951-02-27T19:16:21.452Z'
                      description: voluptate amet
                      display_name: amet enim ad
                      display_type: enim id cupidatat
                      group_name: in eu occaecat anim proident
                      name: elit consectetur nulla cupidatat
                      restricted: true
                    id: officia sint
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v2/roles:
    get:
      tags:
        - Roles
      summary: List roles
      description: Returns all roles, including their names and their unique identifiers.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: page[size]
          in: query
          schema:
            type: integer
          description: Size for a given page.
          example: '10'
        - name: page[number]
          in: query
          schema:
            type: integer
          description: Specific page number to return.
          example: '0'
        - name: sort
          in: query
          schema:
            type: string
          description: >-
            Sort roles depending on the given field. Sort order is **ascending**
            by default.

            Sort order is **descending** if the field is prefixed by a negative
            sign, for example:

            `sort=-name`.
          example: name
        - name: filter
          in: query
          schema:
            type: string
          description: Filter all roles by the given string.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - type: roles
                    attributes:
                      created_at: '1963-12-19T20:46:55.238Z'
                      modified_at: '1960-05-31T03:56:38.328Z'
                      name: minim do voluptate mollit
                      user_count: 83201105
                    id: velit laboris ipsum deserunt
                    relationships:
                      permissions:
                        data:
                          - id: ullamco enim
                            type: permissions
                          - id: sunt pariatur id Ut dolore
                            type: permissions
                  - type: roles
                    attributes:
                      created_at: '2001-03-11T06:17:01.142Z'
                      modified_at: '1960-10-18T03:12:45.140Z'
                      name: in quis voluptate
                      user_count: 23458115
                    id: dolore magna ea quis culpa
                    relationships:
                      permissions:
                        data:
                          - id: culpa fugiat eu sit
                            type: permissions
                          - id: enim non
                            type: permissions
                meta:
                  page:
                    total_count: 11851638
                    total_filtered_count: 18283781
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    post:
      tags:
        - Roles
      summary: Create role
      description: Create a new role for your organization.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                data:
                  attributes:
                    name: <string>
                  relationships:
                    permissions:
                      data:
                        - id: <string>
                          type: permissions
                        - id: <string>
                          type: permissions
                    users:
                      data:
                        - id: <string>
                          type: users
                        - id: <string>
                          type: users
                  type: roles
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  type: roles
                  attributes:
                    name: developers
                    created_at: '1996-09-27T11:34:25.522Z'
                    modified_at: '1971-02-14T06:26:20.784Z'
                  id: sed ut sunt occaecat esse
                  relationships:
                    permissions:
                      data:
                        - id: cillum
                          type: permissions
                        - id: dolore in sunt tempor
                          type: permissions
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v2/roles/{role_id}:
    delete:
      tags:
        - Roles
      summary: Delete role
      description: Disables a role.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: role_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The unique identifier of the role.
          example: <string>
      responses:
        '204':
          description: No Content
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    get:
      tags:
        - Roles
      summary: Get a role
      description: Get a role in the organization specified by the role’s `role_id`.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: role_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The unique identifier of the role.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  type: roles
                  attributes:
                    created_at: '1943-05-10T07:28:48.347Z'
                    modified_at: '2014-05-07T09:49:58.661Z'
                    name: Ut irure nostrud qui dolor
                    user_count: -54615385
                  id: labore fu
                  relationships:
                    permissions:
                      data:
                        - id: culpa aliqua
                          type: permissions
                        - id: anim velit
                          type: permissions
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    patch:
      tags:
        - Roles
      summary: Update a role
      description: >-
        Edit a role. Can only be used with application keys belonging to
        administrators.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                data:
                  attributes:
                    name: <string>
                  type: roles
                  id: <string>
                  relationships:
                    permissions:
                      data:
                        - id: <string>
                          type: permissions
                        - id: <string>
                          type: permissions
                    users:
                      data:
                        - id: <string>
                          type: users
                        - id: <string>
                          type: users
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: role_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The unique identifier of the role.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  type: roles
                  attributes:
                    created_at: '1944-09-13T23:12:04.778Z'
                    modified_at: '1988-04-22T09:30:36.080Z'
                    name: occaecat pariatur
                  id: eu proident occaecat enim
                  relationships:
                    permissions:
                      data:
                        - id: officia
                          type: permissions
                        - id: voluptate cupidatat dolor
                          type: permissions
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v2/roles/{role_id}/clone:
    post:
      tags:
        - Roles
      summary: Create a new role by cloning an existing role
      description: Clone an existing role
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                data:
                  type: roles
                  attributes:
                    name: <string>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: role_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The unique identifier of the role.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  type: roles
                  attributes:
                    created_at: '1943-05-10T07:28:48.347Z'
                    modified_at: '2014-05-07T09:49:58.661Z'
                    name: Ut irure nostrud qui dolor
                    user_count: -54615385
                  id: labore fu
                  relationships:
                    permissions:
                      data:
                        - id: culpa aliqua
                          type: permissions
                        - id: anim velit
                          type: permissions
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '409':
          description: Conflict
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v2/roles/{role_id}/permissions:
    delete:
      tags:
        - Roles
      summary: Revoke permission
      description: Removes a permission from a role.
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: role_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The unique identifier of the role.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - type: permissions
                    attributes:
                      created: '1969-08-13T07:47:40.986Z'
                      description: in esse laborum nostrud sit
                      display_name: et
                      display_type: nostrud Lorem culpa
                      group_name: laborum Ut voluptate fugiat
                      name: cupidata
                      restricted: false
                    id: et Excepteur occaecat
                  - type: permissions
                    attributes:
                      created: '1951-02-27T19:16:21.452Z'
                      description: voluptate amet
                      display_name: amet enim ad
                      display_type: enim id cupidatat
                      group_name: in eu occaecat anim proident
                      name: elit consectetur nulla cupidatat
                      restricted: true
                    id: officia sint
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    get:
      tags:
        - Roles
      summary: List permissions for a role
      description: Returns a list of all permissions for a single role.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: role_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The unique identifier of the role.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - type: permissions
                    attributes:
                      created: '1969-08-13T07:47:40.986Z'
                      description: in esse laborum nostrud sit
                      display_name: et
                      display_type: nostrud Lorem culpa
                      group_name: laborum Ut voluptate fugiat
                      name: cupidata
                      restricted: false
                    id: et Excepteur occaecat
                  - type: permissions
                    attributes:
                      created: '1951-02-27T19:16:21.452Z'
                      description: voluptate amet
                      display_name: amet enim ad
                      display_type: enim id cupidatat
                      group_name: in eu occaecat anim proident
                      name: elit consectetur nulla cupidatat
                      restricted: true
                    id: officia sint
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    post:
      tags:
        - Roles
      summary: Grant permission to a role
      description: Adds a permission to a role.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                data:
                  id: <string>
                  type: permissions
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: role_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The unique identifier of the role.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - type: permissions
                    attributes:
                      created: '1969-08-13T07:47:40.986Z'
                      description: in esse laborum nostrud sit
                      display_name: et
                      display_type: nostrud Lorem culpa
                      group_name: laborum Ut voluptate fugiat
                      name: cupidata
                      restricted: false
                    id: et Excepteur occaecat
                  - type: permissions
                    attributes:
                      created: '1951-02-27T19:16:21.452Z'
                      description: voluptate amet
                      display_name: amet enim ad
                      display_type: enim id cupidatat
                      group_name: in eu occaecat anim proident
                      name: elit consectetur nulla cupidatat
                      restricted: true
                    id: officia sint
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v2/roles/{role_id}/users:
    delete:
      tags:
        - Roles
      summary: Remove a user from a role
      description: Removes a user from a role.
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: role_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The unique identifier of the role.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - attributes:
                      created_at: '1988-07-21T00:01:31.901Z'
                      disabled: true
                      email: cupidatat adipisicing
                      handle: occaecat id ut
                      icon: incididunt ullamco consectetur
                      modified_at: '2009-08-26T20:53:22.995Z'
                      name: aute sint
                      service_account: false
                      status: mollit laborum adipisicing ullamco laboris
                      title: culpa Ut cillum sed
                      verified: false
                    id: deserunt
                    relationships:
                      org:
                        data:
                          id: 00000000-0000-beef-0000-000000000000
                          type: orgs
                      other_orgs:
                        data: []
                      other_users:
                        data: []
                      roles:
                        data:
                          - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                            type: roles
                          - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                            type: roles
                    type: users
                  - attributes:
                      created_at: '1984-05-23T20:00:43.014Z'
                      disabled: false
                      email: ''
                      handle: commodo adipisicing in ea
                      icon: et nostrud ex exercitation
                      modified_at: '1960-12-10T23:29:28.231Z'
                      name: Lorem commodo
                      service_account: false
                      status: nulla quis exercitation
                      title: consequat nostrud ut cillum do
                      verified: false
                    id: nisi laborum minim dolor
                    relationships:
                      org:
                        data:
                          id: 00000000-0000-beef-0000-000000000000
                          type: orgs
                      other_orgs:
                        data: []
                      other_users:
                        data: []
                      roles:
                        data:
                          - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                            type: roles
                          - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                            type: roles
                    type: users
                included:
                  - type: orgs
                    attributes:
                      created_at: '1997-07-08T20:40:17.971Z'
                      description: ea sint nulla id
                      disabled: false
                      modified_at: '2012-03-13T00:44:26.382Z'
                      name: Lorem magna tempor
                      public_id: Ut veniam pariatur exercitation
                      sharing: quis
                      url: id
                    id: dolor ut labore Duis
                  - type: orgs
                    attributes:
                      created_at: '1967-11-04T05:34:07.014Z'
                      description: quis consequat
                      disabled: false
                      modified_at: '1966-11-09T05:59:40.254Z'
                      name: cupidatat cillum enim
                      public_id: qui consectetur sed
                      sharing: proident nostrud esse nulla
                      url: quis proident et
                    id: sunt cillum est anim dolor
                meta:
                  page:
                    total_count: 70674740
                    total_filtered_count: 18750352
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    get:
      tags:
        - Roles
      summary: Get all users of a role
      description: Gets all users of a role.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: page[size]
          in: query
          schema:
            type: integer
          description: Size for a given page.
          example: '10'
        - name: page[number]
          in: query
          schema:
            type: integer
          description: Specific page number to return.
          example: '0'
        - name: sort
          in: query
          schema:
            type: string
          description: >-
            User attribute to order results by. Sort order is **ascending** by
            default.

            Sort order is **descending** if the field is prefixed by a negative
            sign,

            for example `sort=-name`. Options: `name`, `email`, `status`.
          example: name
        - name: filter
          in: query
          schema:
            type: string
          description: Filter all users by the given string. Defaults to no filtering.
          example: <string>
        - name: role_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The unique identifier of the role.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - attributes:
                      created_at: '1988-07-21T00:01:31.901Z'
                      disabled: true
                      email: cupidatat adipisicing
                      handle: occaecat id ut
                      icon: incididunt ullamco consectetur
                      modified_at: '2009-08-26T20:53:22.995Z'
                      name: aute sint
                      service_account: false
                      status: mollit laborum adipisicing ullamco laboris
                      title: culpa Ut cillum sed
                      verified: false
                    id: deserunt
                    relationships:
                      org:
                        data:
                          id: 00000000-0000-beef-0000-000000000000
                          type: orgs
                      other_orgs:
                        data: []
                      other_users:
                        data: []
                      roles:
                        data:
                          - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                            type: roles
                          - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                            type: roles
                    type: users
                  - attributes:
                      created_at: '1984-05-23T20:00:43.014Z'
                      disabled: false
                      email: ''
                      handle: commodo adipisicing in ea
                      icon: et nostrud ex exercitation
                      modified_at: '1960-12-10T23:29:28.231Z'
                      name: Lorem commodo
                      service_account: false
                      status: nulla quis exercitation
                      title: consequat nostrud ut cillum do
                      verified: false
                    id: nisi laborum minim dolor
                    relationships:
                      org:
                        data:
                          id: 00000000-0000-beef-0000-000000000000
                          type: orgs
                      other_orgs:
                        data: []
                      other_users:
                        data: []
                      roles:
                        data:
                          - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                            type: roles
                          - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                            type: roles
                    type: users
                included:
                  - type: orgs
                    attributes:
                      created_at: '1997-07-08T20:40:17.971Z'
                      description: ea sint nulla id
                      disabled: false
                      modified_at: '2012-03-13T00:44:26.382Z'
                      name: Lorem magna tempor
                      public_id: Ut veniam pariatur exercitation
                      sharing: quis
                      url: id
                    id: dolor ut labore Duis
                  - type: orgs
                    attributes:
                      created_at: '1967-11-04T05:34:07.014Z'
                      description: quis consequat
                      disabled: false
                      modified_at: '1966-11-09T05:59:40.254Z'
                      name: cupidatat cillum enim
                      public_id: qui consectetur sed
                      sharing: proident nostrud esse nulla
                      url: quis proident et
                    id: sunt cillum est anim dolor
                meta:
                  page:
                    total_count: 70674740
                    total_filtered_count: 18750352
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    post:
      tags:
        - Roles
      summary: Add a user to a role
      description: Adds a user to a role.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                data:
                  id: <string>
                  type: users
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: role_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The unique identifier of the role.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - attributes:
                      created_at: '1988-07-21T00:01:31.901Z'
                      disabled: true
                      email: cupidatat adipisicing
                      handle: occaecat id ut
                      icon: incididunt ullamco consectetur
                      modified_at: '2009-08-26T20:53:22.995Z'
                      name: aute sint
                      service_account: false
                      status: mollit laborum adipisicing ullamco laboris
                      title: culpa Ut cillum sed
                      verified: false
                    id: deserunt
                    relationships:
                      org:
                        data:
                          id: 00000000-0000-beef-0000-000000000000
                          type: orgs
                      other_orgs:
                        data: []
                      other_users:
                        data: []
                      roles:
                        data:
                          - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                            type: roles
                          - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                            type: roles
                    type: users
                  - attributes:
                      created_at: '1984-05-23T20:00:43.014Z'
                      disabled: false
                      email: ''
                      handle: commodo adipisicing in ea
                      icon: et nostrud ex exercitation
                      modified_at: '1960-12-10T23:29:28.231Z'
                      name: Lorem commodo
                      service_account: false
                      status: nulla quis exercitation
                      title: consequat nostrud ut cillum do
                      verified: false
                    id: nisi laborum minim dolor
                    relationships:
                      org:
                        data:
                          id: 00000000-0000-beef-0000-000000000000
                          type: orgs
                      other_orgs:
                        data: []
                      other_users:
                        data: []
                      roles:
                        data:
                          - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                            type: roles
                          - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                            type: roles
                    type: users
                included:
                  - type: orgs
                    attributes:
                      created_at: '1997-07-08T20:40:17.971Z'
                      description: ea sint nulla id
                      disabled: false
                      modified_at: '2012-03-13T00:44:26.382Z'
                      name: Lorem magna tempor
                      public_id: Ut veniam pariatur exercitation
                      sharing: quis
                      url: id
                    id: dolor ut labore Duis
                  - type: orgs
                    attributes:
                      created_at: '1967-11-04T05:34:07.014Z'
                      description: quis consequat
                      disabled: false
                      modified_at: '1966-11-09T05:59:40.254Z'
                      name: cupidatat cillum enim
                      public_id: qui consectetur sed
                      sharing: proident nostrud esse nulla
                      url: quis proident et
                    id: sunt cillum est anim dolor
                meta:
                  page:
                    total_count: 70674740
                    total_filtered_count: 18750352
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v2/rum/analytics/aggregate:
    post:
      tags:
        - RUM
      summary: Aggregate RUM events
      description: >-
        The API endpoint to aggregate RUM events into buckets of computed
        metrics and timeseries.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                compute:
                  - aggregation: <string>
                    interval: <string>
                    metric: <string>
                    type: total
                  - aggregation: <string>
                    interval: <string>
                    metric: <string>
                    type: total
                filter:
                  from: now-15m
                  query: '*'
                  to: now
                group_by:
                  - facet: <string>
                    histogram:
                      interval: <double>
                      min: <double>
                      max: <double>
                    limit: 10
                    missing: <string>
                    sort:
                      aggregation: <string>
                      metric: <string>
                      order: <string>
                      type: alphabetical
                    total: <boolean>
                  - facet: <string>
                    histogram:
                      interval: <double>
                      min: <double>
                      max: <double>
                    limit: 10
                    missing: <string>
                    sort:
                      aggregation: <string>
                      metric: <string>
                      order: <string>
                      type: alphabetical
                    total: <boolean>
                options:
                  time_offset: <long>
                  timezone: UTC
                page:
                  cursor: <string>
                  limit: 10
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  buckets:
                    - by:
                        '@session.type': user
                        '@type': view
                      computes:
                        consequat9: ullamco et ad laboris nostrud
                    - by:
                        '@session.type': user
                        '@type': view
                      computes:
                        sed53_: id irure
                        Excepteur__: velit id dolore ven
                links:
                  next: >-
                    https://app.datadoghq.com/api/v2/rum/event?filter[query]=foo&page[cursor]=eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==
                meta:
                  elapsed: 132
                  page:
                    after: >-
                      eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==
                  request_id: MWlFUjVaWGZTTTZPYzM0VXp1OXU2d3xLSVpEMjZKQ0VKUTI0dEYtM3RSOFVR
                  status: done
                  warnings:
                    - code: unknown_index
                      detail: 'indexes: foo, bar'
                      title: >-
                        One or several indexes are missing or invalid, results
                        hold data from the other indexes
                    - code: unknown_index
                      detail: 'indexes: foo, bar'
                      title: >-
                        One or several indexes are missing or invalid, results
                        hold data from the other indexes
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v2/rum/applications:
    get:
      tags:
        - RUM
      summary: List all the RUM applications
      description: List all the RUM applications in your organization.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - attributes:
                      application_id: abcd1234-0000-0000-abcd-1234abcd5678
                      created_at: 1659479836169
                      created_by_handle: john.doe
                      name: my_rum_application
                      org_id: 999
                      type: browser
                      updated_at: 1659479836169
                      updated_by_handle: jane.doe
                      hash: abcd1234efgh5678ijkl90abcd1234efgh0
                    id: abcd1234-0000-0000-abcd-1234abcd5678
                    type: rum_application
                  - attributes:
                      application_id: abcd1234-0000-0000-abcd-1234abcd5678
                      created_at: 1659479836169
                      created_by_handle: john.doe
                      name: my_rum_application
                      org_id: 999
                      type: browser
                      updated_at: 1659479836169
                      updated_by_handle: jane.doe
                      hash: abcd1234efgh5678ijkl90abcd1234efgh0
                    id: abcd1234-0000-0000-abcd-1234abcd5678
                    type: rum_application
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    post:
      tags:
        - RUM
      summary: Create a new RUM application
      description: Create a new RUM application in your organization.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                data:
                  attributes:
                    name: <string>
                    type: <string>
                  type: rum_application_create
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  attributes:
                    application_id: abcd1234-0000-0000-abcd-1234abcd5678
                    created_at: 1659479836169
                    created_by_handle: john.doe
                    name: my_rum_application
                    org_id: 999
                    type: browser
                    updated_at: 1659479836169
                    updated_by_handle: jane.doe
                    hash: abcd1234efgh5678ijkl90abcd1234efgh0
                  id: abcd1234-0000-0000-abcd-1234abcd5678
                  type: rum_application
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v2/rum/applications/{id}:
    delete:
      tags:
        - RUM
      summary: Delete a RUM application
      description: Delete an existing RUM application in your organization.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: id
          in: path
          schema:
            type: string
          required: true
          description: (Required) RUM application ID.
          example: <string>
      responses:
        '204':
          description: No Content
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    get:
      tags:
        - RUM
      summary: Get a RUM application
      description: Get the RUM application with given ID in your organization.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: id
          in: path
          schema:
            type: string
          required: true
          description: (Required) RUM application ID.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  attributes:
                    application_id: abcd1234-0000-0000-abcd-1234abcd5678
                    created_at: 1659479836169
                    created_by_handle: john.doe
                    name: my_rum_application
                    org_id: 999
                    type: browser
                    updated_at: 1659479836169
                    updated_by_handle: jane.doe
                    hash: abcd1234efgh5678ijkl90abcd1234efgh0
                  id: abcd1234-0000-0000-abcd-1234abcd5678
                  type: rum_application
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    patch:
      tags:
        - RUM
      summary: Update a RUM application
      description: Update the RUM application with given ID in your organization.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                data:
                  id: <string>
                  type: rum_application_update
                  attributes:
                    name: <string>
                    type: <string>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: id
          in: path
          schema:
            type: string
          required: true
          description: (Required) RUM application ID.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  attributes:
                    application_id: abcd1234-0000-0000-abcd-1234abcd5678
                    created_at: 1659479836169
                    created_by_handle: john.doe
                    name: my_rum_application
                    org_id: 999
                    type: browser
                    updated_at: 1659479836169
                    updated_by_handle: jane.doe
                    hash: abcd1234efgh5678ijkl90abcd1234efgh0
                  id: abcd1234-0000-0000-abcd-1234abcd5678
                  type: rum_application
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v2/rum/events:
    get:
      tags:
        - RUM
      summary: Get a list of RUM events
      description: >-
        List endpoint returns events that match a RUM search query.

        [Results are paginated][1].


        Use this endpoint to see your latest RUM events.


        [1]:
        https://docs.datadoghq.com/logs/guide/collect-multiple-logs-with-pagination
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: filter[query]
          in: query
          schema:
            type: string
          description: Search query following RUM syntax.
          example: <string>
        - name: filter[from]
          in: query
          schema:
            type: string
          description: Minimum timestamp for requested events.
          example: <dateTime>
        - name: filter[to]
          in: query
          schema:
            type: string
          description: Maximum timestamp for requested events.
          example: <dateTime>
        - name: sort
          in: query
          schema:
            type: string
          description: Order of events in results.
          example: <string>
        - name: page[cursor]
          in: query
          schema:
            type: string
          description: List following results with a cursor provided in the previous query.
          example: <string>
        - name: page[limit]
          in: query
          schema:
            type: integer
          description: Maximum number of events in the response.
          example: '10'
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - attributes:
                      attributes:
                        qui_ac: {}
                      service: web-app
                      tags:
                        - team:A
                      timestamp: '2019-01-02T09:42:36.320Z'
                    id: AAAAAWgN8Xwgr1vKDQAAAABBV2dOOFh3ZzZobm1mWXJFYTR0OA
                    type: rum
                  - attributes:
                      attributes:
                        euc13: {}
                        pariatur39c: {}
                        dolore_: {}
                        ipsum__c: {}
                      service: web-app
                      tags:
                        - team:A
                      timestamp: '2019-01-02T09:42:36.320Z'
                    id: AAAAAWgN8Xwgr1vKDQAAAABBV2dOOFh3ZzZobm1mWXJFYTR0OA
                    type: rum
                links:
                  next: >-
                    https://app.datadoghq.com/api/v2/rum/event?filter[query]=foo&page[cursor]=eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==
                meta:
                  elapsed: 132
                  page:
                    after: >-
                      eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==
                  request_id: MWlFUjVaWGZTTTZPYzM0VXp1OXU2d3xLSVpEMjZKQ0VKUTI0dEYtM3RSOFVR
                  status: done
                  warnings:
                    - code: unknown_index
                      detail: 'indexes: foo, bar'
                      title: >-
                        One or several indexes are missing or invalid, results
                        hold data from the other indexes
                    - code: unknown_index
                      detail: 'indexes: foo, bar'
                      title: >-
                        One or several indexes are missing or invalid, results
                        hold data from the other indexes
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v2/rum/events/search:
    post:
      tags:
        - RUM
      summary: Search RUM events
      description: >-
        List endpoint returns RUM events that match a RUM search query.

        [Results are paginated][1].


        Use this endpoint to build complex RUM events filtering and search.


        [1]:
        https://docs.datadoghq.com/logs/guide/collect-multiple-logs-with-pagination
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                filter:
                  from: now-15m
                  query: '*'
                  to: now
                options:
                  time_offset: <long>
                  timezone: UTC
                page:
                  cursor: <string>
                  limit: 10
                sort: <string>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - attributes:
                      attributes:
                        qui_ac: {}
                      service: web-app
                      tags:
                        - team:A
                      timestamp: '2019-01-02T09:42:36.320Z'
                    id: AAAAAWgN8Xwgr1vKDQAAAABBV2dOOFh3ZzZobm1mWXJFYTR0OA
                    type: rum
                  - attributes:
                      attributes:
                        euc13: {}
                        pariatur39c: {}
                        dolore_: {}
                        ipsum__c: {}
                      service: web-app
                      tags:
                        - team:A
                      timestamp: '2019-01-02T09:42:36.320Z'
                    id: AAAAAWgN8Xwgr1vKDQAAAABBV2dOOFh3ZzZobm1mWXJFYTR0OA
                    type: rum
                links:
                  next: >-
                    https://app.datadoghq.com/api/v2/rum/event?filter[query]=foo&page[cursor]=eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==
                meta:
                  elapsed: 132
                  page:
                    after: >-
                      eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==
                  request_id: MWlFUjVaWGZTTTZPYzM0VXp1OXU2d3xLSVpEMjZKQ0VKUTI0dEYtM3RSOFVR
                  status: done
                  warnings:
                    - code: unknown_index
                      detail: 'indexes: foo, bar'
                      title: >-
                        One or several indexes are missing or invalid, results
                        hold data from the other indexes
                    - code: unknown_index
                      detail: 'indexes: foo, bar'
                      title: >-
                        One or several indexes are missing or invalid, results
                        hold data from the other indexes
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/security_analytics/signals/{signal_id}/add_to_incident:
    patch:
      tags:
        - Security Monitoring
      summary: Add a security signal to an incident
      description: >-
        Add a security signal to an incident. This makes it possible to search
        for signals by incident within the signal explorer and to view the
        signals on the incident timeline.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                incident_id: 2066
                add_to_signal_timeline: true
                version: 45423350
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: signal_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the signal.
          example: proident
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                status: ad
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v2/security_monitoring/rules:
    get:
      tags:
        - Security Monitoring
      summary: List rules
      description: List rules.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: page[size]
          in: query
          schema:
            type: integer
          description: Size for a given page.
          example: '10'
        - name: page[number]
          in: query
          schema:
            type: integer
          description: Specific page number to return.
          example: '0'
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - cases:
                      - condition: Duis reprehenderit
                        name: irure in
                        notifications:
                          - eu eiusmod incididunt est
                          - irure dolore incididunt
                        status: critical
                      - condition: cupidatat laborum
                        name: dolore laboris consectetur amet ani
                        notifications:
                          - adipisicing amet ad
                          - e
                        status: critical
                    createdAt: -76344217
                    creationAuthorId: -84112897
                    filters:
                      - action: require
                        query: amet in labore magna
                      - action: require
                        query: pariatur dol
                    hasExtendedTitle: true
                    id: dolore l
                    isDefault: true
                    isDeleted: false
                    isEnabled: false
                    message: tempor sit consectetur ea
                    name: Duis elit esse dolore
                    options:
                      decreaseCriticalityBasedOnEnv: false
                      detectionMethod: impossible_travel
                      evaluationWindow: 60
                      hardcodedEvaluatorType: log4shell
                      impossibleTravelOptions:
                        baselineUserLocations: true
                      keepAlive: 10800
                      maxSignalDuration: 43200
                      newValueOptions:
                        forgetAfter: 1
                        learningDuration: 0
                        learningMethod: duration
                        learningThreshold: 0
                    queries:
                      - query: a > 3
                        aggregation: event_count
                        distinctFields:
                          - officia aliquip
                          - minim nostrud Duis
                        groupByFields:
                          - occaecat Excepteur esse
                          - in commodo
                        metric: voluptate id ea dolor
                        metrics:
                          - sunt sed
                          - ut voluptate
                        name: elit
                      - query: a > 3
                        aggregation: geo_data
                        distinctFields:
                          - enim ea nostrud sint
                          - esse non officia nostrud
                        groupByFields:
                          - deserunt
                          - eiusmod esse
                        metric: officia deserunt
                        metrics:
                          - magna do ut voluptate aut
                          - ad laborum
                        name: ipsum anim cupidatat dolore
                    tags:
                      - proident magna enim
                      - non
                    type: cloud_configuration
                    updateAuthorId: -20608173
                    version: 56481861
                  - cases:
                      - condition: fugiat quis sit nulla
                        name: nostrud
                        notifications:
                          - dolor dolore minim fugiat
                          - sit labore
                        status: critical
                      - condition: id dolore labore anim
                        name: ipsum nulla cupidatat exercitation
                        notifications:
                          - nulla non proident aute
                          - anim id dolore eu et
                        status: critical
                    createdAt: -95248979
                    creationAuthorId: 31834188
                    filters:
                      - action: suppress
                        query: ut sint id in consequat
                      - action: require
                        query: et amet
                    hasExtendedTitle: false
                    id: Lorem Duis Ut
                    isDefault: false
                    isDeleted: false
                    isEnabled: false
                    message: proident
                    name: ut mollit
                    options:
                      decreaseCriticalityBasedOnEnv: false
                      detectionMethod: threshold
                      evaluationWindow: 600
                      hardcodedEvaluatorType: log4shell
                      impossibleTravelOptions:
                        baselineUserLocations: true
                      keepAlive: 21600
                      maxSignalDuration: 60
                      newValueOptions:
                        forgetAfter: 14
                        learningDuration: 0
                        learningMethod: duration
                        learningThreshold: 0
                    queries:
                      - query: a > 3
                        aggregation: event_count
                        distinctFields:
                          - non ut
                          - nostrud labore quis sit
                        groupByFields:
                          - dolor ex qui
                          - tempor
                        metric: ad qui
                        metrics:
                          - voluptate
                          - cupidatat ex
                        name: ut velit incididunt ipsum
                      - query: a > 3
                        aggregation: geo_data
                        distinctFields:
                          - amet voluptate
                          - in Ut velit voluptate
                        groupByFields:
                          - ullam
                          - est ut ad elit
                        metric: dolor in
                        metrics:
                          - nisi irure est ut tempor
                          - fugiat dolore
                        name: velit consectetur
                    tags:
                      - Lorem mollit es
                      - anim laboris minim
                    type: workload_security
                    updateAuthorId: -30493000
                    version: -9145762
                meta:
                  page:
                    total_count: -61453661
                    total_filtered_count: 17584800
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    post:
      tags:
        - Security Monitoring
      summary: Create a detection rule
      description: Create a detection rule.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                name: <string>
                isEnabled: <boolean>
                queries:
                  - query: <string>
                    aggregation: <string>
                    distinctFields:
                      - <string>
                      - <string>
                    groupByFields:
                      - <string>
                      - <string>
                    metric: <string>
                    metrics:
                      - <string>
                      - <string>
                    name: <string>
                  - query: <string>
                    aggregation: <string>
                    distinctFields:
                      - <string>
                      - <string>
                    groupByFields:
                      - <string>
                      - <string>
                    metric: <string>
                    metrics:
                      - <string>
                      - <string>
                    name: <string>
                options:
                  decreaseCriticalityBasedOnEnv: <boolean>
                  detectionMethod: <string>
                  evaluationWindow: <integer>
                  hardcodedEvaluatorType: <string>
                  impossibleTravelOptions:
                    baselineUserLocations: <boolean>
                  keepAlive: <integer>
                  maxSignalDuration: <integer>
                  newValueOptions:
                    forgetAfter: <integer>
                    learningDuration: 0
                    learningMethod: duration
                    learningThreshold: 0
                cases:
                  - status: <string>
                    condition: <string>
                    name: <string>
                    notifications:
                      - <string>
                      - <string>
                  - status: <string>
                    condition: <string>
                    name: <string>
                    notifications:
                      - <string>
                      - <string>
                message: <string>
                filters:
                  - action: <string>
                    query: <string>
                  - action: <string>
                    query: <string>
                hasExtendedTitle: <boolean>
                tags:
                  - <string>
                  - <string>
                type: <string>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                cases:
                  - condition: in Excepteur nostrud
                    name: cillum non eiusmod
                    notifications:
                      - Lorem Duis
                      - Excepteur in aute proident laborum
                    status: critical
                  - condition: sunt mollit cillum
                    name: incididunt aute ut Lorem
                    notifications:
                      - quis sit
                      - deserunt est irure
                    status: critical
                createdAt: -16969063
                creationAuthorId: 21257937
                filters:
                  - action: suppress
                    query: Duis id
                  - action: require
                    query: aute Excepteur
                hasExtendedTitle: true
                id: dolor
                isDefault: true
                isDeleted: false
                isEnabled: false
                message: enim non
                name: ad mollit eu
                options:
                  decreaseCriticalityBasedOnEnv: false
                  detectionMethod: impossible_travel
                  evaluationWindow: 1800
                  hardcodedEvaluatorType: log4shell
                  impossibleTravelOptions:
                    baselineUserLocations: true
                  keepAlive: 300
                  maxSignalDuration: 600
                  newValueOptions:
                    forgetAfter: 28
                    learningDuration: 0
                    learningMethod: duration
                    learningThreshold: 0
                queries:
                  - query: a > 3
                    aggregation: event_count
                    distinctFields:
                      - enim
                      - dolor sint
                    groupByFields:
                      - deserunt Ut
                      - elit mollit cupidatat officia
                    metric: eiusmod reprehenderit id ipsum
                    metrics:
                      - qui aute officia
                      - aliquip Excepteur culpa
                    name: Duis ut
                  - query: a > 3
                    aggregation: count
                    distinctFields:
                      - velit in veniam
                      - anim eiusmod eu officia
                    groupByFields:
                      - aliquip veniam
                      - tempor Excepteur veniam adipis
                    metric: cillum commodo
                    metrics:
                      - tempor
                      - Excepteur veniam id proiden
                    name: nulla consequ
                tags:
                  - p
                  - culpa enim
                type: workload_security
                updateAuthorId: -14166846
                version: -34646302
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v2/security_monitoring/signals/{signal_id}/state:
    patch:
      tags:
        - Security Monitoring
      summary: Change the triage state of a security signal
      description: Change the triage state of a security signal.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                data:
                  attributes:
                    state: <string>
                    archive_comment: <string>
                    archive_reason: <string>
                    version: <long>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: signal_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the signal.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  attributes:
                    assignee:
                      uuid: 773b045d-ccf8-4808-bd3b-955ef6a8c940
                      handle: do sed
                      id: -44101179
                      name: esse dolore adipis
                    state: open
                    incident_ids:
                      - 2066
                      - 2066
                    archive_comment: do dolore culpa eiusmod
                    archive_comment_timestamp: 39310433
                    archive_comment_user:
                      uuid: 773b045d-ccf8-4808-bd3b-955ef6a8c940
                      handle: sunt aute
                      id: 7348572
                      name: do ut tempor
                    archive_reason: none
                    state_update_timestamp: 21659230
                    state_update_user:
                      uuid: 773b045d-ccf8-4808-bd3b-955ef6a8c940
                      handle: cillum ipsum minim magna
                      id: 20968605
                      name: ex Lorem veniam amet
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v2/security_monitoring/rules/{rule_id}:
    get:
      tags:
        - Security Monitoring
      summary: Get a rule's details
      description: Get a rule's details.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: rule_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the rule.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                cases:
                  - condition: in Excepteur nostrud
                    name: cillum non eiusmod
                    notifications:
                      - Lorem Duis
                      - Excepteur in aute proident laborum
                    status: critical
                  - condition: sunt mollit cillum
                    name: incididunt aute ut Lorem
                    notifications:
                      - quis sit
                      - deserunt est irure
                    status: critical
                createdAt: -16969063
                creationAuthorId: 21257937
                filters:
                  - action: suppress
                    query: Duis id
                  - action: require
                    query: aute Excepteur
                hasExtendedTitle: true
                id: dolor
                isDefault: true
                isDeleted: false
                isEnabled: false
                message: enim non
                name: ad mollit eu
                options:
                  decreaseCriticalityBasedOnEnv: false
                  detectionMethod: impossible_travel
                  evaluationWindow: 1800
                  hardcodedEvaluatorType: log4shell
                  impossibleTravelOptions:
                    baselineUserLocations: true
                  keepAlive: 300
                  maxSignalDuration: 600
                  newValueOptions:
                    forgetAfter: 28
                    learningDuration: 0
                    learningMethod: duration
                    learningThreshold: 0
                queries:
                  - query: a > 3
                    aggregation: event_count
                    distinctFields:
                      - enim
                      - dolor sint
                    groupByFields:
                      - deserunt Ut
                      - elit mollit cupidatat officia
                    metric: eiusmod reprehenderit id ipsum
                    metrics:
                      - qui aute officia
                      - aliquip Excepteur culpa
                    name: Duis ut
                  - query: a > 3
                    aggregation: count
                    distinctFields:
                      - velit in veniam
                      - anim eiusmod eu officia
                    groupByFields:
                      - aliquip veniam
                      - tempor Excepteur veniam adipis
                    metric: cillum commodo
                    metrics:
                      - tempor
                      - Excepteur veniam id proiden
                    name: nulla consequ
                tags:
                  - p
                  - culpa enim
                type: workload_security
                updateAuthorId: -14166846
                version: -34646302
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    put:
      tags:
        - Security Monitoring
      summary: Update an existing rule
      description: >-
        Update an existing rule. When updating `cases`, `queries` or `options`,
        the whole field

        must be included. For example, when modifying a query all queries must
        be included.

        Default rules can only be updated to be enabled and to change
        notifications.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                cases:
                  - condition: <string>
                    name: <string>
                    notifications:
                      - <string>
                      - <string>
                    status: <string>
                  - condition: <string>
                    name: <string>
                    notifications:
                      - <string>
                      - <string>
                    status: <string>
                filters:
                  - action: <string>
                    query: <string>
                  - action: <string>
                    query: <string>
                hasExtendedTitle: <boolean>
                isEnabled: <boolean>
                message: <string>
                name: <string>
                options:
                  decreaseCriticalityBasedOnEnv: <boolean>
                  detectionMethod: <string>
                  evaluationWindow: <integer>
                  hardcodedEvaluatorType: <string>
                  impossibleTravelOptions:
                    baselineUserLocations: <boolean>
                  keepAlive: <integer>
                  maxSignalDuration: <integer>
                  newValueOptions:
                    forgetAfter: <integer>
                    learningDuration: 0
                    learningMethod: duration
                    learningThreshold: 0
                queries:
                  - query: <string>
                    aggregation: <string>
                    distinctFields:
                      - <string>
                      - <string>
                    groupByFields:
                      - <string>
                      - <string>
                    metric: <string>
                    metrics:
                      - <string>
                      - <string>
                    name: <string>
                  - query: <string>
                    aggregation: <string>
                    distinctFields:
                      - <string>
                      - <string>
                    groupByFields:
                      - <string>
                      - <string>
                    metric: <string>
                    metrics:
                      - <string>
                      - <string>
                    name: <string>
                tags:
                  - <string>
                  - <string>
                version: <integer>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: rule_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the rule.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                cases:
                  - condition: in Excepteur nostrud
                    name: cillum non eiusmod
                    notifications:
                      - Lorem Duis
                      - Excepteur in aute proident laborum
                    status: critical
                  - condition: sunt mollit cillum
                    name: incididunt aute ut Lorem
                    notifications:
                      - quis sit
                      - deserunt est irure
                    status: critical
                createdAt: -16969063
                creationAuthorId: 21257937
                filters:
                  - action: suppress
                    query: Duis id
                  - action: require
                    query: aute Excepteur
                hasExtendedTitle: true
                id: dolor
                isDefault: true
                isDeleted: false
                isEnabled: false
                message: enim non
                name: ad mollit eu
                options:
                  decreaseCriticalityBasedOnEnv: false
                  detectionMethod: impossible_travel
                  evaluationWindow: 1800
                  hardcodedEvaluatorType: log4shell
                  impossibleTravelOptions:
                    baselineUserLocations: true
                  keepAlive: 300
                  maxSignalDuration: 600
                  newValueOptions:
                    forgetAfter: 28
                    learningDuration: 0
                    learningMethod: duration
                    learningThreshold: 0
                queries:
                  - query: a > 3
                    aggregation: event_count
                    distinctFields:
                      - enim
                      - dolor sint
                    groupByFields:
                      - deserunt Ut
                      - elit mollit cupidatat officia
                    metric: eiusmod reprehenderit id ipsum
                    metrics:
                      - qui aute officia
                      - aliquip Excepteur culpa
                    name: Duis ut
                  - query: a > 3
                    aggregation: count
                    distinctFields:
                      - velit in veniam
                      - anim eiusmod eu officia
                    groupByFields:
                      - aliquip veniam
                      - tempor Excepteur veniam adipis
                    metric: cillum commodo
                    metrics:
                      - tempor
                      - Excepteur veniam id proiden
                    name: nulla consequ
                tags:
                  - p
                  - culpa enim
                type: workload_security
                updateAuthorId: -14166846
                version: -34646302
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '401':
          description: Unauthorized
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    delete:
      tags:
        - Security Monitoring
      summary: Delete an existing rule
      description: Delete an existing rule. Default rules cannot be deleted.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: rule_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the rule.
          example: <string>
      responses:
        '204':
          description: No Content
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v2/security_monitoring/signals/{signal_id}/assignee:
    patch:
      tags:
        - Security Monitoring
      summary: Modify the triage assignee of a security signal
      description: Modify the triage assignee of a security signal.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                data:
                  attributes:
                    assignee:
                      uuid: <string>
                      handle: <string>
                      id: <long>
                      name: <string>
                    version: <long>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: signal_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the signal.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  attributes:
                    assignee:
                      uuid: 773b045d-ccf8-4808-bd3b-955ef6a8c940
                      handle: do sed
                      id: -44101179
                      name: esse dolore adipis
                    state: open
                    incident_ids:
                      - 2066
                      - 2066
                    archive_comment: do dolore culpa eiusmod
                    archive_comment_timestamp: 39310433
                    archive_comment_user:
                      uuid: 773b045d-ccf8-4808-bd3b-955ef6a8c940
                      handle: sunt aute
                      id: 7348572
                      name: do ut tempor
                    archive_reason: none
                    state_update_timestamp: 21659230
                    state_update_user:
                      uuid: 773b045d-ccf8-4808-bd3b-955ef6a8c940
                      handle: cillum ipsum minim magna
                      id: 20968605
                      name: ex Lorem veniam amet
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v2/security_monitoring/signals/search:
    post:
      tags:
        - Security Monitoring
      summary: Get a list of security signals
      description: >-
        Returns security signals that match a search query.

        Both this endpoint and the GET endpoint can be used interchangeably for
        listing

        security signals.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                filter:
                  from: <dateTime>
                  query: <string>
                  to: <dateTime>
                page:
                  cursor: <string>
                  limit: 10
                sort: <string>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - attributes:
                      attributes:
                        workflow:
                          first_seen: '2020-06-23T14:46:01.000Z'
                          last_seen: '2020-06-23T14:46:49.000Z'
                          rule:
                            name: 'Brute Force Attack Grouped By User '
                            version: 12
                      message: >-
                        Detect Account Take Over (ATO) through brute force
                        attempts
                      tags:
                        - security:attack
                        - technique:T1110-brute-force
                      timestamp: '2019-01-02T09:42:36.320Z'
                    id: AAAAAWgN8Xwgr1vKDQAAAABBV2dOOFh3ZzZobm1mWXJFYTR0OA
                    type: signal
                  - attributes:
                      attributes:
                        workflow:
                          first_seen: '2020-06-23T14:46:01.000Z'
                          last_seen: '2020-06-23T14:46:49.000Z'
                          rule:
                            name: 'Brute Force Attack Grouped By User '
                            version: 12
                      message: >-
                        Detect Account Take Over (ATO) through brute force
                        attempts
                      tags:
                        - security:attack
                        - technique:T1110-brute-force
                      timestamp: '2019-01-02T09:42:36.320Z'
                    id: AAAAAWgN8Xwgr1vKDQAAAABBV2dOOFh3ZzZobm1mWXJFYTR0OA
                    type: signal
                links:
                  next: >-
                    https://app.datadoghq.com/api/v2/security_monitoring/signals?filter[query]=foo&page[cursor]=eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==
                meta:
                  page:
                    after: >-
                      eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v2/security_monitoring/signals:
    get:
      tags:
        - Security Monitoring
      summary: Get a quick list of security signals
      description: >-
        The list endpoint returns security signals that match a search query.

        Both this endpoint and the POST endpoint can be used interchangeably
        when listing

        security signals.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: filter[query]
          in: query
          schema:
            type: string
          description: The search query for security signals.
          example: <string>
        - name: filter[from]
          in: query
          schema:
            type: string
          description: The minimum timestamp for requested security signals.
          example: <dateTime>
        - name: filter[to]
          in: query
          schema:
            type: string
          description: The maximum timestamp for requested security signals.
          example: <dateTime>
        - name: sort
          in: query
          schema:
            type: string
          description: The order of the security signals in results.
          example: <string>
        - name: page[cursor]
          in: query
          schema:
            type: string
          description: A list of results using the cursor provided in the previous query.
          example: <string>
        - name: page[limit]
          in: query
          schema:
            type: integer
          description: The maximum number of security signals in the response.
          example: '10'
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - attributes:
                      attributes:
                        workflow:
                          first_seen: '2020-06-23T14:46:01.000Z'
                          last_seen: '2020-06-23T14:46:49.000Z'
                          rule:
                            name: 'Brute Force Attack Grouped By User '
                            version: 12
                      message: >-
                        Detect Account Take Over (ATO) through brute force
                        attempts
                      tags:
                        - security:attack
                        - technique:T1110-brute-force
                      timestamp: '2019-01-02T09:42:36.320Z'
                    id: AAAAAWgN8Xwgr1vKDQAAAABBV2dOOFh3ZzZobm1mWXJFYTR0OA
                    type: signal
                  - attributes:
                      attributes:
                        workflow:
                          first_seen: '2020-06-23T14:46:01.000Z'
                          last_seen: '2020-06-23T14:46:49.000Z'
                          rule:
                            name: 'Brute Force Attack Grouped By User '
                            version: 12
                      message: >-
                        Detect Account Take Over (ATO) through brute force
                        attempts
                      tags:
                        - security:attack
                        - technique:T1110-brute-force
                      timestamp: '2019-01-02T09:42:36.320Z'
                    id: AAAAAWgN8Xwgr1vKDQAAAABBV2dOOFh3ZzZobm1mWXJFYTR0OA
                    type: signal
                links:
                  next: >-
                    https://app.datadoghq.com/api/v2/security_monitoring/signals?filter[query]=foo&page[cursor]=eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==
                meta:
                  page:
                    after: >-
                      eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v2/security_monitoring/signals/{signal_id}/incidents:
    patch:
      tags:
        - Security Monitoring
      summary: Change the related incidents of a security signal
      description: Change the related incidents for a security signal.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                data:
                  attributes:
                    incident_ids:
                      - <long>
                      - <long>
                    version: <long>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: signal_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the signal.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  attributes:
                    assignee:
                      uuid: 773b045d-ccf8-4808-bd3b-955ef6a8c940
                      handle: do sed
                      id: -44101179
                      name: esse dolore adipis
                    state: open
                    incident_ids:
                      - 2066
                      - 2066
                    archive_comment: do dolore culpa eiusmod
                    archive_comment_timestamp: 39310433
                    archive_comment_user:
                      uuid: 773b045d-ccf8-4808-bd3b-955ef6a8c940
                      handle: sunt aute
                      id: 7348572
                      name: do ut tempor
                    archive_reason: none
                    state_update_timestamp: 21659230
                    state_update_user:
                      uuid: 773b045d-ccf8-4808-bd3b-955ef6a8c940
                      handle: cillum ipsum minim magna
                      id: 20968605
                      name: ex Lorem veniam amet
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v2/security_monitoring/signals/{signal_id}:
    get:
      tags:
        - Security Monitoring
      summary: Get a signal's details
      description: Get a signal's details.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: signal_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the signal.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                attributes:
                  attributes:
                    workflow:
                      first_seen: '2020-06-23T14:46:01.000Z'
                      last_seen: '2020-06-23T14:46:49.000Z'
                      rule:
                        name: 'Brute Force Attack Grouped By User '
                        version: 12
                  message: Detect Account Take Over (ATO) through brute force attempts
                  tags:
                    - security:attack
                    - technique:T1110-brute-force
                  timestamp: '2019-01-02T09:42:36.320Z'
                id: AAAAAWgN8Xwgr1vKDQAAAABBV2dOOFh3ZzZobm1mWXJFYTR0OA
                type: signal
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v2/security_monitoring/configuration/security_filters/{security_filter_id}:
    delete:
      tags:
        - Security Monitoring
      summary: Delete a security filter
      description: Delete a specific security filter.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: security_filter_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the security filter.
          example: <string>
      responses:
        '204':
          description: No Content
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    patch:
      tags:
        - Security Monitoring
      summary: Update a security filter
      description: |-
        Update a specific security filter.
        Returns the security filter object when the request is successful.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                data:
                  type: security_filters
                  attributes:
                    exclusion_filters:
                      - name: <string>
                        query: <string>
                      - name: <string>
                        query: <string>
                    filtered_data_type: <string>
                    is_enabled: <boolean>
                    name: <string>
                    query: <string>
                    version: <integer>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: security_filter_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the security filter.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  attributes:
                    exclusion_filters:
                      - name: Exclude staging
                        query: source:staging
                      - name: Exclude staging
                        query: source:staging
                    filtered_data_type: logs
                    is_builtin: false
                    is_enabled: false
                    name: Custom security filter
                    query: service:api
                    version: 1
                  id: 3dd-0uc-h1s
                  type: security_filters
                meta:
                  warning: >-
                    All the security filters are disabled. As a result, no logs
                    are being analyzed.
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '409':
          description: Conflict
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    get:
      tags:
        - Security Monitoring
      summary: Get a security filter
      description: >-
        Get the details of a specific security filter.


        See the [security filter
        guide](https://docs.datadoghq.com/security_platform/guide/how-to-setup-security-filters-using-security-monitoring-api/)

        for more examples.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: security_filter_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the security filter.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  attributes:
                    exclusion_filters:
                      - name: Exclude staging
                        query: source:staging
                      - name: Exclude staging
                        query: source:staging
                    filtered_data_type: logs
                    is_builtin: false
                    is_enabled: false
                    name: Custom security filter
                    query: service:api
                    version: 1
                  id: 3dd-0uc-h1s
                  type: security_filters
                meta:
                  warning: >-
                    All the security filters are disabled. As a result, no logs
                    are being analyzed.
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v2/security_monitoring/configuration/security_filters:
    post:
      tags:
        - Security Monitoring
      summary: Create a security filter
      description: >-
        Create a security filter.


        See the [security filter
        guide](https://docs.datadoghq.com/security_platform/guide/how-to-setup-security-filters-using-security-monitoring-api/)

        for more examples.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                data:
                  type: security_filters
                  attributes:
                    name: <string>
                    query: <string>
                    exclusion_filters:
                      - name: <string>
                        query: <string>
                      - name: <string>
                        query: <string>
                    filtered_data_type: <string>
                    is_enabled: <boolean>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  attributes:
                    exclusion_filters:
                      - name: Exclude staging
                        query: source:staging
                      - name: Exclude staging
                        query: source:staging
                    filtered_data_type: logs
                    is_builtin: false
                    is_enabled: false
                    name: Custom security filter
                    query: service:api
                    version: 1
                  id: 3dd-0uc-h1s
                  type: security_filters
                meta:
                  warning: >-
                    All the security filters are disabled. As a result, no logs
                    are being analyzed.
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '409':
          description: Conflict
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    get:
      tags:
        - Security Monitoring
      summary: Get all security filters
      description: Get the list of configured security filters with their definitions.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - attributes:
                      exclusion_filters:
                        - name: Exclude staging
                          query: source:staging
                        - name: Exclude staging
                          query: source:staging
                      filtered_data_type: logs
                      is_builtin: false
                      is_enabled: false
                      name: Custom security filter
                      query: service:api
                      version: 1
                    id: 3dd-0uc-h1s
                    type: security_filters
                  - attributes:
                      exclusion_filters:
                        - name: Exclude staging
                          query: source:staging
                        - name: Exclude staging
                          query: source:staging
                      filtered_data_type: logs
                      is_builtin: false
                      is_enabled: false
                      name: Custom security filter
                      query: service:api
                      version: 1
                    id: 3dd-0uc-h1s
                    type: security_filters
                meta:
                  warning: >-
                    All the security filters are disabled. As a result, no logs
                    are being analyzed.
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v2/service_accounts/{service_account_id}/application_keys:
    get:
      tags:
        - Service Accounts
      summary: List application keys for this service account
      description: List all application keys available for this service account.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: page[size]
          in: query
          schema:
            type: integer
          description: Size for a given page.
          example: '10'
        - name: page[number]
          in: query
          schema:
            type: integer
          description: Specific page number to return.
          example: '0'
        - name: sort
          in: query
          schema:
            type: string
          description: >-
            Application key attribute used to sort results. Sort order is
            ascending

            by default. In order to specify a descending sort, prefix the

            attribute with a minus sign.
          example: name
        - name: filter
          in: query
          schema:
            type: string
          description: Filter application keys by the specified string.
          example: <string>
        - name: filter[created_at][start]
          in: query
          schema:
            type: string
          description: >-
            Only include application keys created on or after the specified
            date.
          example: <string>
        - name: filter[created_at][end]
          in: query
          schema:
            type: string
          description: >-
            Only include application keys created on or before the specified
            date.
          example: <string>
        - name: service_account_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the service account.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - attributes:
                      created_at: '2020-11-23T10:00:00.000Z'
                      last4: abcd
                      name: Application Key for managing dashboards
                      scopes:
                        - dashboards_read
                        - dashboards_write
                        - dashboards_public_share
                    id: Excepteur mollit aliquip
                    relationships:
                      owned_by:
                        data:
                          id: 00000000-0000-0000-2345-000000000000
                          type: users
                    type: application_keys
                  - attributes:
                      created_at: '2020-11-23T10:00:00.000Z'
                      last4: abcd
                      name: Application Key for managing dashboards
                      scopes:
                        - dashboards_read
                        - dashboards_write
                        - dashboards_public_share
                    id: commodo ipsum enim
                    relationships:
                      owned_by:
                        data:
                          id: 00000000-0000-0000-2345-000000000000
                          type: users
                    type: application_keys
                included:
                  - attributes:
                      created_at: '1967-09-06T10:50:33.683Z'
                      disabled: true
                      email: ea
                      handle: in Lorem ut
                      icon: est enim Duis culpa ut
                      modified_at: '2011-06-27T14:57:33.095Z'
                      name: anim dolor cillum dolor
                      service_account: true
                      status: officia deserunt
                      title: ut quis amet
                      verified: false
                    id: aute et officia
                    relationships:
                      org:
                        data:
                          id: 00000000-0000-beef-0000-000000000000
                          type: orgs
                      other_orgs:
                        data: []
                      other_users:
                        data: []
                      roles:
                        data:
                          - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                            type: roles
                          - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                            type: roles
                    type: users
                  - attributes:
                      created_at: '1971-05-13T05:54:26.615Z'
                      disabled: false
                      email: culpa enim do
                      handle: velit Duis Excepteur
                      icon: ut et
                      modified_at: '1990-10-20T08:39:15.756Z'
                      name: culpa incididunt mollit
                      service_account: false
                      status: sed Lorem Duis voluptate
                      title: velit culpa
                      verified: true
                    id: amet in cupidatat ex in
                    relationships:
                      org:
                        data:
                          id: 00000000-0000-beef-0000-000000000000
                          type: orgs
                      other_orgs:
                        data: []
                      other_users:
                        data: []
                      roles:
                        data:
                          - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                            type: roles
                          - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                            type: roles
                    type: users
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    post:
      tags:
        - Service Accounts
      summary: Create an application key for this service account
      description: Create an application key for this service account.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                data:
                  attributes:
                    name: <string>
                    scopes:
                      - <string>
                      - <string>
                  type: application_keys
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: service_account_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the service account.
          example: <string>
      responses:
        '201':
          description: Created
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  attributes:
                    created_at: '2020-11-23T10:00:00.000Z'
                    key: Lorem nisi aliquip
                    last4: abcd
                    name: Application Key for managing dashboards
                    scopes:
                      - dashboards_read
                      - dashboards_write
                      - dashboards_public_share
                  id: occaecat
                  relationships:
                    owned_by:
                      data:
                        id: 00000000-0000-0000-2345-000000000000
                        type: users
                  type: application_keys
                included:
                  - attributes:
                      created_at: '2020-08-14T05:30:02.603Z'
                      disabled: false
                      email: sit in
                      handle: laborum eiusmod amet in
                      icon: ut commodo qui
                      modified_at: '1974-05-16T20:27:03.878Z'
                      name: cupidatat
                      service_account: true
                      status: nulla mollit dolor sit
                      title: ipsum commodo
                      verified: false
                    id: laboris aliquip Excepteur
                    relationships:
                      org:
                        data:
                          id: 00000000-0000-beef-0000-000000000000
                          type: orgs
                      other_orgs:
                        data: []
                      other_users:
                        data: []
                      roles:
                        data:
                          - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                            type: roles
                          - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                            type: roles
                    type: users
                  - attributes:
                      created_at: '1982-02-15T22:01:08.559Z'
                      disabled: false
                      email: sed anim cupidatat quis sint
                      handle: eiusmod dolore dolor Lorem
                      icon: esse eiusmod id et enim
                      modified_at: '1981-04-01T20:10:54.919Z'
                      name: Duis est pariatur eu occaecat
                      service_account: true
                      status: nostrud
                      title: Duis ad consequat ut
                      verified: false
                    id: ut est Lorem nisi
                    relationships:
                      org:
                        data:
                          id: 00000000-0000-beef-0000-000000000000
                          type: orgs
                      other_orgs:
                        data: []
                      other_users:
                        data: []
                      roles:
                        data:
                          - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                            type: roles
                          - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                            type: roles
                    type: users
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v2/service_accounts/{service_account_id}/application_keys/{app_key_id}:
    delete:
      tags:
        - Service Accounts
      summary: Delete an application key for this service account
      description: Delete an application key owned by this service account.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: service_account_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the service account.
          example: <string>
        - name: app_key_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the application key.
          example: <string>
      responses:
        '204':
          description: No Content
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    get:
      tags:
        - Service Accounts
      summary: Get one application key for this service account
      description: Get an application key owned by this service account.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: service_account_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the service account.
          example: <string>
        - name: app_key_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the application key.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  attributes:
                    created_at: '2020-11-23T10:00:00.000Z'
                    last4: abcd
                    name: Application Key for managing dashboards
                    scopes:
                      - dashboards_read
                      - dashboards_write
                      - dashboards_public_share
                  id: elit laborum ullamco ipsum
                  relationships:
                    owned_by:
                      data:
                        id: 00000000-0000-0000-2345-000000000000
                        type: users
                  type: application_keys
                included:
                  - attributes:
                      created_at: '2022-10-09T12:37:57.365Z'
                      disabled: true
                      email: do aliqua fugiat in
                      handle: esse aliqua dolore ad exercitation
                      icon: cupidatat id
                      modified_at: '1943-07-30T00:11:07.181Z'
                      name: adipisicing consectetur tempor nulla dolor
                      service_account: true
                      status: amet aliqua
                      title: commodo adipisicing
                      verified: false
                    id: enim v
                    relationships:
                      org:
                        data:
                          id: 00000000-0000-beef-0000-000000000000
                          type: orgs
                      other_orgs:
                        data: []
                      other_users:
                        data: []
                      roles:
                        data:
                          - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                            type: roles
                          - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                            type: roles
                    type: users
                  - attributes:
                      created_at: '1963-12-01T01:12:45.476Z'
                      disabled: true
                      email: enim in
                      handle: sit reprehenderit
                      icon: dolore enim adipisicing quis
                      modified_at: '1978-12-22T14:01:17.976Z'
                      name: aliquip
                      service_account: false
                      status: ''
                      title: magna adipisicing dolore ani
                      verified: true
                    id: ut commodo
                    relationships:
                      org:
                        data:
                          id: 00000000-0000-beef-0000-000000000000
                          type: orgs
                      other_orgs:
                        data: []
                      other_users:
                        data: []
                      roles:
                        data:
                          - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                            type: roles
                          - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                            type: roles
                    type: users
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    patch:
      tags:
        - Service Accounts
      summary: Edit an application key for this service account
      description: Edit an application key owned by this service account.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                data:
                  attributes:
                    name: <string>
                    scopes:
                      - <string>
                      - <string>
                  id: <string>
                  type: application_keys
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: service_account_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the service account.
          example: <string>
        - name: app_key_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the application key.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  attributes:
                    created_at: '2020-11-23T10:00:00.000Z'
                    last4: abcd
                    name: Application Key for managing dashboards
                    scopes:
                      - dashboards_read
                      - dashboards_write
                      - dashboards_public_share
                  id: elit laborum ullamco ipsum
                  relationships:
                    owned_by:
                      data:
                        id: 00000000-0000-0000-2345-000000000000
                        type: users
                  type: application_keys
                included:
                  - attributes:
                      created_at: '2022-10-09T12:37:57.365Z'
                      disabled: true
                      email: do aliqua fugiat in
                      handle: esse aliqua dolore ad exercitation
                      icon: cupidatat id
                      modified_at: '1943-07-30T00:11:07.181Z'
                      name: adipisicing consectetur tempor nulla dolor
                      service_account: true
                      status: amet aliqua
                      title: commodo adipisicing
                      verified: false
                    id: enim v
                    relationships:
                      org:
                        data:
                          id: 00000000-0000-beef-0000-000000000000
                          type: orgs
                      other_orgs:
                        data: []
                      other_users:
                        data: []
                      roles:
                        data:
                          - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                            type: roles
                          - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                            type: roles
                    type: users
                  - attributes:
                      created_at: '1963-12-01T01:12:45.476Z'
                      disabled: true
                      email: enim in
                      handle: sit reprehenderit
                      icon: dolore enim adipisicing quis
                      modified_at: '1978-12-22T14:01:17.976Z'
                      name: aliquip
                      service_account: false
                      status: ''
                      title: magna adipisicing dolore ani
                      verified: true
                    id: ut commodo
                    relationships:
                      org:
                        data:
                          id: 00000000-0000-beef-0000-000000000000
                          type: orgs
                      other_orgs:
                        data: []
                      other_users:
                        data: []
                      roles:
                        data:
                          - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                            type: roles
                          - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                            type: roles
                    type: users
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/check_run:
    post:
      tags:
        - Service Checks
      summary: Submit a Service Check
      description: |-
        Submit a list of Service Checks.

        **Notes**:
        - A valid API key is required.
        - Service checks can be submitted up to 10 minutes in the past.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                - check: app.ok
                  status: 0
                  tags:
                    - environment:test
                  host_name: app.host1
                  message: app is running
                  timestamp: 9127091
                - check: app.ok
                  status: 0
                  tags:
                    - environment:test
                  host_name: app.host1
                  message: app is running
                  timestamp: 37557324
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: text/json
      responses:
        '202':
          description: Accepted
          headers:
            Content-Type:
              schema:
                type: string
                example: text/json
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: text/json
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: text/json
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '408':
          description: Request Timeout
          headers:
            Content-Type:
              schema:
                type: string
                example: text/json
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '413':
          description: Request Entity Too Large
          headers:
            Content-Type:
              schema:
                type: string
                example: text/json
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v2/services/definitions:
    get:
      tags:
        - Service Definition
      summary: Get all service definitions
      description: Get a list of all service definitions from the Datadog Service Catalog.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - attributes:
                      meta:
                        github-html-url: cillum
                        ingested-schema-version: elit Duis quis do
                        ingestion-source: velit mollit reprehenderit
                        last-modified-time: officia esse
                      schema:
                        schema-version: v1
                        info:
                          dd-service: myservice
                          description: A shopping cart service
                          display-name: My Service
                          service-tier: Tier 1
                        contact:
                          email: contact@datadoghq.com
                          slack: https://yourcompany.slack.com/archives/channel123
                        extensions:
                          aliquip4b1: {}
                        external-resources:
                          - name: Runbook
                            type: runbook
                            url: https://my-runbook
                          - name: Runbook
                            type: runbook
                            url: https://my-runbook
                        integrations:
                          pagerduty: >-
                            https://my-org.pagerduty.com/service-directory/PMyService
                        org:
                          application: E-Commerce
                          team: my-team
                        tags:
                          - my:tag
                          - service:tag
                    type: in
                  - attributes:
                      meta:
                        github-html-url: Excepteur laboris in
                        ingested-schema-version: nulla ut
                        ingestion-source: enim ipsum tempor
                        last-modified-time: Ut qui
                      schema:
                        schema-version: v1
                        info:
                          dd-service: myservice
                          description: A shopping cart service
                          display-name: My Service
                          service-tier: Tier 1
                        contact:
                          email: contact@datadoghq.com
                          slack: https://yourcompany.slack.com/archives/channel123
                        extensions:
                          quisd45: {}
                          eu9: {}
                        external-resources:
                          - name: Runbook
                            type: runbook
                            url: https://my-runbook
                          - name: Runbook
                            type: runbook
                            url: https://my-runbook
                        integrations:
                          pagerduty: >-
                            https://my-org.pagerduty.com/service-directory/PMyService
                        org:
                          application: E-Commerce
                          team: my-team
                        tags:
                          - my:tag
                          - service:tag
                    type: quis ex fugiat commodo
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    post:
      tags:
        - Service Definition
      summary: Create or update service definition
      description: Create or update service definition in the Datadog Service Catalog.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                schema-version: v2
                dd-service: <string>
                contacts:
                  - type: <string>
                    contact: <email>
                    name: <string>
                  - type: <string>
                    contact: <email>
                    name: <string>
                dd-team: <string>
                docs:
                  - name: <string>
                    url: <string>
                    provider: <string>
                  - name: <string>
                    url: <string>
                    provider: <string>
                extensions:
                  irure1: {}
                  officia_8_3: {}
                integrations:
                  opsgenie:
                    service-url: <string>
                    region: <string>
                  pagerduty: <string>
                links:
                  - name: <string>
                    type: <string>
                    url: <string>
                  - name: <string>
                    type: <string>
                    url: <string>
                repos:
                  - name: <string>
                    url: <string>
                    provider: <string>
                  - name: <string>
                    url: <string>
                    provider: <string>
                tags:
                  - <string>
                  - <string>
                team: <string>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - attributes:
                      meta:
                        github-html-url: consectetur in
                        ingested-schema-version: commodo sed esse ex
                        ingestion-source: ipsum ut elit
                        last-modified-time: in enim quis cupidatat
                      schema:
                        schema-version: v1
                        info:
                          dd-service: myservice
                          description: A shopping cart service
                          display-name: My Service
                          service-tier: Tier 1
                        contact:
                          email: contact@datadoghq.com
                          slack: https://yourcompany.slack.com/archives/channel123
                        extensions:
                          Duis_fe: {}
                        external-resources:
                          - name: Runbook
                            type: runbook
                            url: https://my-runbook
                          - name: Runbook
                            type: runbook
                            url: https://my-runbook
                        integrations:
                          pagerduty: >-
                            https://my-org.pagerduty.com/service-directory/PMyService
                        org:
                          application: E-Commerce
                          team: my-team
                        tags:
                          - my:tag
                          - service:tag
                    type: nostrud dolor
                  - attributes:
                      meta:
                        github-html-url: ullamco ut
                        ingested-schema-version: sed pariatur cupidatat
                        ingestion-source: nisi deserunt
                        last-modified-time: sint sed vo
                      schema:
                        schema-version: v1
                        info:
                          dd-service: myservice
                          description: A shopping cart service
                          display-name: My Service
                          service-tier: Tier 1
                        contact:
                          email: contact@datadoghq.com
                          slack: https://yourcompany.slack.com/archives/channel123
                        extensions:
                          ad345: {}
                        external-resources:
                          - name: Runbook
                            type: runbook
                            url: https://my-runbook
                          - name: Runbook
                            type: runbook
                            url: https://my-runbook
                        integrations:
                          pagerduty: >-
                            https://my-org.pagerduty.com/service-directory/PMyService
                        org:
                          application: E-Commerce
                          team: my-team
                        tags:
                          - my:tag
                          - service:tag
                    type: cillum veniam deserunt ipsum
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '409':
          description: Conflict
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v2/services/definitions/{service_name}:
    delete:
      tags:
        - Service Definition
      summary: Delete a single service definition
      description: Delete a single service definition in the Datadog Service Catalog.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: service_name
          in: path
          schema:
            type: string
          required: true
          description: (Required) The name of the service.
          example: <string>
      responses:
        '204':
          description: No Content
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    get:
      tags:
        - Service Definition
      summary: Get a single service definition
      description: Get a single service definition from the Datadog Service Catalog.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: service_name
          in: path
          schema:
            type: string
          required: true
          description: (Required) The name of the service.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  attributes:
                    meta:
                      github-html-url: sint consectetur
                      ingested-schema-version: e
                      ingestion-source: cupidatat nulla
                      last-modified-time: 'cillum '
                    schema:
                      schema-version: v1
                      info:
                        dd-service: myservice
                        description: A shopping cart service
                        display-name: My Service
                        service-tier: Tier 1
                      contact:
                        email: contact@datadoghq.com
                        slack: https://yourcompany.slack.com/archives/channel123
                      extensions:
                        commodo105: {}
                      external-resources:
                        - name: Runbook
                          type: runbook
                          url: https://my-runbook
                        - name: Runbook
                          type: runbook
                          url: https://my-runbook
                      integrations:
                        pagerduty: >-
                          https://my-org.pagerduty.com/service-directory/PMyService
                      org:
                        application: E-Commerce
                        team: my-team
                      tags:
                        - my:tag
                        - service:tag
                  type: sint proident enim
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '409':
          description: Conflict
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/service_dependencies:
    get:
      tags:
        - Service Dependencies
      summary: Get all APM service dependencies
      description: >-
        Get a list of services from APM and their dependencies. The services
        retrieved are filtered by environment and a

        primary tag, if one is defined.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: env
          in: query
          schema:
            type: string
          description: >-
            (Required) Specify what APM environment to query service
            dependencies by.
          example: prod
        - name: primary_tag
          in: query
          schema:
            type: string
          description: Specify what primary tag to query service dependencies by.
          example: availability-zone:us1-east
        - name: start
          in: query
          schema:
            type: integer
          description: >-
            Specify the start of the timeframe in epoch seconds to query for.
            (defaults to 1 hour before end parameter)
          example: '1588784247'
        - name: end
          in: query
          schema:
            type: integer
          description: >-
            Specify the end of the timeframe in epoch seconds to query for.
            (defaults to current time)
          example: '1588794247'
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                servica_a:
                  calls:
                    - service_b
                    - service_c
                service_b:
                  calls:
                    - service_o
                service_c:
                  calls:
                    - service_o
                service_o:
                  calls: []
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/service_dependencies/{service}:
    get:
      tags:
        - Service Dependencies
      summary: Get one APM service's dependencies
      description: >-
        Get a specific service's immediate upstream and downstream services.

        The services retrieved are filtered by environment and a primary tag, if
        one is defined.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: env
          in: query
          schema:
            type: string
          description: >-
            (Required) Specify what APM environment to query service
            dependencies by.
          example: prod
        - name: primary_tag
          in: query
          schema:
            type: string
          description: Specify what primary tag to query service dependencies by.
          example: availability-zone:us1-east
        - name: start
          in: query
          schema:
            type: integer
          description: >-
            Specify the start of the timeframe in epoch seconds to query for.
            (defaults to 1 hour before end parameter)
          example: '1588784247'
        - name: end
          in: query
          schema:
            type: integer
          description: >-
            Specify the end of the timeframe in epoch seconds to query for.
            (defaults to current time)
          example: '1588794247'
        - name: service
          in: path
          schema:
            type: string
          required: true
          description: (Required) The name of the service go get dependencies for.
          example: service-c
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                called_by:
                  - service-a
                  - service-b
                calls:
                  - service-d
                  - service-e
                name: service-c
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/slo:
    get:
      tags:
        - Service Level Objectives
      summary: Get all SLOs
      description: Get a list of service level objective objects for your organization.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: ids
          in: query
          schema:
            type: string
          description: >-
            A comma separated list of the IDs of the service level objectives
            objects.
          example: id1, id2, id3
        - name: query
          in: query
          schema:
            type: string
          description: The query string to filter results based on SLO names.
          example: monitor
        - name: tags_query
          in: query
          schema:
            type: string
          description: The query string to filter results based on a single SLO tag.
          example: env:prod
        - name: metrics_query
          in: query
          schema:
            type: string
          description: >-
            The query string to filter results based on SLO numerator and
            denominator.
          example: aws.elb.request_count
        - name: limit
          in: query
          schema:
            type: number
          description: The number of SLOs to return in the response.
          example: '-70569764'
        - name: offset
          in: query
          schema:
            type: number
          description: >-
            The specific offset to use as the beginning of the returned
            response.
          example: '-70569764'
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - name: Custom Metric SLO
                    thresholds:
                      - target: 95
                        timeframe: 7d
                      - target: 95
                        timeframe: 30d
                        warning: 97
                    type: metric
                    created_at: 92821078
                    creator:
                      email: do sint et
                      handle: Duis velit Excepteur
                      name: p
                    description: pariatur amet exercitation qui fug
                    groups:
                      - env:prod
                      - role:mysql
                    id: culpa adipis
                    modified_at: -97818449
                    monitor_ids:
                      - 79744184
                      - -55176037
                    monitor_tags:
                      - in do in dolor deserunt
                      - dolore laboris et
                    query:
                      numerator: sum:my.custom.metric{type:good}.as_count()
                      denominator: sum:my.custom.metric{*}.as_count()
                    tags:
                      - env:prod
                      - app:core
                  - name: Custom Metric SLO
                    thresholds:
                      - target: 95
                        timeframe: 7d
                      - target: 95
                        timeframe: 30d
                        warning: 97
                    type: metric
                    created_at: -95356230
                    creator:
                      email: in incididunt magna cupidatat
                      handle: enim mollit
                      name: officia qui consequat cupidatat
                    description: tempor id
                    groups:
                      - env:prod
                      - role:mysql
                    id: quis reprehenderit dolor cillum
                    modified_at: -69887018
                    monitor_ids:
                      - 58108022
                      - -7805636
                    monitor_tags:
                      - qui cupidatat aliqua tempor voluptate
                      - nisi reprehend
                    query:
                      numerator: sum:my.custom.metric{type:good}.as_count()
                      denominator: sum:my.custom.metric{*}.as_count()
                    tags:
                      - env:prod
                      - app:core
                errors:
                  - cillum elit est quis
                  - laborum ea
                metadata:
                  page:
                    total_count: -74085648
                    total_filtered_count: 97170809
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    post:
      tags:
        - Service Level Objectives
      summary: Create an SLO object
      description: Create a service level objective object.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                name: Custom Metric SLO
                thresholds:
                  - target: 95
                    timeframe: 7d
                  - target: 95
                    timeframe: 30d
                    warning: 97
                type: metric
                description: labore incididunt ea aliquip
                groups:
                  - env:prod
                  - role:mysql
                monitor_ids:
                  - -2414065
                  - 55403406
                query:
                  numerator: sum:my.custom.metric{type:good}.as_count()
                  denominator: sum:my.custom.metric{*}.as_count()
                tags:
                  - env:prod
                  - app:core
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - name: Custom Metric SLO
                    thresholds:
                      - target: 95
                        timeframe: 7d
                      - target: 95
                        timeframe: 30d
                        warning: 97
                    type: metric
                    created_at: 92821078
                    creator:
                      email: do sint et
                      handle: Duis velit Excepteur
                      name: p
                    description: pariatur amet exercitation qui fug
                    groups:
                      - env:prod
                      - role:mysql
                    id: culpa adipis
                    modified_at: -97818449
                    monitor_ids:
                      - 79744184
                      - -55176037
                    monitor_tags:
                      - in do in dolor deserunt
                      - dolore laboris et
                    query:
                      numerator: sum:my.custom.metric{type:good}.as_count()
                      denominator: sum:my.custom.metric{*}.as_count()
                    tags:
                      - env:prod
                      - app:core
                  - name: Custom Metric SLO
                    thresholds:
                      - target: 95
                        timeframe: 7d
                      - target: 95
                        timeframe: 30d
                        warning: 97
                    type: metric
                    created_at: -95356230
                    creator:
                      email: in incididunt magna cupidatat
                      handle: enim mollit
                      name: officia qui consequat cupidatat
                    description: tempor id
                    groups:
                      - env:prod
                      - role:mysql
                    id: quis reprehenderit dolor cillum
                    modified_at: -69887018
                    monitor_ids:
                      - 58108022
                      - -7805636
                    monitor_tags:
                      - qui cupidatat aliqua tempor voluptate
                      - nisi reprehend
                    query:
                      numerator: sum:my.custom.metric{type:good}.as_count()
                      denominator: sum:my.custom.metric{*}.as_count()
                    tags:
                      - env:prod
                      - app:core
                errors:
                  - cillum elit est quis
                  - laborum ea
                metadata:
                  page:
                    total_count: -74085648
                    total_filtered_count: 97170809
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/slo/bulk_delete:
    post:
      tags:
        - Service Level Objectives
      summary: Bulk Delete SLO Timeframes
      description: >-
        Delete (or partially delete) multiple service level objective objects.


        This endpoint facilitates deletion of one or more thresholds for one or
        more

        service level objective objects. If all thresholds are deleted, the
        service level

        objective object is deleted as well.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                id1:
                  - 7d
                  - 30d
                id2:
                  - 7d
                  - 30d
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  deleted:
                    - adipisicing Lorem
                    - id enim nostrud sunt consequat
                  updated:
                    - deserunt reprehenderit
                    - in amet ipsum
                errors:
                  - id: ''
                    timeframe: 30d
                    message: ''
                  - id: ''
                    timeframe: 30d
                    message: ''
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/slo/can_delete:
    get:
      tags:
        - Service Level Objectives
      summary: Check if SLOs can be safely deleted
      description: |-
        Check if an SLO can be safely deleted. For example,
        assure an SLO can be deleted without disrupting a dashboard.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: ids
          in: query
          schema:
            type: string
          description: >-
            (Required) A comma separated list of the IDs of the service level
            objectives objects.
          example: id1, id2, id3
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  ok:
                    - Excepteur in
                    - esse dolore
                errors:
                  aute703: aliquip ad tempor
                  esse_d_: ut ipsum
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '409':
          description: Conflict
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  ok:
                    - Excepteur in
                    - esse dolore
                errors:
                  aute703: aliquip ad tempor
                  esse_d_: ut ipsum
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/slo/search:
    get:
      tags:
        - Service Level Objectives
      summary: Search for SLOs
      description: Get a list of service level objective objects for your organization.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: query
          in: query
          schema:
            type: string
          description: |-
            The query string to filter results based on SLO names.
            Some examples of queries include `service:<service-name>`
            and `<slo-name>`.
          example: proident
        - name: page[size]
          in: query
          schema:
            type: number
          description: The number of files to return in the response `[default=10]`.
          example: '-70569764'
        - name: page[number]
          in: query
          schema:
            type: number
          description: >-
            The identifier of the first page to return. This parameter is used
            for the pagination feature `[default=0]`.
          example: '-70569764'
        - name: include_facets
          in: query
          schema:
            type: boolean
          description: >-
            Whether or not to return facet information in the response
            `[default=false]`.
          example: 'true'
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  attributes:
                    facets:
                      all_tags:
                        - count: 97738239
                          name: pariatur reprehenderit
                        - count: -36659131
                          name: el
                      creator_name:
                        - count: -86469348
                          name: irure dolor reprehenderit quis
                        - count: -78561994
                          name: 'occaecat '
                      env_tags:
                        - count: 97741697
                          name: eu
                        - count: 5329312
                          name: culpa voluptate elit eu proident
                      service_tags:
                        - count: -39366797
                          name: ex amet sit in
                        - count: -85295873
                          name: et par
                      slo_type:
                        - count: -87683078
                          name: 54757026.377105236
                        - count: -49631533
                          name: -82458261.46223506
                      target:
                        - count: 61990068
                          name: 94727331.90953898
                        - count: -72996223
                          name: -3945662.7790646106
                      team_tags:
                        - count: 85111895
                          name: in
                        - count: 63607810
                          name: eiusmod commodo
                      timeframe:
                        - count: 42822494
                          name: occaecat magna ut Ut
                        - count: -88783558
                          name: id nulla fugiat qui
                    slos:
                      - data:
                          attributes:
                            all_tags:
                              - env:prod
                              - app:core
                            created_at: 55369356
                            creator:
                              email: elit nulla Duis Excepteur
                              id: 88318285
                              name: labore nostrud
                            description: commodo Ut
                            env_tags:
                              - ad est dolor veniam in
                              - sint laboris
                            groups:
                              - env:prod
                              - role:mysql
                            modified_at: -88274597
                            monitor_ids:
                              - -90761426
                              - -33995089
                            name: Custom Metric SLO
                            overall_status:
                              - error: minim et velit officia esse
                                indexed_at: 1662496260
                                raw_error_budget_remaining:
                                  unit: requests
                                  value: 60
                                span_precision: 2
                                status: 100
                                target: 99
                                timeframe: 30d
                              - error: ex Excepteur in
                                indexed_at: 1662496260
                                raw_error_budget_remaining:
                                  unit: requests
                                  value: 60
                                span_precision: 2
                                status: 100
                                target: 99
                                timeframe: 30d
                            query:
                              denominator: sum:my.custom.metric{*}.as_count()
                              metrics:
                                - my.custom.metric
                                - my.other.custom.metric
                              numerator: sum:my.custom.metric{type:good}.as_count()
                            service_tags:
                              - laborum irure cupidatat
                              - minim et Duis culpa
                            slo_type: metric
                            team_tags:
                              - ad anim officia adipisicing
                              - ad et non
                            thresholds:
                              - target: 95
                                target_display: '95'
                                timeframe: 7d
                              - target: 95
                                target_display: '95'
                                timeframe: 30d
                                warning: 97
                                warning_display: '97'
                          id: id qui fugiat
                          type: aliqua Ut ullamco
                      - data:
                          attributes:
                            all_tags:
                              - env:prod
                              - app:core
                            created_at: -86775912
                            creator:
                              email: dolor ut eiusmod dolore
                              id: -89939482
                              name: nost
                            description: veniam Lorem ut
                            env_tags:
                              - enim tempor lab
                              - ipsum
                            groups:
                              - env:prod
                              - role:mysql
                            modified_at: -97214733
                            monitor_ids:
                              - 77302748
                              - 55314002
                            name: Custom Metric SLO
                            overall_status:
                              - error: ex sunt
                                indexed_at: 1662496260
                                raw_error_budget_remaining:
                                  unit: requests
                                  value: 60
                                span_precision: 2
                                status: 100
                                target: 99
                                timeframe: 30d
                              - error: culpa incididunt ea mollit
                                indexed_at: 1662496260
                                raw_error_budget_remaining:
                                  unit: requests
                                  value: 60
                                span_precision: 2
                                status: 100
                                target: 99
                                timeframe: 30d
                            query:
                              denominator: sum:my.custom.metric{*}.as_count()
                              metrics:
                                - my.custom.metric
                                - my.other.custom.metric
                              numerator: sum:my.custom.metric{type:good}.as_count()
                            service_tags:
                              - commodo fugiat aliquip reprehenderit
                              - dolor in velit
                            slo_type: metric
                            team_tags:
                              - consectetur labore proident ipsum esse
                              - aute
                            thresholds:
                              - target: 95
                                target_display: '95'
                                timeframe: 7d
                              - target: 95
                                target_display: '95'
                                timeframe: 30d
                                warning: 97
                                warning_display: '97'
                          id: minim tempor eu sint consectetur
                          type: proident et sed
                  type: ''
                links:
                  first: nisi ut nulla eiusmod aute
                  last: velit sed
                  next: aliquip velit
                  prev: con
                  self: nulla labore do
                meta:
                  pagination:
                    first_number: 53064201
                    last_number: 579426
                    next_number: 64921291
                    number: -85127775
                    prev_number: 51139683
                    size: 47275410
                    total: 14773722
                    type: aute aliquip D
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/slo/{slo_id}:
    delete:
      tags:
        - Service Level Objectives
      summary: Delete an SLO
      description: |-
        Permanently delete the specified service level objective object.

        If an SLO is used in a dashboard, the `DELETE /v1/slo/` endpoint returns
        a 409 conflict error because the SLO is referenced in a dashboard.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: force
          in: query
          schema:
            type: string
          description: >-
            Delete the monitor even if it's referenced by other resources (for
            example SLO, composite monitor).
          example: proident
        - name: slo_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the service level objective.
          example: proident
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - adipisicing proident
                  - reprehenderit Lorem
                errors:
                  incididunt_0ec: pariatur ut
                  nisi_c: consectetur veniam Lorem
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '409':
          description: Conflict
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - adipisicing proident
                  - reprehenderit Lorem
                errors:
                  incididunt_0ec: pariatur ut
                  nisi_c: consectetur veniam Lorem
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    get:
      tags:
        - Service Level Objectives
      summary: Get an SLO's details
      description: Get a service level objective object.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: with_configured_alert_ids
          in: query
          schema:
            type: boolean
          description: Get the IDs of SLO monitors that reference this SLO.
          example: 'true'
        - name: slo_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the service level objective object.
          example: proident
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  configured_alert_ids:
                    - 123
                    - 456
                    - 789
                  created_at: 39534791
                  creator:
                    email: adipisicing incididunt
                    handle: nostrud deserunt reprehenderit
                    name: in labore quis
                  description: laboris labore magna
                  groups:
                    - env:prod
                    - role:mysql
                  id: enim Lorem qui pari
                  modified_at: -20701680
                  monitor_ids:
                    - -58135082
                    - -10250856
                  monitor_tags:
                    - qui nulla dolor
                    - do pariatur incididunt ma
                  name: Custom Metric SLO
                  query:
                    numerator: sum:my.custom.metric{type:good}.as_count()
                    denominator: sum:my.custom.metric{*}.as_count()
                  tags:
                    - env:prod
                    - app:core
                  thresholds:
                    - target: 95
                      timeframe: 7d
                    - target: 95
                      timeframe: 30d
                      warning: 97
                  type: metric
                errors:
                  - aliqua minim Duis labore
                  - eiusmod velit
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    put:
      tags:
        - Service Level Objectives
      summary: Update an SLO
      description: Update the specified service level objective object.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                name: Custom Metric SLO
                thresholds:
                  - target: 95
                    timeframe: 7d
                  - target: 95
                    timeframe: 30d
                    warning: 97
                type: metric
                description: qui sunt
                groups:
                  - env:prod
                  - role:mysql
                monitor_ids:
                  - -75771966
                  - 31850975
                monitor_tags:
                  - nostrud non aute
                  - 'aliquip '
                query:
                  numerator: sum:my.custom.metric{type:good}.as_count()
                  denominator: sum:my.custom.metric{*}.as_count()
                tags:
                  - env:prod
                  - app:core
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: slo_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the service level objective object.
          example: proident
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - name: Custom Metric SLO
                    thresholds:
                      - target: 95
                        timeframe: 7d
                      - target: 95
                        timeframe: 30d
                        warning: 97
                    type: metric
                    created_at: 92821078
                    creator:
                      email: do sint et
                      handle: Duis velit Excepteur
                      name: p
                    description: pariatur amet exercitation qui fug
                    groups:
                      - env:prod
                      - role:mysql
                    id: culpa adipis
                    modified_at: -97818449
                    monitor_ids:
                      - 79744184
                      - -55176037
                    monitor_tags:
                      - in do in dolor deserunt
                      - dolore laboris et
                    query:
                      numerator: sum:my.custom.metric{type:good}.as_count()
                      denominator: sum:my.custom.metric{*}.as_count()
                    tags:
                      - env:prod
                      - app:core
                  - name: Custom Metric SLO
                    thresholds:
                      - target: 95
                        timeframe: 7d
                      - target: 95
                        timeframe: 30d
                        warning: 97
                    type: metric
                    created_at: -95356230
                    creator:
                      email: in incididunt magna cupidatat
                      handle: enim mollit
                      name: officia qui consequat cupidatat
                    description: tempor id
                    groups:
                      - env:prod
                      - role:mysql
                    id: quis reprehenderit dolor cillum
                    modified_at: -69887018
                    monitor_ids:
                      - 58108022
                      - -7805636
                    monitor_tags:
                      - qui cupidatat aliqua tempor voluptate
                      - nisi reprehend
                    query:
                      numerator: sum:my.custom.metric{type:good}.as_count()
                      denominator: sum:my.custom.metric{*}.as_count()
                    tags:
                      - env:prod
                      - app:core
                errors:
                  - cillum elit est quis
                  - laborum ea
                metadata:
                  page:
                    total_count: -74085648
                    total_filtered_count: 97170809
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/slo/{slo_id}/corrections:
    get:
      tags:
        - Service Level Objectives
      summary: Get Corrections For an SLO
      description: Get corrections applied to an SLO
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: slo_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the service level objective object.
          example: proident
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - attributes:
                      category: Scheduled Maintenance
                      created_at: 5400750
                      creator:
                        email: Ut tempor voluptate
                        handle: in
                        name: sint
                      description: est nisi et qui in
                      duration: 3600
                      end: -5199931
                      modified_at: -27710341
                      modifier:
                        email: id magna
                        handle: nulla magna aliqua
                        name: 'est '
                      rrule: FREQ=DAILY;INTERVAL=10;COUNT=5
                      slo_id: dolor in pariatur
                      start: 5955272
                      timezone: occaecat
                    id: veniam ipsum labore
                    type: correction
                  - attributes:
                      category: Scheduled Maintenance
                      created_at: 50831039
                      creator:
                        email: Excepteur aute
                        handle: mollit
                        name: reprehenderit cillum ea aliquip sit
                      description: ipsum do ut consequat
                      duration: 3600
                      end: 64349545
                      modified_at: -19455045
                      modifier:
                        email: ipsum cupidatat
                        handle: officia sint aliquip dolor
                        name: culpa ex
                      rrule: FREQ=DAILY;INTERVAL=10;COUNT=5
                      slo_id: qui
                      start: -85930220
                      timezone: do incididun
                    id: fugiat proident
                    type: correction
                meta:
                  page:
                    total_count: 28620248
                    total_filtered_count: -74558109
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/slo/{slo_id}/history:
    get:
      tags:
        - Service Level Objectives
      summary: Get an SLO's history
      description: >-
        Get a specific SLO’s history, regardless of its SLO type.


        The detailed history data is structured according to the source data
        type.

        For example, metric data is included for event SLOs that use

        the metric source, and monitor SLO types include the monitor transition
        history.


        **Note:** There are different response formats for event based and time
        based SLOs.

        Examples of both are shown.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: from_ts
          in: query
          schema:
            type: number
          description: >-
            (Required) The `from` timestamp for the query window in epoch
            seconds.
          example: '-70569764'
        - name: to_ts
          in: query
          schema:
            type: number
          description: (Required) The `to` timestamp for the query window in epoch seconds.
          example: '-70569764'
        - name: target
          in: query
          schema:
            type: number
          description: >-
            The SLO target. If `target` is passed in, the response will include
            the remaining error budget and a timeframe value of `custom`.
          example: '55.37451417298613'
        - name: apply_correction
          in: query
          schema:
            type: boolean
          description: >-
            Defaults to `true`. If any SLO corrections are applied and this
            parameter is set to `false`,

            then the corrections will not be applied and the SLI values will not
            be affected.
          example: 'true'
        - name: slo_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the service level objective object.
          example: proident
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  from_ts: 1615323990
                  group_by:
                    - non amet eu ea
                    - anim aliqua sint d
                  groups:
                    - error_budget_remaining:
                        7d: 100
                      errors:
                        - error_type: ''
                          error_message: ''
                        - error_type: ''
                          error_message: ''
                      group: name
                      history:
                        - - 1579212382
                          - 0
                      monitor_modified: 1615867200
                      monitor_type: string
                      name: string
                      precision: 2
                      preview: true
                      sli_value: 99.99
                      span_precision: 2
                      uptime: 99.99
                    - error_budget_remaining:
                        7d: 100
                      errors:
                        - error_type: ''
                          error_message: ''
                        - error_type: ''
                          error_message: ''
                      group: name
                      history:
                        - - 1579212382
                          - 0
                      monitor_modified: 1615867200
                      monitor_type: string
                      name: string
                      precision: 2
                      preview: true
                      sli_value: 99.99
                      span_precision: 2
                      uptime: 99.99
                  monitors:
                    - error_budget_remaining:
                        7d: 100
                      errors:
                        - error_type: ''
                          error_message: ''
                        - error_type: ''
                          error_message: ''
                      group: name
                      history:
                        - - 1579212382
                          - 0
                      monitor_modified: 1615867200
                      monitor_type: string
                      name: string
                      precision: 2
                      preview: true
                      sli_value: 99.99
                      span_precision: 2
                      uptime: 99.99
                    - error_budget_remaining:
                        7d: 100
                      errors:
                        - error_type: ''
                          error_message: ''
                        - error_type: ''
                          error_message: ''
                      group: name
                      history:
                        - - 1579212382
                          - 0
                      monitor_modified: 1615867200
                      monitor_type: string
                      name: string
                      precision: 2
                      preview: true
                      sli_value: 99.99
                      span_precision: 2
                      uptime: 99.99
                  overall:
                    error_budget_remaining:
                      7d: 100
                    errors:
                      - error_type: ''
                        error_message: ''
                      - error_type: ''
                        error_message: ''
                    group: name
                    history:
                      - - 1579212382
                        - 0
                    monitor_modified: 1615867200
                    monitor_type: string
                    name: string
                    precision:
                      30d: 1
                      7d: 2
                    preview: true
                    sli_value: 99.99
                    span_precision: 2
                    uptime: 99.99
                  series:
                    res_type: ''
                    interval: 0
                    resp_version: 0
                    query: ''
                    times: []
                    numerator:
                      count: 0
                      sum: 0
                      metadata: {}
                    denominator:
                      count: 0
                      sum: 0
                      metadata: {}
                    message: ''
                  thresholds:
                    my_service:
                      target: 95
                      timeframe: 7d
                  to_ts: 1615928790
                  type: metric
                  type_id: 0
                errors:
                  - error: reprehenderit tempor qui et
                  - error: laborum nulla aute nisi
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/slo/correction:
    get:
      tags:
        - Service Level Objective Corrections
      summary: Get all SLO corrections
      description: Get all Service Level Objective corrections.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: offset
          in: query
          schema:
            type: number
          description: >-
            The specific offset to use as the beginning of the returned
            response.
          example: '-70569764'
        - name: limit
          in: query
          schema:
            type: number
          description: >-
            The number of SLO corrections to return in the response. Default is
            25.
          example: '-70569764'
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - attributes:
                      category: Scheduled Maintenance
                      created_at: 5400750
                      creator:
                        email: Ut tempor voluptate
                        handle: in
                        name: sint
                      description: est nisi et qui in
                      duration: 3600
                      end: -5199931
                      modified_at: -27710341
                      modifier:
                        email: id magna
                        handle: nulla magna aliqua
                        name: 'est '
                      rrule: FREQ=DAILY;INTERVAL=10;COUNT=5
                      slo_id: dolor in pariatur
                      start: 5955272
                      timezone: occaecat
                    id: veniam ipsum labore
                    type: correction
                  - attributes:
                      category: Scheduled Maintenance
                      created_at: 50831039
                      creator:
                        email: Excepteur aute
                        handle: mollit
                        name: reprehenderit cillum ea aliquip sit
                      description: ipsum do ut consequat
                      duration: 3600
                      end: 64349545
                      modified_at: -19455045
                      modifier:
                        email: ipsum cupidatat
                        handle: officia sint aliquip dolor
                        name: culpa ex
                      rrule: FREQ=DAILY;INTERVAL=10;COUNT=5
                      slo_id: qui
                      start: -85930220
                      timezone: do incididun
                    id: fugiat proident
                    type: correction
                meta:
                  page:
                    total_count: 28620248
                    total_filtered_count: -74558109
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    post:
      tags:
        - Service Level Objective Corrections
      summary: Create an SLO correction
      description: Create an SLO Correction.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                data:
                  type: correction
                  attributes:
                    slo_id: sloId
                    start: 1600000000
                    category: Scheduled Maintenance
                    description: qu
                    duration: 1600000000
                    end: 1600000000
                    rrule: FREQ=DAILY;INTERVAL=10;COUNT=5
                    timezone: UTC
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  attributes:
                    category: Scheduled Maintenance
                    created_at: 25914732
                    creator:
                      email: velit est irure ut
                      handle: ipsum deserunt aliquip enim velit
                      name: quis mollit
                    description: sit dolore
                    duration: 3600
                    end: 31455063
                    modified_at: -56757735
                    modifier:
                      email: ullamco in volup
                      handle: 'non occaecat '
                      name: irure ipsum
                    rrule: FREQ=DAILY;INTERVAL=10;COUNT=5
                    slo_id: minim commodo reprehenderit
                    start: -22412306
                    timezone: quis c
                  id: labore pariatur sunt fugiat
                  type: correction
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/slo/correction/{slo_correction_id}:
    delete:
      tags:
        - Service Level Objective Corrections
      summary: Delete an SLO correction
      description: Permanently delete the specified SLO correction object.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: slo_correction_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the SLO correction object.
          example: proident
      responses:
        '204':
          description: No Content
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    get:
      tags:
        - Service Level Objective Corrections
      summary: Get an SLO correction for an SLO
      description: Get an SLO correction.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: slo_correction_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the SLO correction object.
          example: proident
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  attributes:
                    category: Scheduled Maintenance
                    created_at: 25914732
                    creator:
                      email: velit est irure ut
                      handle: ipsum deserunt aliquip enim velit
                      name: quis mollit
                    description: sit dolore
                    duration: 3600
                    end: 31455063
                    modified_at: -56757735
                    modifier:
                      email: ullamco in volup
                      handle: 'non occaecat '
                      name: irure ipsum
                    rrule: FREQ=DAILY;INTERVAL=10;COUNT=5
                    slo_id: minim commodo reprehenderit
                    start: -22412306
                    timezone: quis c
                  id: labore pariatur sunt fugiat
                  type: correction
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    patch:
      tags:
        - Service Level Objective Corrections
      summary: Update an SLO correction
      description: Update the specified SLO correction object.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                data:
                  attributes:
                    category: Scheduled Maintenance
                    description: cupidatat
                    duration: 3600
                    end: 1600000000
                    rrule: FREQ=DAILY;INTERVAL=10;COUNT=5
                    start: 1600000000
                    timezone: UTC
                  type: correction
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: slo_correction_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the SLO correction object.
          example: proident
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  attributes:
                    category: Scheduled Maintenance
                    created_at: 25914732
                    creator:
                      email: velit est irure ut
                      handle: ipsum deserunt aliquip enim velit
                      name: quis mollit
                    description: sit dolore
                    duration: 3600
                    end: 31455063
                    modified_at: -56757735
                    modifier:
                      email: ullamco in volup
                      handle: 'non occaecat '
                      name: irure ipsum
                    rrule: FREQ=DAILY;INTERVAL=10;COUNT=5
                    slo_id: minim commodo reprehenderit
                    start: -22412306
                    timezone: quis c
                  id: labore pariatur sunt fugiat
                  type: correction
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/integration/slack:
    delete:
      tags:
        - Slack Integration
      summary: Delete a Slack integration
      description: Delete a Datadog-Slack integration.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    get:
      tags:
        - Slack Integration
      summary: Get info about a Slack integration
      description: Get all information about your Datadog-Slack integration.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example: {}
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    post:
      tags:
        - Slack Integration
      summary: Create a Slack integration
      description: >-
        Create a Datadog-Slack integration. Once created, add a channel to it
        with the

        [Add channels to Slack integration
        endpoint](https://docs.datadoghq.com/api/?lang=bash#add-channels-to-slack-integration).


        This method updates your integration configuration by **adding**

        your new configuration to the existing one in your Datadog organization.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                service_hooks:
                  - account: Main_Account
                    url: https://hooks.slack.com/services/1/1/1
                  - account: doghouse
                    url: https://hooks.slack.com/services/2/2/2
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '204':
          description: No Content
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    put:
      tags:
        - Slack Integration
      summary: Add channels to Slack integration
      description: >-
        Add channels to your existing Datadog-Slack integration.


        This method updates your integration configuration by **replacing**

        your current configuration with the new one sent to your Datadog
        organization.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                channels:
                  - account: Main_Account
                    channel_name: '#channel_name_main_account'
                    transfer_all_user_comments: false
                  - account: doghouse
                    channel_name: '#channel_name_doghouse'
                    transfer_all_user_comments: false
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '204':
          description: No Content
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/integration/slack/configuration/accounts/{account_name}/channels:
    get:
      tags:
        - Slack Integration
      summary: Get all channels in a Slack integration
      description: >-
        Get a list of all channels configured for your Datadog-Slack
        integration.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: account_name
          in: path
          schema:
            type: string
          required: true
          description: (Required) Your Slack account name.
          example: proident
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                - display:
                    message: true
                    notified: true
                    snapshot: true
                    tags: true
                  name: '#channel_name_main_account'
                - display:
                    message: true
                    notified: true
                    snapshot: false
                    tags: true
                  name: '#channel_name_doghouse'
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    post:
      tags:
        - Slack Integration
      summary: Create a Slack integration channel
      description: Add a channel to your Datadog-Slack integration.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                display:
                  message: true
                  notified: true
                  snapshot: true
                  tags: true
                name: '#general'
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: account_name
          in: path
          schema:
            type: string
          required: true
          description: (Required) Your Slack account name.
          example: proident
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                display:
                  message: true
                  notified: true
                  snapshot: true
                  tags: true
                name: '#general'
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/integration/slack/configuration/accounts/{account_name}/channels/{channel_name}:
    delete:
      tags:
        - Slack Integration
      summary: Remove a Slack integration channel
      description: Remove a channel from your Datadog-Slack integration.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: account_name
          in: path
          schema:
            type: string
          required: true
          description: (Required) Your Slack account name.
          example: proident
        - name: channel_name
          in: path
          schema:
            type: string
          required: true
          description: (Required) The name of the Slack channel being operated on.
          example: proident
      responses:
        '204':
          description: No Content
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    get:
      tags:
        - Slack Integration
      summary: Get a Slack integration channel
      description: Get a channel configured for your Datadog-Slack integration.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: account_name
          in: path
          schema:
            type: string
          required: true
          description: (Required) Your Slack account name.
          example: proident
        - name: channel_name
          in: path
          schema:
            type: string
          required: true
          description: (Required) The name of the Slack channel being operated on.
          example: proident
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                display:
                  message: true
                  notified: true
                  snapshot: true
                  tags: true
                name: '#general'
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    patch:
      tags:
        - Slack Integration
      summary: Update a Slack integration channel
      description: Update a channel used in your Datadog-Slack integration.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                display:
                  message: true
                  notified: true
                  snapshot: true
                  tags: true
                name: '#general'
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: account_name
          in: path
          schema:
            type: string
          required: true
          description: (Required) Your Slack account name.
          example: proident
        - name: channel_name
          in: path
          schema:
            type: string
          required: true
          description: (Required) The name of the Slack channel being operated on.
          example: proident
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                display:
                  message: true
                  notified: true
                  snapshot: true
                  tags: true
                name: '#general'
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/graph/snapshot:
    get:
      tags:
        - Snapshots
      summary: Take graph snapshots
      description: >-
        Take graph snapshots.

        **Note**: When a snapshot is created, there is some delay before it is
        available.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: metric_query
          in: query
          schema:
            type: string
          description: The metric query.
          example: proident
        - name: start
          in: query
          schema:
            type: number
          description: (Required) The POSIX timestamp of the start of the query.
          example: '-70569764'
        - name: end
          in: query
          schema:
            type: number
          description: (Required) The POSIX timestamp of the end of the query.
          example: '-70569764'
        - name: event_query
          in: query
          schema:
            type: string
          description: A query that adds event bands to the graph.
          example: proident
        - name: graph_def
          in: query
          schema:
            type: string
          description: >-
            A JSON document defining the graph. `graph_def` can be used instead
            of `metric_query`.

            The JSON document uses the [grammar defined
            here](https://docs.datadoghq.com/graphing/graphing_json/#grammar)

            and should be formatted to a single line then URL encoded.
          example: proident
        - name: title
          in: query
          schema:
            type: string
          description: >-
            A title for the graph. If no title is specified, the graph does not
            have a title.
          example: proident
        - name: height
          in: query
          schema:
            type: number
          description: >-
            The height of the graph. If no height is specified, the graph's
            original height is used.
          example: '-70569764'
        - name: width
          in: query
          schema:
            type: number
          description: >-
            The width of the graph. If no width is specified, the graph's
            original width is used.
          example: '-70569764'
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                graph_def: commodo aliqua
                metric_query: sed Excepteur aute
                snapshot_url: https://app.datadoghq.com/s/f12345678/aaa-bbb-ccc
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/synthetics/ci/batch/{batch_id}:
    get:
      tags:
        - Synthetics
      summary: Get details of batch
      description: Get a batch's updated details.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: batch_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the batch.
          example: proident
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  metadata:
                    ci:
                      pipeline:
                        url: deserunt laborum adipisicing
                      provider:
                        name: incididunt quis laboris Excepteur
                    git:
                      branch: aliqua consectetur ullamco
                      commitSha: esse consequat dolor et
                  results:
                    - device: laptop_large
                      duration: -35786098.236925445
                      execution_rule: non_blocking
                      location: ex amet
                      result_id: laboris proident nisi
                      retries: -60095100.930778675
                      status: passed
                      test_name: anim cupidatat laboris
                      test_public_id: consequat ullamco in
                      test_type: browser
                    - device: laptop_large
                      duration: 47490338.845116585
                      execution_rule: non_blocking
                      location: ea cillum
                      result_id: proident
                      retries: -83882735.94516371
                      status: passed
                      test_name: ipsum culpa
                      test_public_id: ea commodo
                      test_type: api
                  status: passed
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/synthetics/locations:
    get:
      tags:
        - Synthetics
      summary: Get all locations (public and private)
      description: |-
        Get the list of public and private locations available for Synthetic
        tests. No arguments required.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                locations:
                  - id: in culpa
                    name: non esse in exercitation
                  - id: officia Lorem sit proident Ut
                    name: cillum elit adipisicing
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/synthetics/private-locations:
    post:
      tags:
        - Synthetics
      summary: Create a private location
      description: Create a new Synthetics private location.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                name: New private location
                description: Description of private location
                tags:
                  - team:front
                metadata:
                  restricted_roles:
                    - xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                config: {}
                private_location:
                  name: New private location
                  description: Description of private location
                  tags:
                    - team:front
                  id: aute irure minim et culpa
                  metadata:
                    restricted_roles:
                      - xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
                  secrets:
                    authentication:
                      id: mollit aute
                      key: nostrud esse anim
                    config_decryption:
                      key: e
                result_encryption:
                  id: minim qui et pariatur
                  key: in qui do
        '402':
          description: Payment Required
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/synthetics/private-locations/{location_id}:
    delete:
      tags:
        - Synthetics
      summary: Delete a private location
      description: Delete a Synthetics private location.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: location_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the private location.
          example: proident
      responses:
        '204':
          description: No Content
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    get:
      tags:
        - Synthetics
      summary: Get a private location
      description: Get a Synthetics private location.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: location_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the private location.
          example: proident
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                name: New private location
                description: Description of private location
                tags:
                  - team:front
                id: sit enim cupidatat nostrud tempor
                metadata:
                  restricted_roles:
                    - xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
                secrets:
                  authentication:
                    id: aliqua incididunt eu aliquip
                    key: id dolore
                  config_decryption:
                    key: id dolore quis
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    put:
      tags:
        - Synthetics
      summary: Edit a private location
      description: Edit a Synthetics private location.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                name: New private location
                description: Description of private location
                tags:
                  - team:front
                metadata:
                  restricted_roles:
                    - xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: location_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the private location.
          example: proident
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                name: New private location
                description: Description of private location
                tags:
                  - team:front
                id: sit enim cupidatat nostrud tempor
                metadata:
                  restricted_roles:
                    - xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
                secrets:
                  authentication:
                    id: aliqua incididunt eu aliquip
                    key: id dolore
                  config_decryption:
                    key: id dolore quis
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/synthetics/tests:
    get:
      tags:
        - Synthetics
      summary: Get the list of all tests
      description: Get the list of all Synthetic tests.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                tests:
                  - config:
                      configVariables:
                        - description: Example for the variable.
                          type: string
                        - description: Example for the variable.
                          type: string
                      request:
                        allow_insecure: true
                        basicAuth:
                          password: PaSSw0RD!
                          username: my_username
                          type: web
                        body: sed mollit
                        bodyType: text/plain
                        certificate:
                          cert:
                            content: anim minim
                            filename: veniam anim dolor ea
                            updatedAt: laboris sunt
                          key:
                            content: id est amet Duis
                            filename: mollit ipsum quis tempor
                            updatedAt: sit amet
                        dnsServer: ex esse
                        dnsServerPort: 12754
                        follow_redirects: true
                        headers:
                          laborum_0b: cu
                        host: aute deserunt anim
                        message: nostrud id dolore
                        metadata:
                          aliqua_2: tempor cillum fugiat ut
                        method: GET
                        noSavingResponseBody: true
                        numberOfPackets: 5
                        port: 30565889
                        proxy:
                          url: https://example.com
                          headers:
                            non_e3e: voluptate tempor
                            nulla_3c: amet consectetur
                            Excepteur12e: labore magna dolore laboris fugiat
                        query: {}
                        servername: non Lorem adipisicing ad
                        service: in nulla minim
                        shouldTrackHops: true
                        timeout: 22001995.444548413
                        url: https://example.com
                      variables:
                        - description: Example for the variable.
                          type: string
                        - description: Example for the variable.
                          type: string
                    creator:
                      email: Ut aliqua laborum
                      handle: exercitation consequat proident
                      name: ex laborum ad
                    locations:
                      - aws:eu-west-3
                    message: tempor
                    monitor_id: -29352045
                    name: anim ex occaecat amet
                    options:
                      accept_self_signed: false
                      allow_insecure: true
                      checkCertificateRevocation: true
                      ci:
                        executionRule: blocking
                      device_ids:
                        - laptop_large
                        - laptop_large
                      disableCors: false
                      disableCsp: true
                      follow_redirects: true
                      ignoreServerCertificateError: true
                      initialNavigationTimeout: 56811942
                      min_failure_duration: 97947251
                      min_location_failed: -64618565
                      monitor_name: aliquip Lorem aute
                      monitor_options:
                        renotify_interval: 795
                      monitor_priority: 1
                      noScreenshot: true
                      restricted_roles:
                        - xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
                      retry:
                        count: 54410656
                        interval: -66119248.84141027
                      rumSettings:
                        applicationId: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
                        clientTokenId: 12345
                        isEnabled: true
                      tick_every: 68612
                    public_id: ea aliquip incididunt irure dolore
                    status: live
                    steps:
                      - allowFailure: false
                        isCritical: false
                        name: esse minim id ullamco
                        noScreenshot: true
                        params: {}
                        timeout: 83338881
                        type: assertElementContent
                      - allowFailure: false
                        isCritical: true
                        name: irure in commodo est
                        noScreenshot: false
                        params: {}
                        timeout: -7265975
                        type: assertElementContent
                    subtype: http
                    tags:
                      - sint dolor
                      - ad
                    type: api
                  - config:
                      configVariables:
                        - description: Example for the variable.
                          type: string
                        - description: Example for the variable.
                          type: string
                      request:
                        allow_insecure: false
                        basicAuth:
                          password: PaSSw0RD!
                          username: my_username
                          type: web
                        body: enim Excepteur reprehenderit
                        bodyType: text/plain
                        certificate:
                          cert:
                            content: incididunt
                            filename: deserunt Lorem ut
                            updatedAt: et ullamco
                          key:
                            content: elit cupidatat occaecat eiusmod
                            filename: nulla
                            updatedAt: et labore veniam Ut
                        dnsServer: exercitation cillum consequat
                        dnsServerPort: 58425
                        follow_redirects: false
                        headers:
                          deserunt_c: nulla aute laboris
                          incididunt_a4: culpa pariatur reprehenderit
                        host: mollit culpa
                        message: cupida
                        metadata:
                          elitf7: nisi nostrud
                          eiusmod_cd: minim dolore ipsum
                          Excepteur_2: Duis reprehenderit irure commodo
                        method: GET
                        noSavingResponseBody: true
                        numberOfPackets: 7
                        port: -74047254
                        proxy:
                          url: https://example.com
                          headers:
                            inbc: culpa aliquip ad
                            proident_2b: veniam dolor esse
                        query: {}
                        servername: nostrud id
                        service: ex et aliqua aute
                        shouldTrackHops: true
                        timeout: 53740998.13985479
                        url: https://example.com
                      variables:
                        - description: Example for the variable.
                          type: string
                        - description: Example for the variable.
                          type: string
                    creator:
                      email: non magna consectetur qui
                      handle: deserunt quis pariatur
                      name: Lorem voluptate sunt offic
                    locations:
                      - aws:eu-west-3
                    message: dolor do incididunt
                    monitor_id: -70291970
                    name: sint non enim nisi
                    options:
                      accept_self_signed: false
                      allow_insecure: false
                      checkCertificateRevocation: true
                      ci:
                        executionRule: non_blocking
                      device_ids:
                        - laptop_large
                        - laptop_large
                      disableCors: false
                      disableCsp: false
                      follow_redirects: false
                      ignoreServerCertificateError: true
                      initialNavigationTimeout: 1829252
                      min_failure_duration: 74100611
                      min_location_failed: -89828296
                      monitor_name: id nulla ea
                      monitor_options:
                        renotify_interval: 1400
                      monitor_priority: 3
                      noScreenshot: false
                      restricted_roles:
                        - xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
                      retry:
                        count: -11924868
                        interval: -61148174.878489405
                      rumSettings:
                        applicationId: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
                        clientTokenId: 12345
                        isEnabled: true
                      tick_every: 190554
                    public_id: id anim eu
                    status: live
                    steps:
                      - allowFailure: true
                        isCritical: true
                        name: id aliqua nisi
                        noScreenshot: true
                        params: {}
                        timeout: -94957665
                        type: assertElementContent
                      - allowFailure: false
                        isCritical: true
                        name: mollit velit
                        noScreenshot: true
                        params: {}
                        timeout: -534732
                        type: assertElementContent
                    subtype: http
                    tags:
                      - ut magna
                      - proident esse consequat
                    type: api
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    post:
      tags:
        - Synthetics
      summary: Create a test
      description: >-
        This endpoint is deprecated. To create a test, use [Create an API
        test](https://docs.datadoghq.com/api/latest/synthetics/#create-an-api-test),
        or [Create a browser
        test](https://docs.datadoghq.com/api/latest/synthetics/#create-a-browser-test).
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                config:
                  configVariables:
                    - description: Example for the variable.
                      type: string
                    - description: Example for the variable.
                      type: string
                  request:
                    allow_insecure: false
                    basicAuth:
                      password: PaSSw0RD!
                      username: my_username
                      type: web
                    body: tempor sed amet est
                    bodyType: text/plain
                    certificate:
                      cert:
                        content: elit consectetur laborum commodo
                        filename: dolor proident
                        updatedAt: Lorem ipsum
                      key:
                        content: nostrud ex aliquip
                        filename: consecte
                        updatedAt: mollit velit laborum et
                    dnsServer: veniam
                    dnsServerPort: 24481
                    follow_redirects: false
                    headers:
                      et6: irure consequat nisi ad
                      anim_: d
                    host: laboris eiusmod ad nisi
                    message: veniam
                    metadata:
                      esse_71: culpa nulla eu magna
                      sit_f: dolor minim
                    method: GET
                    noSavingResponseBody: false
                    numberOfPackets: 9
                    port: 39948032
                    proxy:
                      url: https://example.com
                      headers:
                        ex_15d: ad proident id voluptate cillum
                        dob: Duis
                        amet91: incididunt
                        eiusmod6: sit et fugiat sint deserunt
                    query: {}
                    servername: irure aliquip eiusmod enim exercitation
                    service: Ut id est veniam
                    shouldTrackHops: false
                    timeout: 28909376.229924083
                    url: https://example.com
                  variables:
                    - description: Example for the variable.
                      type: string
                    - description: Example for the variable.
                      type: string
                locations:
                  - aws:eu-west-3
                message: c
                name: ut in
                options:
                  accept_self_signed: false
                  allow_insecure: false
                  checkCertificateRevocation: false
                  ci:
                    executionRule: skipped
                  device_ids:
                    - laptop_large
                    - laptop_large
                  disableCors: true
                  disableCsp: true
                  follow_redirects: true
                  ignoreServerCertificateError: true
                  initialNavigationTimeout: -31792175
                  min_failure_duration: 79967859
                  min_location_failed: -27248557
                  monitor_name: ipsum ea qui sit fugiat
                  monitor_options:
                    renotify_interval: 202
                  monitor_priority: 1
                  noScreenshot: true
                  restricted_roles:
                    - xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
                  retry:
                    count: -88765405
                    interval: 52931373.00363368
                  rumSettings:
                    applicationId: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
                    clientTokenId: 12345
                    isEnabled: true
                  tick_every: 214620
                status: live
                steps:
                  - allowFailure: false
                    isCritical: true
                    name: minim eiusmo
                    noScreenshot: true
                    params: {}
                    timeout: 24433399
                    type: assertElementContent
                  - allowFailure: false
                    isCritical: true
                    name: Duis Lorem sunt
                    noScreenshot: true
                    params: {}
                    timeout: -6244235
                    type: assertElementContent
                subtype: http
                tags:
                  - tempor officia esse
                  - ad in a
                type: browser
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                config:
                  configVariables:
                    - description: Example for the variable.
                      type: string
                    - description: Example for the variable.
                      type: string
                  request:
                    allow_insecure: true
                    basicAuth:
                      password: PaSSw0RD!
                      username: my_username
                      type: web
                    body: veniam mollit non
                    bodyType: text/plain
                    certificate:
                      cert:
                        content: enim qui nulla culpa do
                        filename: esse quis
                        updatedAt: id veniam
                      key:
                        content: cillum dolore
                        filename: adipisicing
                        updatedAt: in est
                    dnsServer: amet
                    dnsServerPort: 31007
                    follow_redirects: true
                    headers:
                      Duis_e: sint nulla sit commodo
                      dolore_1d0: aliqua occaecat laboris ut
                      velit_3e: est sint culpa
                      laborum9: incididunt d
                    host: consequat exercitation ad commodo elit
                    message: elit magna ex
                    metadata:
                      Ut_1: Ut
                    method: GET
                    noSavingResponseBody: false
                    numberOfPackets: 0
                    port: 89884784
                    proxy:
                      url: https://example.com
                      headers:
                        veniam5ee: pariatur veniam ipsum
                    query: {}
                    servername: 'aliqua laborum '
                    service: pariatur deserunt consectetur proident laborum
                    shouldTrackHops: true
                    timeout: 85115446.29834276
                    url: https://example.com
                  variables:
                    - description: Example for the variable.
                      type: string
                    - description: Example for the variable.
                      type: string
                creator:
                  email: cillum minim adipisicing
                  handle: occaecat in lab
                  name: in dolor eu ullamco
                locations:
                  - aws:eu-west-3
                message: in in cupidatat pariatur
                monitor_id: 69248227
                name: eiusmod
                options:
                  accept_self_signed: true
                  allow_insecure: false
                  checkCertificateRevocation: false
                  ci:
                    executionRule: non_blocking
                  device_ids:
                    - laptop_large
                    - laptop_large
                  disableCors: true
                  disableCsp: true
                  follow_redirects: false
                  ignoreServerCertificateError: true
                  initialNavigationTimeout: -97143639
                  min_failure_duration: 64754603
                  min_location_failed: -55227254
                  monitor_name: in sed
                  monitor_options:
                    renotify_interval: 32
                  monitor_priority: 1
                  noScreenshot: true
                  restricted_roles:
                    - xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
                  retry:
                    count: 77861955
                    interval: -7622635.876915365
                  rumSettings:
                    applicationId: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
                    clientTokenId: 12345
                    isEnabled: true
                  tick_every: 165289
                public_id: proident pariat
                status: live
                steps:
                  - allowFailure: false
                    isCritical: true
                    name: ut mollit
                    noScreenshot: false
                    params: {}
                    timeout: -60714942
                    type: assertElementContent
                  - allowFailure: true
                    isCritical: true
                    name: irure oc
                    noScreenshot: true
                    params: {}
                    timeout: 58770622
                    type: assertElementContent
                subtype: http
                tags:
                  - aute amet
                  - et consequat dolor ullamco aliquip
                type: api
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '402':
          description: Payment Required
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/synthetics/tests/api:
    post:
      tags:
        - Synthetics
      summary: Create an API test
      description: Create a Synthetic API test.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                config:
                  assertions:
                    - operator: lessThan
                      target: 1000
                      type: responseTime
                    - operator: is
                      target: 200
                      type: statusCode
                    - operator: is
                      property: content-type
                      target: text/html; charset=UTF-8
                      type: header
                  request:
                    method: GET
                    url: https://example.com
                locations:
                  - azure:eastus
                  - aws:eu-west-3
                message: MY_NOTIFICATION_MESSAGE
                name: MY_TEST_NAME
                options:
                  min_failure_duration: 0
                  min_location_failed: 1
                  monitor_options:
                    include_tags: true
                    locked: false
                    new_host_delay: 300
                    notify_audit: false
                    notify_no_data: false
                    renotify_interval: 0
                  tick_every: 60
                status: live
                subtype: http
                tags:
                  - env:production
                type: api
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                name: Example test name
                config:
                  configVariables:
                    - description: Example for the variable.
                      type: string
                    - description: Example for the variable.
                      type: string
                  request:
                    allow_insecure: false
                    basicAuth:
                      password: PaSSw0RD!
                      username: my_username
                      type: web
                    body: veniam occaecat nulla dolor
                    bodyType: text/plain
                    certificate:
                      cert:
                        content: et sint voluptate
                        filename: nostrud laboris do in
                        updatedAt: Duis consectetur
                      key:
                        content: irure e
                        filename: ut fugiat in irure
                        updatedAt: sunt dolor consequat ea
                    dnsServer: qui quis non
                    dnsServerPort: 50259
                    follow_redirects: false
                    headers:
                      culpa_0: reprehenderit aliqua
                    host: consequat exerci
                    message: exercitation s
                    metadata:
                      non3: elit
                    method: GET
                    noSavingResponseBody: false
                    numberOfPackets: 5
                    port: -49769358
                    proxy:
                      url: https://example.com
                      headers:
                        enim0: mollit amet
                        sunt5ba: amet
                    query: {}
                    servername: sit dolor ea
                    service: consectetur sit ullamco officia deserunt
                    shouldTrackHops: true
                    timeout: 51841392.96603641
                    url: https://example.com
                  steps:
                    - assertions: []
                      request:
                        allow_insecure: true
                        basicAuth:
                          password: PaSSw0RD!
                          username: my_username
                          type: web
                        body: et magna sed
                        bodyType: text/plain
                        certificate:
                          cert:
                            content: reprehenderit fugiat
                            filename: anim Excepteur esse
                            updatedAt: fugiat non
                          key:
                            content: labore reprehe
                            filename: in id
                            updatedAt: non id ut
                        dnsServer: Excepteur est
                        dnsServerPort: 58383
                        follow_redirects: true
                        headers:
                          dolore_7f: minim ipsum ad
                          ea_7: ullamco ut amet eiusmod
                          in_e: dolor
                        host: elit Ut
                        message: nostrud tempor
                        metadata:
                          magna6b: dolor eiusmod
                          ad_567: laborum laboris nostrud est quis
                        method: GET
                        noSavingResponseBody: false
                        numberOfPackets: 9
                        port: -48440015
                        proxy:
                          url: https://example.com
                          headers:
                            incididunt9cd: exercitation in amet
                        query: {}
                        servername: officia
                        service: nisi laboris exercitation
                        shouldTrackHops: false
                        timeout: 48235021.36984694
                        url: https://example.com
                      name: Example step name
                      subtype: http
                      allowFailure: false
                      isCritical: false
                      retry:
                        count: -8774177
                        interval: 80264786.40933004
                    - assertions: []
                      request:
                        allow_insecure: true
                        basicAuth:
                          password: PaSSw0RD!
                          username: my_username
                          type: web
                        body: enim magna amet
                        bodyType: text/plain
                        certificate:
                          cert:
                            content: irure officia laborum
                            filename: sit consequat
                            updatedAt: ipsum
                          key:
                            content: officia eiusmod anim deserunt
                            filename: consectetur pariatur id
                            updatedAt: dolore nisi
                        dnsServer: dolore Ut
                        dnsServerPort: 51482
                        follow_redirects: false
                        headers:
                          est_19: nisi ad consequat
                        host: minim ad
                        message: sit nostrud fugiat non anim
                        metadata:
                          occaecat8c: a
                          in_4_5: magna
                        method: GET
                        noSavingResponseBody: false
                        numberOfPackets: 5
                        port: -3499796
                        proxy:
                          url: https://example.com
                          headers:
                            ut_c: 'quis '
                            in_36f: ipsum ex exercitation pariatur cupidatat
                            ad25: ea
                        query: {}
                        servername: adipisicing ut ut aute consectetur
                        service: labore et sed
                        shouldTrackHops: false
                        timeout: 73991762.7467309
                        url: https://example.com
                      name: Example step name
                      subtype: http
                      allowFailure: false
                      isCritical: true
                      retry:
                        count: 7306354
                        interval: 84712549.98630548
                locations:
                  - aws:eu-west-3
                options:
                  accept_self_signed: false
                  allow_insecure: false
                  checkCertificateRevocation: true
                  ci:
                    executionRule: skipped
                  device_ids:
                    - laptop_large
                    - laptop_large
                  disableCors: true
                  disableCsp: false
                  follow_redirects: true
                  ignoreServerCertificateError: false
                  initialNavigationTimeout: -56442789
                  min_failure_duration: 66583383
                  min_location_failed: -56127807
                  monitor_name: anim consequat occaecat nostrud
                  monitor_options:
                    renotify_interval: 357
                  monitor_priority: 3
                  noScreenshot: false
                  restricted_roles:
                    - xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
                  retry:
                    count: -48761799
                    interval: 53600545.61507934
                  rumSettings:
                    applicationId: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
                    clientTokenId: 12345
                    isEnabled: true
                  tick_every: 225362
                type: api
                message: Notification message
                monitor_id: 12345678
                public_id: 123-abc-456
                status: live
                subtype: http
                tags:
                  - env:production
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '402':
          description: Payment Required
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/synthetics/tests/api/{public_id}:
    get:
      tags:
        - Synthetics
      summary: Get an API test
      description: |-
        Get the detailed configuration associated with
        a Synthetic API test.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: public_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The public ID of the test to get details from.
          example: proident
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                name: Example test name
                config:
                  configVariables:
                    - description: Example for the variable.
                      type: string
                    - description: Example for the variable.
                      type: string
                  request:
                    allow_insecure: false
                    basicAuth:
                      password: PaSSw0RD!
                      username: my_username
                      type: web
                    body: veniam occaecat nulla dolor
                    bodyType: text/plain
                    certificate:
                      cert:
                        content: et sint voluptate
                        filename: nostrud laboris do in
                        updatedAt: Duis consectetur
                      key:
                        content: irure e
                        filename: ut fugiat in irure
                        updatedAt: sunt dolor consequat ea
                    dnsServer: qui quis non
                    dnsServerPort: 50259
                    follow_redirects: false
                    headers:
                      culpa_0: reprehenderit aliqua
                    host: consequat exerci
                    message: exercitation s
                    metadata:
                      non3: elit
                    method: GET
                    noSavingResponseBody: false
                    numberOfPackets: 5
                    port: -49769358
                    proxy:
                      url: https://example.com
                      headers:
                        enim0: mollit amet
                        sunt5ba: amet
                    query: {}
                    servername: sit dolor ea
                    service: consectetur sit ullamco officia deserunt
                    shouldTrackHops: true
                    timeout: 51841392.96603641
                    url: https://example.com
                  steps:
                    - assertions: []
                      request:
                        allow_insecure: true
                        basicAuth:
                          password: PaSSw0RD!
                          username: my_username
                          type: web
                        body: et magna sed
                        bodyType: text/plain
                        certificate:
                          cert:
                            content: reprehenderit fugiat
                            filename: anim Excepteur esse
                            updatedAt: fugiat non
                          key:
                            content: labore reprehe
                            filename: in id
                            updatedAt: non id ut
                        dnsServer: Excepteur est
                        dnsServerPort: 58383
                        follow_redirects: true
                        headers:
                          dolore_7f: minim ipsum ad
                          ea_7: ullamco ut amet eiusmod
                          in_e: dolor
                        host: elit Ut
                        message: nostrud tempor
                        metadata:
                          magna6b: dolor eiusmod
                          ad_567: laborum laboris nostrud est quis
                        method: GET
                        noSavingResponseBody: false
                        numberOfPackets: 9
                        port: -48440015
                        proxy:
                          url: https://example.com
                          headers:
                            incididunt9cd: exercitation in amet
                        query: {}
                        servername: officia
                        service: nisi laboris exercitation
                        shouldTrackHops: false
                        timeout: 48235021.36984694
                        url: https://example.com
                      name: Example step name
                      subtype: http
                      allowFailure: false
                      isCritical: false
                      retry:
                        count: -8774177
                        interval: 80264786.40933004
                    - assertions: []
                      request:
                        allow_insecure: true
                        basicAuth:
                          password: PaSSw0RD!
                          username: my_username
                          type: web
                        body: enim magna amet
                        bodyType: text/plain
                        certificate:
                          cert:
                            content: irure officia laborum
                            filename: sit consequat
                            updatedAt: ipsum
                          key:
                            content: officia eiusmod anim deserunt
                            filename: consectetur pariatur id
                            updatedAt: dolore nisi
                        dnsServer: dolore Ut
                        dnsServerPort: 51482
                        follow_redirects: false
                        headers:
                          est_19: nisi ad consequat
                        host: minim ad
                        message: sit nostrud fugiat non anim
                        metadata:
                          occaecat8c: a
                          in_4_5: magna
                        method: GET
                        noSavingResponseBody: false
                        numberOfPackets: 5
                        port: -3499796
                        proxy:
                          url: https://example.com
                          headers:
                            ut_c: 'quis '
                            in_36f: ipsum ex exercitation pariatur cupidatat
                            ad25: ea
                        query: {}
                        servername: adipisicing ut ut aute consectetur
                        service: labore et sed
                        shouldTrackHops: false
                        timeout: 73991762.7467309
                        url: https://example.com
                      name: Example step name
                      subtype: http
                      allowFailure: false
                      isCritical: true
                      retry:
                        count: 7306354
                        interval: 84712549.98630548
                locations:
                  - aws:eu-west-3
                options:
                  accept_self_signed: false
                  allow_insecure: false
                  checkCertificateRevocation: true
                  ci:
                    executionRule: skipped
                  device_ids:
                    - laptop_large
                    - laptop_large
                  disableCors: true
                  disableCsp: false
                  follow_redirects: true
                  ignoreServerCertificateError: false
                  initialNavigationTimeout: -56442789
                  min_failure_duration: 66583383
                  min_location_failed: -56127807
                  monitor_name: anim consequat occaecat nostrud
                  monitor_options:
                    renotify_interval: 357
                  monitor_priority: 3
                  noScreenshot: false
                  restricted_roles:
                    - xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
                  retry:
                    count: -48761799
                    interval: 53600545.61507934
                  rumSettings:
                    applicationId: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
                    clientTokenId: 12345
                    isEnabled: true
                  tick_every: 225362
                type: api
                message: Notification message
                monitor_id: 12345678
                public_id: 123-abc-456
                status: live
                subtype: http
                tags:
                  - env:production
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    put:
      tags:
        - Synthetics
      summary: Edit an API test
      description: Edit the configuration of a Synthetic API test.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                name: Example test name
                config:
                  configVariables:
                    - description: Example for the variable.
                      type: string
                    - description: Example for the variable.
                      type: string
                  request:
                    allow_insecure: false
                    basicAuth:
                      password: PaSSw0RD!
                      username: my_username
                      type: web
                    body: quis
                    bodyType: text/plain
                    certificate:
                      cert:
                        content: nostrud officia sit
                        filename: ullamco ad
                        updatedAt: mollit proident laboris
                      key:
                        content: laborum est cupidatat dolore ut
                        filename: aliquip do pariatur velit
                        updatedAt: ullamco
                    dnsServer: qui laborum
                    dnsServerPort: 51236
                    follow_redirects: true
                    headers:
                      essea5: q
                    host: officia sint eiusmod et
                    message: culpa do
                    metadata:
                      eiusmod1: proident in elit
                    method: GET
                    noSavingResponseBody: false
                    numberOfPackets: 2
                    port: 43240606
                    proxy:
                      url: https://example.com
                      headers:
                        aliqua2d: eu
                        fugiat_84e: 'adipisicing '
                    query: {}
                    servername: aliqua dolore
                    service: aliqua
                    shouldTrackHops: false
                    timeout: 64289924.72971961
                    url: https://example.com
                  steps:
                    - assertions: []
                      request:
                        allow_insecure: false
                        basicAuth:
                          password: PaSSw0RD!
                          username: my_username
                          type: web
                        body: in aliquip dolore
                        bodyType: text/plain
                        certificate:
                          cert:
                            content: voluptate sint qui re
                            filename: quis adipisicing do
                            updatedAt: id minim ullamco eu
                          key:
                            content: ut irure aliquip
                            filename: pariatur labore exercitation
                            updatedAt: anim sit
                        dnsServer: anim laborum dolor
                        dnsServerPort: 46470
                        follow_redirects: false
                        headers:
                          deserunt_0a0: ut nostrud
                          quis_99: eu nostrud
                          do_e: labore cupidatat irure
                        host: amet
                        message: aliquip laborum aute
                        metadata:
                          et_b7: amet sed labore Duis
                          eiusmod9b: u
                        method: GET
                        noSavingResponseBody: true
                        numberOfPackets: 8
                        port: 91812705
                        proxy:
                          url: https://example.com
                          headers:
                            Ut_f: et occaecat tempor voluptate dolor
                        query: {}
                        servername: consequat sunt Ut
                        service: veniam occaecat aute
                        shouldTrackHops: true
                        timeout: 19336828.01305157
                        url: https://example.com
                      name: Example step name
                      subtype: http
                      allowFailure: false
                      isCritical: false
                      retry:
                        count: -49119878
                        interval: -88385959.07231471
                    - assertions: []
                      request:
                        allow_insecure: true
                        basicAuth:
                          password: PaSSw0RD!
                          username: my_username
                          type: web
                        body: Ut dolor veniam
                        bodyType: text/plain
                        certificate:
                          cert:
                            content: sunt deserunt in
                            filename: aliqua id
                            updatedAt: in ut id in amet
                          key:
                            content: fugiat ad est Ut
                            filename: officia aute
                            updatedAt: fugiat nulla dolor dolor Ut
                        dnsServer: laborum
                        dnsServerPort: 31396
                        follow_redirects: false
                        headers:
                          inbe: exercitation
                          culpae4: labore aliqua et laboris
                        host: est ipsum
                        message: aute
                        metadata:
                          esse_afa: consectetur
                          ex6: do laboris est
                        method: GET
                        noSavingResponseBody: false
                        numberOfPackets: 1
                        port: -10842284
                        proxy:
                          url: https://example.com
                          headers:
                            ipsum___c: quis pariatur
                            adipisicing_9: cupidatat nostrud dolor quis
                        query: {}
                        servername: es
                        service: esse pariatur sint
                        shouldTrackHops: false
                        timeout: 90277480.97997707
                        url: https://example.com
                      name: Example step name
                      subtype: http
                      allowFailure: true
                      isCritical: false
                      retry:
                        count: -70666426
                        interval: -44686085.18545491
                locations:
                  - aws:eu-west-3
                options:
                  accept_self_signed: true
                  allow_insecure: false
                  checkCertificateRevocation: false
                  ci:
                    executionRule: non_blocking
                  device_ids:
                    - laptop_large
                    - laptop_large
                  disableCors: false
                  disableCsp: true
                  follow_redirects: true
                  ignoreServerCertificateError: false
                  initialNavigationTimeout: 95544837
                  min_failure_duration: -18657700
                  min_location_failed: -20671444
                  monitor_name: eiusmod Excepteur ut
                  monitor_options:
                    renotify_interval: 303
                  monitor_priority: 3
                  noScreenshot: false
                  restricted_roles:
                    - xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
                  retry:
                    count: -42794422
                    interval: -23040355.7664264
                  rumSettings:
                    applicationId: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
                    clientTokenId: 12345
                    isEnabled: true
                  tick_every: 281961
                type: api
                message: Notification message
                status: live
                subtype: http
                tags:
                  - env:production
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: public_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The public ID of the test to get details from.
          example: proident
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                name: Example test name
                config:
                  configVariables:
                    - description: Example for the variable.
                      type: string
                    - description: Example for the variable.
                      type: string
                  request:
                    allow_insecure: false
                    basicAuth:
                      password: PaSSw0RD!
                      username: my_username
                      type: web
                    body: veniam occaecat nulla dolor
                    bodyType: text/plain
                    certificate:
                      cert:
                        content: et sint voluptate
                        filename: nostrud laboris do in
                        updatedAt: Duis consectetur
                      key:
                        content: irure e
                        filename: ut fugiat in irure
                        updatedAt: sunt dolor consequat ea
                    dnsServer: qui quis non
                    dnsServerPort: 50259
                    follow_redirects: false
                    headers:
                      culpa_0: reprehenderit aliqua
                    host: consequat exerci
                    message: exercitation s
                    metadata:
                      non3: elit
                    method: GET
                    noSavingResponseBody: false
                    numberOfPackets: 5
                    port: -49769358
                    proxy:
                      url: https://example.com
                      headers:
                        enim0: mollit amet
                        sunt5ba: amet
                    query: {}
                    servername: sit dolor ea
                    service: consectetur sit ullamco officia deserunt
                    shouldTrackHops: true
                    timeout: 51841392.96603641
                    url: https://example.com
                  steps:
                    - assertions: []
                      request:
                        allow_insecure: true
                        basicAuth:
                          password: PaSSw0RD!
                          username: my_username
                          type: web
                        body: et magna sed
                        bodyType: text/plain
                        certificate:
                          cert:
                            content: reprehenderit fugiat
                            filename: anim Excepteur esse
                            updatedAt: fugiat non
                          key:
                            content: labore reprehe
                            filename: in id
                            updatedAt: non id ut
                        dnsServer: Excepteur est
                        dnsServerPort: 58383
                        follow_redirects: true
                        headers:
                          dolore_7f: minim ipsum ad
                          ea_7: ullamco ut amet eiusmod
                          in_e: dolor
                        host: elit Ut
                        message: nostrud tempor
                        metadata:
                          magna6b: dolor eiusmod
                          ad_567: laborum laboris nostrud est quis
                        method: GET
                        noSavingResponseBody: false
                        numberOfPackets: 9
                        port: -48440015
                        proxy:
                          url: https://example.com
                          headers:
                            incididunt9cd: exercitation in amet
                        query: {}
                        servername: officia
                        service: nisi laboris exercitation
                        shouldTrackHops: false
                        timeout: 48235021.36984694
                        url: https://example.com
                      name: Example step name
                      subtype: http
                      allowFailure: false
                      isCritical: false
                      retry:
                        count: -8774177
                        interval: 80264786.40933004
                    - assertions: []
                      request:
                        allow_insecure: true
                        basicAuth:
                          password: PaSSw0RD!
                          username: my_username
                          type: web
                        body: enim magna amet
                        bodyType: text/plain
                        certificate:
                          cert:
                            content: irure officia laborum
                            filename: sit consequat
                            updatedAt: ipsum
                          key:
                            content: officia eiusmod anim deserunt
                            filename: consectetur pariatur id
                            updatedAt: dolore nisi
                        dnsServer: dolore Ut
                        dnsServerPort: 51482
                        follow_redirects: false
                        headers:
                          est_19: nisi ad consequat
                        host: minim ad
                        message: sit nostrud fugiat non anim
                        metadata:
                          occaecat8c: a
                          in_4_5: magna
                        method: GET
                        noSavingResponseBody: false
                        numberOfPackets: 5
                        port: -3499796
                        proxy:
                          url: https://example.com
                          headers:
                            ut_c: 'quis '
                            in_36f: ipsum ex exercitation pariatur cupidatat
                            ad25: ea
                        query: {}
                        servername: adipisicing ut ut aute consectetur
                        service: labore et sed
                        shouldTrackHops: false
                        timeout: 73991762.7467309
                        url: https://example.com
                      name: Example step name
                      subtype: http
                      allowFailure: false
                      isCritical: true
                      retry:
                        count: 7306354
                        interval: 84712549.98630548
                locations:
                  - aws:eu-west-3
                options:
                  accept_self_signed: false
                  allow_insecure: false
                  checkCertificateRevocation: true
                  ci:
                    executionRule: skipped
                  device_ids:
                    - laptop_large
                    - laptop_large
                  disableCors: true
                  disableCsp: false
                  follow_redirects: true
                  ignoreServerCertificateError: false
                  initialNavigationTimeout: -56442789
                  min_failure_duration: 66583383
                  min_location_failed: -56127807
                  monitor_name: anim consequat occaecat nostrud
                  monitor_options:
                    renotify_interval: 357
                  monitor_priority: 3
                  noScreenshot: false
                  restricted_roles:
                    - xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
                  retry:
                    count: -48761799
                    interval: 53600545.61507934
                  rumSettings:
                    applicationId: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
                    clientTokenId: 12345
                    isEnabled: true
                  tick_every: 225362
                type: api
                message: Notification message
                monitor_id: 12345678
                public_id: 123-abc-456
                status: live
                subtype: http
                tags:
                  - env:production
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/synthetics/tests/browser:
    post:
      tags:
        - Synthetics
      summary: Create a browser test
      description: Create a Synthetic browser test.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                config:
                  request:
                    allow_insecure: false
                    basicAuth:
                      password: PaSSw0RD!
                      username: my_username
                      type: web
                    body: eiusmod Lorem occaecat
                    bodyType: text/plain
                    certificate:
                      cert:
                        content: dolore elit
                        filename: esse deserunt in dolore
                        updatedAt: Duis eiusmod quis
                      key:
                        content: in sint dolore
                        filename: voluptate Duis tempor sit
                        updatedAt: dolor nostrud fugiat
                    dnsServer: incididunt ad irure
                    dnsServerPort: 29117
                    follow_redirects: true
                    headers:
                      mollit_e9: labore officia
                      fugiat_b2: sint pariatur
                    host: culpa cillum Duis
                    message: nulla amet
                    metadata:
                      quif: labore eiusmod
                      nulla4: in
                    method: GET
                    noSavingResponseBody: false
                    numberOfPackets: 6
                    port: -63104413
                    proxy:
                      url: https://example.com
                      headers:
                        sint_c0: laboris occaecat dolore nisi
                    query: {}
                    servername: incididunt eiusmod nulla cupidatat nostrud
                    service: enim veniam ut fugiat
                    shouldTrackHops: false
                    timeout: -30207509.27419904
                    url: https://example.com
                  configVariables:
                    - description: Example for the variable.
                      type: string
                    - description: Example for the variable.
                      type: string
                  setCookie: voluptate sit labore ad
                  variables:
                    - description: Example for the variable.
                      type: string
                    - description: Example for the variable.
                      type: string
                locations:
                  - aws:eu-west-3
                name: Example test name
                options:
                  accept_self_signed: true
                  allow_insecure: false
                  checkCertificateRevocation: true
                  ci:
                    executionRule: non_blocking
                  device_ids:
                    - laptop_large
                    - laptop_large
                  disableCors: true
                  disableCsp: false
                  follow_redirects: false
                  ignoreServerCertificateError: true
                  initialNavigationTimeout: 57532348
                  min_failure_duration: 37887477
                  min_location_failed: -17658060
                  monitor_name: consectetur Duis cillum id ut
                  monitor_options:
                    renotify_interval: 1138
                  monitor_priority: 4
                  noScreenshot: false
                  restricted_roles:
                    - xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
                  retry:
                    count: -94045230
                    interval: -74004610.94070087
                  rumSettings:
                    applicationId: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
                    clientTokenId: 12345
                    isEnabled: true
                  tick_every: 441531
                type: browser
                message: ''
                status: live
                steps:
                  - allowFailure: false
                    isCritical: true
                    name: dolor sint
                    noScreenshot: false
                    params: {}
                    timeout: 35647601
                    type: assertElementContent
                  - allowFailure: true
                    isCritical: true
                    name: labore veniam
                    noScreenshot: false
                    params: {}
                    timeout: 43052413
                    type: assertElementContent
                tags:
                  - env:prod
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                config:
                  request:
                    allow_insecure: false
                    basicAuth:
                      password: PaSSw0RD!
                      username: my_username
                      type: web
                    body: adipisicing al
                    bodyType: text/plain
                    certificate:
                      cert:
                        content: deserunt sed quis
                        filename: sed ut qui velit ipsum
                        updatedAt: ex magna aute fugiat in
                      key:
                        content: incididunt sint nisi
                        filename: dolore et tempor
                        updatedAt: amet pariatur id
                    dnsServer: ut laborum ipsum
                    dnsServerPort: 31392
                    follow_redirects: false
                    headers:
                      fugiat_e3f: minim laboris
                    host: reprehenderit labore Duis in esse
                    message: labore in
                    metadata:
                      eae2: cillum pariatur dolor
                      mollitdb8: Excepteur cupidatat esse mollit
                      qui_49: est eu
                    method: GET
                    noSavingResponseBody: true
                    numberOfPackets: 1
                    port: 99230827
                    proxy:
                      url: https://example.com
                      headers:
                        incididunt_c0: culpa ex eu
                        sed_6da: in incididunt amet
                        adipisicing__9: irure Ut enim
                        irure_9_5: deserunt officia consequ
                    query: {}
                    servername: Lorem
                    service: sed enim anim
                    shouldTrackHops: true
                    timeout: -77055795.79779518
                    url: https://example.com
                  configVariables:
                    - description: Example for the variable.
                      type: string
                    - description: Example for the variable.
                      type: string
                  setCookie: exercitation irure
                  variables:
                    - description: Example for the variable.
                      type: string
                    - description: Example for the variable.
                      type: string
                locations:
                  - aws:eu-west-3
                name: Example test name
                options:
                  accept_self_signed: false
                  allow_insecure: true
                  checkCertificateRevocation: true
                  ci:
                    executionRule: skipped
                  device_ids:
                    - laptop_large
                    - laptop_large
                  disableCors: true
                  disableCsp: true
                  follow_redirects: false
                  ignoreServerCertificateError: false
                  initialNavigationTimeout: -92095256
                  min_failure_duration: 81113300
                  min_location_failed: 26643933
                  monitor_name: irure ea dolor minim
                  monitor_options:
                    renotify_interval: 933
                  monitor_priority: 4
                  noScreenshot: true
                  restricted_roles:
                    - xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
                  retry:
                    count: 92311739
                    interval: -91180300.08642589
                  rumSettings:
                    applicationId: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
                    clientTokenId: 12345
                    isEnabled: true
                  tick_every: 424937
                type: browser
                message: ''
                monitor_id: 31078628
                public_id: ipsum laborum ad
                status: live
                steps:
                  - allowFailure: true
                    isCritical: true
                    name: culpa ex Lorem aute
                    noScreenshot: true
                    params: {}
                    timeout: 24575937
                    type: assertElementContent
                  - allowFailure: true
                    isCritical: false
                    name: Excepteur in esse sunt
                    noScreenshot: true
                    params: {}
                    timeout: -66671646
                    type: assertElementContent
                tags:
                  - env:prod
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '402':
          description: Payment Required
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/synthetics/tests/browser/{public_id}:
    get:
      tags:
        - Synthetics
      summary: Get a browser test
      description: |-
        Get the detailed configuration (including steps) associated with
        a Synthetic browser test.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: public_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The public ID of the test to get details from.
          example: proident
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                config:
                  request:
                    allow_insecure: false
                    basicAuth:
                      password: PaSSw0RD!
                      username: my_username
                      type: web
                    body: adipisicing al
                    bodyType: text/plain
                    certificate:
                      cert:
                        content: deserunt sed quis
                        filename: sed ut qui velit ipsum
                        updatedAt: ex magna aute fugiat in
                      key:
                        content: incididunt sint nisi
                        filename: dolore et tempor
                        updatedAt: amet pariatur id
                    dnsServer: ut laborum ipsum
                    dnsServerPort: 31392
                    follow_redirects: false
                    headers:
                      fugiat_e3f: minim laboris
                    host: reprehenderit labore Duis in esse
                    message: labore in
                    metadata:
                      eae2: cillum pariatur dolor
                      mollitdb8: Excepteur cupidatat esse mollit
                      qui_49: est eu
                    method: GET
                    noSavingResponseBody: true
                    numberOfPackets: 1
                    port: 99230827
                    proxy:
                      url: https://example.com
                      headers:
                        incididunt_c0: culpa ex eu
                        sed_6da: in incididunt amet
                        adipisicing__9: irure Ut enim
                        irure_9_5: deserunt officia consequ
                    query: {}
                    servername: Lorem
                    service: sed enim anim
                    shouldTrackHops: true
                    timeout: -77055795.79779518
                    url: https://example.com
                  configVariables:
                    - description: Example for the variable.
                      type: string
                    - description: Example for the variable.
                      type: string
                  setCookie: exercitation irure
                  variables:
                    - description: Example for the variable.
                      type: string
                    - description: Example for the variable.
                      type: string
                locations:
                  - aws:eu-west-3
                name: Example test name
                options:
                  accept_self_signed: false
                  allow_insecure: true
                  checkCertificateRevocation: true
                  ci:
                    executionRule: skipped
                  device_ids:
                    - laptop_large
                    - laptop_large
                  disableCors: true
                  disableCsp: true
                  follow_redirects: false
                  ignoreServerCertificateError: false
                  initialNavigationTimeout: -92095256
                  min_failure_duration: 81113300
                  min_location_failed: 26643933
                  monitor_name: irure ea dolor minim
                  monitor_options:
                    renotify_interval: 933
                  monitor_priority: 4
                  noScreenshot: true
                  restricted_roles:
                    - xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
                  retry:
                    count: 92311739
                    interval: -91180300.08642589
                  rumSettings:
                    applicationId: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
                    clientTokenId: 12345
                    isEnabled: true
                  tick_every: 424937
                type: browser
                message: ''
                monitor_id: 31078628
                public_id: ipsum laborum ad
                status: live
                steps:
                  - allowFailure: true
                    isCritical: true
                    name: culpa ex Lorem aute
                    noScreenshot: true
                    params: {}
                    timeout: 24575937
                    type: assertElementContent
                  - allowFailure: true
                    isCritical: false
                    name: Excepteur in esse sunt
                    noScreenshot: true
                    params: {}
                    timeout: -66671646
                    type: assertElementContent
                tags:
                  - env:prod
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    put:
      tags:
        - Synthetics
      summary: Edit a browser test
      description: Edit the configuration of a Synthetic browser test.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                config:
                  request:
                    allow_insecure: false
                    basicAuth:
                      password: PaSSw0RD!
                      username: my_username
                      type: web
                    body: eiusmod Lorem occaecat
                    bodyType: text/plain
                    certificate:
                      cert:
                        content: dolore elit
                        filename: esse deserunt in dolore
                        updatedAt: Duis eiusmod quis
                      key:
                        content: in sint dolore
                        filename: voluptate Duis tempor sit
                        updatedAt: dolor nostrud fugiat
                    dnsServer: incididunt ad irure
                    dnsServerPort: 29117
                    follow_redirects: true
                    headers:
                      mollit_e9: labore officia
                      fugiat_b2: sint pariatur
                    host: culpa cillum Duis
                    message: nulla amet
                    metadata:
                      quif: labore eiusmod
                      nulla4: in
                    method: GET
                    noSavingResponseBody: false
                    numberOfPackets: 6
                    port: -63104413
                    proxy:
                      url: https://example.com
                      headers:
                        sint_c0: laboris occaecat dolore nisi
                    query: {}
                    servername: incididunt eiusmod nulla cupidatat nostrud
                    service: enim veniam ut fugiat
                    shouldTrackHops: false
                    timeout: -30207509.27419904
                    url: https://example.com
                  configVariables:
                    - description: Example for the variable.
                      type: string
                    - description: Example for the variable.
                      type: string
                  setCookie: voluptate sit labore ad
                  variables:
                    - description: Example for the variable.
                      type: string
                    - description: Example for the variable.
                      type: string
                locations:
                  - aws:eu-west-3
                name: Example test name
                options:
                  accept_self_signed: true
                  allow_insecure: false
                  checkCertificateRevocation: true
                  ci:
                    executionRule: non_blocking
                  device_ids:
                    - laptop_large
                    - laptop_large
                  disableCors: true
                  disableCsp: false
                  follow_redirects: false
                  ignoreServerCertificateError: true
                  initialNavigationTimeout: 57532348
                  min_failure_duration: 37887477
                  min_location_failed: -17658060
                  monitor_name: consectetur Duis cillum id ut
                  monitor_options:
                    renotify_interval: 1138
                  monitor_priority: 4
                  noScreenshot: false
                  restricted_roles:
                    - xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
                  retry:
                    count: -94045230
                    interval: -74004610.94070087
                  rumSettings:
                    applicationId: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
                    clientTokenId: 12345
                    isEnabled: true
                  tick_every: 441531
                type: browser
                message: ''
                status: live
                steps:
                  - allowFailure: false
                    isCritical: true
                    name: dolor sint
                    noScreenshot: false
                    params: {}
                    timeout: 35647601
                    type: assertElementContent
                  - allowFailure: true
                    isCritical: true
                    name: labore veniam
                    noScreenshot: false
                    params: {}
                    timeout: 43052413
                    type: assertElementContent
                tags:
                  - env:prod
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: public_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The public ID of the test to get details from.
          example: proident
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                config:
                  request:
                    allow_insecure: false
                    basicAuth:
                      password: PaSSw0RD!
                      username: my_username
                      type: web
                    body: adipisicing al
                    bodyType: text/plain
                    certificate:
                      cert:
                        content: deserunt sed quis
                        filename: sed ut qui velit ipsum
                        updatedAt: ex magna aute fugiat in
                      key:
                        content: incididunt sint nisi
                        filename: dolore et tempor
                        updatedAt: amet pariatur id
                    dnsServer: ut laborum ipsum
                    dnsServerPort: 31392
                    follow_redirects: false
                    headers:
                      fugiat_e3f: minim laboris
                    host: reprehenderit labore Duis in esse
                    message: labore in
                    metadata:
                      eae2: cillum pariatur dolor
                      mollitdb8: Excepteur cupidatat esse mollit
                      qui_49: est eu
                    method: GET
                    noSavingResponseBody: true
                    numberOfPackets: 1
                    port: 99230827
                    proxy:
                      url: https://example.com
                      headers:
                        incididunt_c0: culpa ex eu
                        sed_6da: in incididunt amet
                        adipisicing__9: irure Ut enim
                        irure_9_5: deserunt officia consequ
                    query: {}
                    servername: Lorem
                    service: sed enim anim
                    shouldTrackHops: true
                    timeout: -77055795.79779518
                    url: https://example.com
                  configVariables:
                    - description: Example for the variable.
                      type: string
                    - description: Example for the variable.
                      type: string
                  setCookie: exercitation irure
                  variables:
                    - description: Example for the variable.
                      type: string
                    - description: Example for the variable.
                      type: string
                locations:
                  - aws:eu-west-3
                name: Example test name
                options:
                  accept_self_signed: false
                  allow_insecure: true
                  checkCertificateRevocation: true
                  ci:
                    executionRule: skipped
                  device_ids:
                    - laptop_large
                    - laptop_large
                  disableCors: true
                  disableCsp: true
                  follow_redirects: false
                  ignoreServerCertificateError: false
                  initialNavigationTimeout: -92095256
                  min_failure_duration: 81113300
                  min_location_failed: 26643933
                  monitor_name: irure ea dolor minim
                  monitor_options:
                    renotify_interval: 933
                  monitor_priority: 4
                  noScreenshot: true
                  restricted_roles:
                    - xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
                  retry:
                    count: 92311739
                    interval: -91180300.08642589
                  rumSettings:
                    applicationId: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
                    clientTokenId: 12345
                    isEnabled: true
                  tick_every: 424937
                type: browser
                message: ''
                monitor_id: 31078628
                public_id: ipsum laborum ad
                status: live
                steps:
                  - allowFailure: true
                    isCritical: true
                    name: culpa ex Lorem aute
                    noScreenshot: true
                    params: {}
                    timeout: 24575937
                    type: assertElementContent
                  - allowFailure: true
                    isCritical: false
                    name: Excepteur in esse sunt
                    noScreenshot: true
                    params: {}
                    timeout: -66671646
                    type: assertElementContent
                tags:
                  - env:prod
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/synthetics/tests/browser/{public_id}/results:
    get:
      tags:
        - Synthetics
      summary: Get a browser test's latest results summaries
      description: >-
        Get the last 50 test results summaries for a given Synthetics Browser
        test.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: from_ts
          in: query
          schema:
            type: number
          description: Timestamp in milliseconds from which to start querying results.
          example: '-70569764'
        - name: to_ts
          in: query
          schema:
            type: number
          description: Timestamp in milliseconds up to which to query results.
          example: '-70569764'
        - name: probe_dc
          in: query
          schema:
            type: string
          description: Locations for which to query results.
          example: anim et
        - name: public_id
          in: path
          schema:
            type: string
          required: true
          description: >-
            (Required) The public ID of the browser test for which to search
            results

            for.
          example: proident
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                last_timestamp_fetched: -91211432
                results:
                  - check_time: -79154112.1651245
                    probe_dc: cupidatat dolor n
                    result:
                      device:
                        id: laptop_large
                        name: ''
                        height: 0
                        width: 0
                        isMobile: true
                      duration: 86505439.16814527
                      errorCount: -93878593
                      stepCountCompleted: -14676466
                      stepCountTotal: -28693710
                    result_id: sint officia
                    status: 0
                  - check_time: -23551959.78924702
                    probe_dc: reprehenderit cillum Duis voluptate
                    result:
                      device:
                        id: laptop_large
                        name: ''
                        height: 0
                        width: 0
                        isMobile: true
                      duration: -11450233.261514425
                      errorCount: -62524801
                      stepCountCompleted: 99782900
                      stepCountTotal: -5298922
                    result_id: deserunt consequat laboris adipisicing qui
                    status: 0
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/synthetics/tests/browser/{public_id}/results/{result_id}:
    get:
      tags:
        - Synthetics
      summary: Get a browser test result
      description: Get a specific full result from a given (browser) Synthetic test.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: public_id
          in: path
          schema:
            type: string
          required: true
          description: >-
            (Required) The public ID of the browser test to which the target
            result

            belongs.
          example: proident
        - name: result_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the result to get.
          example: proident
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                check:
                  config:
                    configVariables:
                      - description: Example for the variable.
                        type: string
                      - description: Example for the variable.
                        type: string
                    request:
                      allow_insecure: false
                      basicAuth:
                        password: PaSSw0RD!
                        username: my_username
                        type: web
                      body: ullamco fugiat
                      bodyType: text/plain
                      certificate:
                        cert:
                          content: consequat
                          filename: Excepteur ea nulla occaecat
                          updatedAt: cillum esse
                        key:
                          content: tempor quis ullamco
                          filename: id Ut in labore
                          updatedAt: in
                      dnsServer: dolore cupidatat
                      dnsServerPort: 41257
                      follow_redirects: true
                      headers:
                        ea_92: aliquip qui eiusmod sit
                        est_a5: amet Ut quis
                      host: quis incididunt adipisicing veniam fugiat
                      message: ut minim tempor ipsum
                      metadata:
                        Ut1: occaecat
                        consecteturb2b: anim enim culpa in
                      method: GET
                      noSavingResponseBody: false
                      numberOfPackets: 6
                      port: -72689321
                      proxy:
                        url: https://example.com
                        headers:
                          eiusmod_e: esse ullamco
                          enim43e: ex est
                          sit25_: laborum la
                      query: {}
                      servername: incididunt laboris sit
                      service: 'pariatur officia quis '
                      shouldTrackHops: true
                      timeout: 1207548.491384089
                      url: https://example.com
                    variables:
                      - description: Example for the variable.
                        type: string
                      - description: Example for the variable.
                        type: string
                check_time: 73466608.22115517
                check_version: -15095572
                probe_dc: incididunt consectetur Ut
                result:
                  browserType: c
                  browserVersion: labore ad eu
                  device:
                    id: laptop_large
                    name: ''
                    height: 0
                    width: 0
                    isMobile: false
                  duration: 39153383.72385314
                  error: dolore deserunt do consectetur
                  failure:
                    code: INVALID_TYPE_TEXT_DELAY
                    message: Error during DNS resolution (ENOTFOUND).
                  passed: false
                  receivedEmailCount: -7659358
                  startUrl: Excepteur non elit
                  stepDetails:
                    - browserErrors:
                        - description: Example error message
                          name: Failed test
                          type: network
                          status: 500
                        - description: Example error message
                          name: Failed test
                          type: network
                          status: 500
                      checkType: lower
                      description: labore sint quis
                      duration: 89563306.37937638
                      error: consectetur
                      playingTab: 2
                      screenshotBucketKey: false
                      skipped: false
                      snapshotBucketKey: true
                      stepId: -80445083
                      timeToInteractive: 36061707.3768169
                      type: assertElementContent
                      url: pariatur dolore do ad
                      value: {}
                      vitalsMetrics:
                        - cls: -92923214.7073947
                          lcp: -64669115.69752591
                          url: ullamco laboris
                        - cls: 54048591.88869694
                          lcp: 89796157.11353764
                          url: eiusmod
                      warnings:
                        - message: ''
                          type: user_locator
                        - message: ''
                          type: user_locator
                    - browserErrors:
                        - description: Example error message
                          name: Failed test
                          type: network
                          status: 500
                        - description: Example error message
                          name: Failed test
                          type: network
                          status: 500
                      checkType: startsWith
                      description: laborum fugiat veniam mollit minim
                      duration: -15776028.56712228
                      error: culpa
                      playingTab: 0
                      screenshotBucketKey: true
                      skipped: false
                      snapshotBucketKey: true
                      stepId: -40425458
                      timeToInteractive: 70371226.01478863
                      type: assertElementContent
                      url: culpa enim
                      value: {}
                      vitalsMetrics:
                        - cls: 64834267.19022992
                          lcp: -4993635.641374454
                          url: enim sunt
                        - cls: -46573038.892645255
                          lcp: 69202348.50476691
                          url: veniam ut anim
                      warnings:
                        - message: ''
                          type: user_locator
                        - message: ''
                          type: user_locator
                  thumbnailsBucketKey: false
                  timeToInteractive: 87772593.94036677
                result_id: ipsum sunt fugiat
                status: 2
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/synthetics/tests/delete:
    post:
      tags:
        - Synthetics
      summary: Delete tests
      description: Delete multiple Synthetic tests by ID.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: {}
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                deleted_tests:
                  - deleted_at: '1984-12-05T15:05:28.583Z'
                    public_id: Ut
                  - deleted_at: '2005-04-15T08:16:33.485Z'
                    public_id: Excepteur consectetur aliqua
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/synthetics/tests/trigger:
    post:
      tags:
        - Synthetics
      summary: Trigger Synthetics tests
      description: Trigger a set of Synthetics tests.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                tests:
                  - public_id: aaa-aaa-aaa
                    metadata:
                      ci:
                        pipeline:
                          url: Ut mollit ea irure
                        provider:
                          name: occaecat i
                      git:
                        branch: in
                        commitSha: id
                  - public_id: aaa-aaa-aaa
                    metadata:
                      ci:
                        pipeline:
                          url: 'voluptate cillum '
                        provider:
                          name: incididunt amet cupidatat
                      git:
                        branch: consectetur
                        commitSha: nis
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                batch_id: incididunt velit deserunt id
                locations:
                  - id: -3139801
                    name: minim deserunt
                  - id: 75548047
                    name: commodo enim
                results:
                  - device: laptop_large
                    location: 3377795
                    public_id: in commodo aute occaecat
                    result_id: anim in ea
                  - device: laptop_large
                    location: -23260830
                    public_id: sunt aliqua nostrud non aute
                    result_id: labore Excepteur ullamco in adipisicing
                triggered_check_ids:
                  - adipisicing
                  - ut
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/synthetics/tests/trigger/ci:
    post:
      tags:
        - Synthetics
      summary: Trigger tests from CI/CD pipelines
      description: Trigger a set of Synthetics tests for continuous integration.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                tests:
                  - public_id: aaa-aaa-aaa
                    allowInsecureCertificates: false
                    basicAuth:
                      password: PaSSw0RD!
                      username: my_username
                      type: web
                    body: id sunt
                    bodyType: sint ullamco
                    cookies: dolor
                    deviceIds:
                      - laptop_large
                      - laptop_large
                    followRedirects: true
                    headers:
                      nullae: dolor
                    locations:
                      - aws:eu-west-3
                    metadata:
                      ci:
                        pipeline:
                          url: pariatur id dolor ad
                        provider:
                          name: nostrud amet
                      git:
                        branch: elit fugiat id minim aliqua
                        commitSha: consequat elit incididunt dolore cillum
                    retry:
                      count: 12797595
                      interval: 672632.559645474
                    startUrl: incidid
                    variables:
                      incididunt_64: minim in mollit
                      consectetur984: labore i
                  - public_id: aaa-aaa-aaa
                    allowInsecureCertificates: false
                    basicAuth:
                      password: PaSSw0RD!
                      username: my_username
                      type: web
                    body: eu in nulla
                    bodyType: anim non nostrud
                    cookies: voluptate labore magna dolor dolore
                    deviceIds:
                      - laptop_large
                      - laptop_large
                    followRedirects: false
                    headers:
                      reprehenderit_1eb: consequat adipisicing r
                      dolore2: dolore irure magna
                      eiusmodb4c: dolor in officia
                    locations:
                      - aws:eu-west-3
                    metadata:
                      ci:
                        pipeline:
                          url: eu sunt
                        provider:
                          name: est mo
                      git:
                        branch: in
                        commitSha: incididu
                    retry:
                      count: 29139225
                      interval: -2331455.1292161793
                    startUrl: do elit
                    variables:
                      nullafa: quis ve
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                batch_id: incididunt velit deserunt id
                locations:
                  - id: -3139801
                    name: minim deserunt
                  - id: 75548047
                    name: commodo enim
                results:
                  - device: laptop_large
                    location: 3377795
                    public_id: in commodo aute occaecat
                    result_id: anim in ea
                  - device: laptop_large
                    location: -23260830
                    public_id: sunt aliqua nostrud non aute
                    result_id: labore Excepteur ullamco in adipisicing
                triggered_check_ids:
                  - adipisicing
                  - ut
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/synthetics/tests/{public_id}:
    get:
      tags:
        - Synthetics
      summary: Get a test configuration
      description: Get the detailed configuration associated with a Synthetics test.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: public_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The public ID of the test to get details from.
          example: proident
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                config:
                  configVariables:
                    - description: Example for the variable.
                      type: string
                    - description: Example for the variable.
                      type: string
                  request:
                    allow_insecure: true
                    basicAuth:
                      password: PaSSw0RD!
                      username: my_username
                      type: web
                    body: veniam mollit non
                    bodyType: text/plain
                    certificate:
                      cert:
                        content: enim qui nulla culpa do
                        filename: esse quis
                        updatedAt: id veniam
                      key:
                        content: cillum dolore
                        filename: adipisicing
                        updatedAt: in est
                    dnsServer: amet
                    dnsServerPort: 31007
                    follow_redirects: true
                    headers:
                      Duis_e: sint nulla sit commodo
                      dolore_1d0: aliqua occaecat laboris ut
                      velit_3e: est sint culpa
                      laborum9: incididunt d
                    host: consequat exercitation ad commodo elit
                    message: elit magna ex
                    metadata:
                      Ut_1: Ut
                    method: GET
                    noSavingResponseBody: false
                    numberOfPackets: 0
                    port: 89884784
                    proxy:
                      url: https://example.com
                      headers:
                        veniam5ee: pariatur veniam ipsum
                    query: {}
                    servername: 'aliqua laborum '
                    service: pariatur deserunt consectetur proident laborum
                    shouldTrackHops: true
                    timeout: 85115446.29834276
                    url: https://example.com
                  variables:
                    - description: Example for the variable.
                      type: string
                    - description: Example for the variable.
                      type: string
                creator:
                  email: cillum minim adipisicing
                  handle: occaecat in lab
                  name: in dolor eu ullamco
                locations:
                  - aws:eu-west-3
                message: in in cupidatat pariatur
                monitor_id: 69248227
                name: eiusmod
                options:
                  accept_self_signed: true
                  allow_insecure: false
                  checkCertificateRevocation: false
                  ci:
                    executionRule: non_blocking
                  device_ids:
                    - laptop_large
                    - laptop_large
                  disableCors: true
                  disableCsp: true
                  follow_redirects: false
                  ignoreServerCertificateError: true
                  initialNavigationTimeout: -97143639
                  min_failure_duration: 64754603
                  min_location_failed: -55227254
                  monitor_name: in sed
                  monitor_options:
                    renotify_interval: 32
                  monitor_priority: 1
                  noScreenshot: true
                  restricted_roles:
                    - xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
                  retry:
                    count: 77861955
                    interval: -7622635.876915365
                  rumSettings:
                    applicationId: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
                    clientTokenId: 12345
                    isEnabled: true
                  tick_every: 165289
                public_id: proident pariat
                status: live
                steps:
                  - allowFailure: false
                    isCritical: true
                    name: ut mollit
                    noScreenshot: false
                    params: {}
                    timeout: -60714942
                    type: assertElementContent
                  - allowFailure: true
                    isCritical: true
                    name: irure oc
                    noScreenshot: true
                    params: {}
                    timeout: 58770622
                    type: assertElementContent
                subtype: http
                tags:
                  - aute amet
                  - et consequat dolor ullamco aliquip
                type: api
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    put:
      tags:
        - Synthetics
      summary: Edit a test
      description: >-
        This endpoint is deprecated. To edit a test, use [Edit an API
        test](https://docs.datadoghq.com/api/latest/synthetics/#edit-an-api-test)
        or [Edit a browser
        test](https://docs.datadoghq.com/api/latest/synthetics/#edit-a-browser-test).
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                config:
                  configVariables:
                    - description: Example for the variable.
                      type: string
                    - description: Example for the variable.
                      type: string
                  request:
                    allow_insecure: false
                    basicAuth:
                      password: PaSSw0RD!
                      username: my_username
                      type: web
                    body: tempor sed amet est
                    bodyType: text/plain
                    certificate:
                      cert:
                        content: elit consectetur laborum commodo
                        filename: dolor proident
                        updatedAt: Lorem ipsum
                      key:
                        content: nostrud ex aliquip
                        filename: consecte
                        updatedAt: mollit velit laborum et
                    dnsServer: veniam
                    dnsServerPort: 24481
                    follow_redirects: false
                    headers:
                      et6: irure consequat nisi ad
                      anim_: d
                    host: laboris eiusmod ad nisi
                    message: veniam
                    metadata:
                      esse_71: culpa nulla eu magna
                      sit_f: dolor minim
                    method: GET
                    noSavingResponseBody: false
                    numberOfPackets: 9
                    port: 39948032
                    proxy:
                      url: https://example.com
                      headers:
                        ex_15d: ad proident id voluptate cillum
                        dob: Duis
                        amet91: incididunt
                        eiusmod6: sit et fugiat sint deserunt
                    query: {}
                    servername: irure aliquip eiusmod enim exercitation
                    service: Ut id est veniam
                    shouldTrackHops: false
                    timeout: 28909376.229924083
                    url: https://example.com
                  variables:
                    - description: Example for the variable.
                      type: string
                    - description: Example for the variable.
                      type: string
                locations:
                  - aws:eu-west-3
                message: c
                name: ut in
                options:
                  accept_self_signed: false
                  allow_insecure: false
                  checkCertificateRevocation: false
                  ci:
                    executionRule: skipped
                  device_ids:
                    - laptop_large
                    - laptop_large
                  disableCors: true
                  disableCsp: true
                  follow_redirects: true
                  ignoreServerCertificateError: true
                  initialNavigationTimeout: -31792175
                  min_failure_duration: 79967859
                  min_location_failed: -27248557
                  monitor_name: ipsum ea qui sit fugiat
                  monitor_options:
                    renotify_interval: 202
                  monitor_priority: 1
                  noScreenshot: true
                  restricted_roles:
                    - xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
                  retry:
                    count: -88765405
                    interval: 52931373.00363368
                  rumSettings:
                    applicationId: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
                    clientTokenId: 12345
                    isEnabled: true
                  tick_every: 214620
                status: live
                steps:
                  - allowFailure: false
                    isCritical: true
                    name: minim eiusmo
                    noScreenshot: true
                    params: {}
                    timeout: 24433399
                    type: assertElementContent
                  - allowFailure: false
                    isCritical: true
                    name: Duis Lorem sunt
                    noScreenshot: true
                    params: {}
                    timeout: -6244235
                    type: assertElementContent
                subtype: http
                tags:
                  - tempor officia esse
                  - ad in a
                type: browser
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: public_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The public ID of the test to get details from.
          example: proident
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                config:
                  configVariables:
                    - description: Example for the variable.
                      type: string
                    - description: Example for the variable.
                      type: string
                  request:
                    allow_insecure: true
                    basicAuth:
                      password: PaSSw0RD!
                      username: my_username
                      type: web
                    body: veniam mollit non
                    bodyType: text/plain
                    certificate:
                      cert:
                        content: enim qui nulla culpa do
                        filename: esse quis
                        updatedAt: id veniam
                      key:
                        content: cillum dolore
                        filename: adipisicing
                        updatedAt: in est
                    dnsServer: amet
                    dnsServerPort: 31007
                    follow_redirects: true
                    headers:
                      Duis_e: sint nulla sit commodo
                      dolore_1d0: aliqua occaecat laboris ut
                      velit_3e: est sint culpa
                      laborum9: incididunt d
                    host: consequat exercitation ad commodo elit
                    message: elit magna ex
                    metadata:
                      Ut_1: Ut
                    method: GET
                    noSavingResponseBody: false
                    numberOfPackets: 0
                    port: 89884784
                    proxy:
                      url: https://example.com
                      headers:
                        veniam5ee: pariatur veniam ipsum
                    query: {}
                    servername: 'aliqua laborum '
                    service: pariatur deserunt consectetur proident laborum
                    shouldTrackHops: true
                    timeout: 85115446.29834276
                    url: https://example.com
                  variables:
                    - description: Example for the variable.
                      type: string
                    - description: Example for the variable.
                      type: string
                creator:
                  email: cillum minim adipisicing
                  handle: occaecat in lab
                  name: in dolor eu ullamco
                locations:
                  - aws:eu-west-3
                message: in in cupidatat pariatur
                monitor_id: 69248227
                name: eiusmod
                options:
                  accept_self_signed: true
                  allow_insecure: false
                  checkCertificateRevocation: false
                  ci:
                    executionRule: non_blocking
                  device_ids:
                    - laptop_large
                    - laptop_large
                  disableCors: true
                  disableCsp: true
                  follow_redirects: false
                  ignoreServerCertificateError: true
                  initialNavigationTimeout: -97143639
                  min_failure_duration: 64754603
                  min_location_failed: -55227254
                  monitor_name: in sed
                  monitor_options:
                    renotify_interval: 32
                  monitor_priority: 1
                  noScreenshot: true
                  restricted_roles:
                    - xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
                  retry:
                    count: 77861955
                    interval: -7622635.876915365
                  rumSettings:
                    applicationId: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
                    clientTokenId: 12345
                    isEnabled: true
                  tick_every: 165289
                public_id: proident pariat
                status: live
                steps:
                  - allowFailure: false
                    isCritical: true
                    name: ut mollit
                    noScreenshot: false
                    params: {}
                    timeout: -60714942
                    type: assertElementContent
                  - allowFailure: true
                    isCritical: true
                    name: irure oc
                    noScreenshot: true
                    params: {}
                    timeout: 58770622
                    type: assertElementContent
                subtype: http
                tags:
                  - aute amet
                  - et consequat dolor ullamco aliquip
                type: api
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/synthetics/tests/{public_id}/results:
    get:
      tags:
        - Synthetics
      summary: Get an API test's latest results summaries
      description: Get the last 50 test results summaries for a given Synthetics API test.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: from_ts
          in: query
          schema:
            type: number
          description: Timestamp in milliseconds from which to start querying results.
          example: '-70569764'
        - name: to_ts
          in: query
          schema:
            type: number
          description: Timestamp in milliseconds up to which to query results.
          example: '-70569764'
        - name: probe_dc
          in: query
          schema:
            type: string
          description: Locations for which to query results.
          example: anim et
        - name: public_id
          in: path
          schema:
            type: string
          required: true
          description: >-
            (Required) The public ID of the test for which to search results
            for.
          example: proident
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                last_timestamp_fetched: -20764772
                results:
                  - check_time: -6305683.882290497
                    probe_dc: ad v
                    result:
                      passed: false
                      timings:
                        dns: -89061873.58509672
                        download: 75489948.2448268
                        firstByte: 88554867.43427846
                        handshake: 81862463.21802372
                        redirect: -96901502.87364338
                        ssl: 66026304.452638716
                        tcp: 23864083.36585614
                        total: 57515832.901994556
                        wait: 60770974.43345761
                    result_id: in tempor
                    status: 1
                  - check_time: -83760879.66624887
                    probe_dc: sunt labore ea
                    result:
                      passed: true
                      timings:
                        dns: -49796488.43642912
                        download: -37814192.030964166
                        firstByte: -97119321.405187
                        handshake: -17523774.310356945
                        redirect: -72416936.8632721
                        ssl: 45417249.80801943
                        tcp: -11533019.29279089
                        total: -30688764.450259313
                        wait: -85296084.21521014
                    result_id: proident
                    status: 2
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/synthetics/tests/{public_id}/results/{result_id}:
    get:
      tags:
        - Synthetics
      summary: Get an API test result
      description: Get a specific full result from a given (API) Synthetic test.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: public_id
          in: path
          schema:
            type: string
          required: true
          description: >-
            (Required) The public ID of the API test to which the target result
            belongs.
          example: proident
        - name: result_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the result to get.
          example: proident
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                check:
                  config:
                    configVariables:
                      - description: Example for the variable.
                        type: string
                      - description: Example for the variable.
                        type: string
                    request:
                      allow_insecure: true
                      basicAuth:
                        password: PaSSw0RD!
                        username: my_username
                        type: web
                      body: ullamco Duis
                      bodyType: text/plain
                      certificate:
                        cert:
                          content: dolor
                          filename: Excepteur enim nisi est
                          updatedAt: reprehenderit
                        key:
                          content: laboris nostrud
                          filename: ex mollit
                          updatedAt: est qui tempor
                      dnsServer: Excepteur
                      dnsServerPort: 9545
                      follow_redirects: true
                      headers:
                        et_31: et Duis Ut
                        irure544: consequat minim sint ea
                        officia7d1: ea pariatur in
                      host: irure exercitation dolor
                      message: esse laboris sint quis velit
                      metadata:
                        proident_: elit dolore
                        pariatur4d: culpa officia sed esse
                        aliqua_17a: veniam exercitation nostrud laboris
                      method: GET
                      noSavingResponseBody: false
                      numberOfPackets: 5
                      port: 8623687
                      proxy:
                        url: https://example.com
                        headers:
                          sit_ae7: amet
                          culpa_fa: amet
                      query: {}
                      servername: quis deserunt dolor esse
                      service: laborum anim e
                      shouldTrackHops: true
                      timeout: 59965615.27438146
                      url: https://example.com
                    variables:
                      - description: Example for the variable.
                        type: string
                      - description: Example for the variable.
                        type: string
                check_time: 85189707.2201941
                check_version: -67109701
                probe_dc: laborum nostrud veniam adipisicing
                result:
                  cert:
                    cipher: sit quis pariatur
                    exponent: 7800866.317082673
                    extKeyUsage:
                      - elit irure minim comm
                      - et
                    fingerprint: enim exercitation
                    fingerprint256: qui ex laboris sunt
                    issuer:
                      C: ea Duis deserunt
                      CN: cupidatat sint deserunt
                      L: ea
                      O: incididunt laborum Duis
                      OU: ut eni
                      ST: magna tempor consequat
                    modulus: non ea aliquip
                    protocol: laboris
                    serialNumber: aliquip commodo
                    subject:
                      C: sed voluptate sunt
                      CN: consequat
                      L: pariatur est ipsum irure
                      O: ut consectetur
                      OU: cil
                      ST: veniam minim incididunt
                      altName: in dolore consequat
                    validFrom: '2008-12-17T20:50:01.751Z'
                    validTo: '2019-03-01T21:17:38.291Z'
                  eventType: not_scheduled
                  failure:
                    code: OCSP
                    message: Error during DNS resolution (ENOTFOUND).
                  httpStatusCode: 7692564
                  requestHeaders:
                    velit_0_: {}
                    in_c3: {}
                  responseBody: nisi
                  responseHeaders:
                    nulla_c1: {}
                    eiusmod6: {}
                    anim_17_: {}
                    temporfd: {}
                  responseSize: 24496144
                  timings:
                    dns: -91386581.59465863
                    download: 57420702.31579301
                    firstByte: 36715076.2654593
                    handshake: -90987691.62449512
                    redirect: 25763282.033644646
                    ssl: 25682764.674628228
                    tcp: -48188490.35674222
                    total: -8515641.691526279
                    wait: -30443083.756573364
                result_id: dolor sit anim e
                status: 1
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/synthetics/tests/{public_id}/status:
    put:
      tags:
        - Synthetics
      summary: Pause or start a test
      description: Pause or start a Synthetics test by changing the status.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                new_status: live
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: public_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The public ID of the Synthetic test to update.
          example: proident
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example: true
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/synthetics/variables:
    get:
      tags:
        - Synthetics
      summary: Get all global variables
      description: Get the list of all Synthetics global variables.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                variables:
                  - description: Example description
                    name: MY_VARIABLE
                    tags:
                      - team:front
                      - test:workflow-1
                    value:
                      secure: true
                      value: value
                    attributes:
                      restricted_roles:
                        - xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
                    id: in in
                    parse_test_options:
                      type: http_body
                      field: content-type
                      localVariableName: LOCAL_VARIABLE
                      parser:
                        type: regex
                        value: .*
                    parse_test_public_id: abc-def-123
                  - description: Example description
                    name: MY_VARIABLE
                    tags:
                      - team:front
                      - test:workflow-1
                    value:
                      secure: true
                      value: value
                    attributes:
                      restricted_roles:
                        - xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
                    id: elit reprehenderit nisi exercitation adipisicing
                    parse_test_options:
                      type: http_body
                      field: content-type
                      localVariableName: LOCAL_VARIABLE
                      parser:
                        type: regex
                        value: .*
                    parse_test_public_id: abc-def-123
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    post:
      tags:
        - Synthetics
      summary: Create a global variable
      description: Create a Synthetics global variable.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                description: Example description
                name: MY_VARIABLE
                tags:
                  - team:front
                  - test:workflow-1
                value:
                  secure: true
                  value: value
                attributes:
                  restricted_roles:
                    - xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
                parse_test_options:
                  type: http_body
                  field: content-type
                  localVariableName: LOCAL_VARIABLE
                  parser:
                    type: regex
                    value: .*
                parse_test_public_id: abc-def-123
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                description: Example description
                name: MY_VARIABLE
                tags:
                  - team:front
                  - test:workflow-1
                value:
                  secure: true
                  value: value
                attributes:
                  restricted_roles:
                    - xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
                id: exercitation reprehenderit
                parse_test_options:
                  type: http_body
                  field: content-type
                  localVariableName: LOCAL_VARIABLE
                  parser:
                    type: regex
                    value: .*
                parse_test_public_id: abc-def-123
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/synthetics/variables/{variable_id}:
    delete:
      tags:
        - Synthetics
      summary: Delete a global variable
      description: Delete a Synthetics global variable.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: variable_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the global variable.
          example: proident
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    get:
      tags:
        - Synthetics
      summary: Get a global variable
      description: Get the detailed configuration of a global variable.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: variable_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the global variable.
          example: proident
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                description: Example description
                name: MY_VARIABLE
                tags:
                  - team:front
                  - test:workflow-1
                value:
                  secure: true
                  value: value
                attributes:
                  restricted_roles:
                    - xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
                id: exercitation reprehenderit
                parse_test_options:
                  type: http_body
                  field: content-type
                  localVariableName: LOCAL_VARIABLE
                  parser:
                    type: regex
                    value: .*
                parse_test_public_id: abc-def-123
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    put:
      tags:
        - Synthetics
      summary: Edit a global variable
      description: Edit a Synthetics global variable.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                description: Example description
                name: MY_VARIABLE
                tags:
                  - team:front
                  - test:workflow-1
                value:
                  secure: true
                  value: value
                attributes:
                  restricted_roles:
                    - xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
                parse_test_options:
                  type: http_body
                  field: content-type
                  localVariableName: LOCAL_VARIABLE
                  parser:
                    type: regex
                    value: .*
                parse_test_public_id: abc-def-123
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: variable_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the global variable.
          example: proident
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                description: Example description
                name: MY_VARIABLE
                tags:
                  - team:front
                  - test:workflow-1
                value:
                  secure: true
                  value: value
                attributes:
                  restricted_roles:
                    - xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
                id: exercitation reprehenderit
                parse_test_options:
                  type: http_body
                  field: content-type
                  localVariableName: LOCAL_VARIABLE
                  parser:
                    type: regex
                    value: .*
                parse_test_public_id: abc-def-123
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/tags/hosts:
    get:
      tags:
        - Tags
      summary: Get Tags
      description: Return a mapping of tags to hosts for your whole infrastructure.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: source
          in: query
          schema:
            type: string
          description: >-
            When specified, filters host list to those tags with the specified
            source.
          example: proident
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                tags:
                  proident_ae8:
                    - test.metric.host
                    - test.metric.host
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/tags/hosts/{host_name}:
    delete:
      tags:
        - Tags
      summary: Remove host tags
      description: |-
        This endpoint allows you to remove all user-assigned tags
        for a single host.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: source
          in: query
          schema:
            type: string
          description: >-
            The source of the tags (for example chef, puppet).

            [Complete list of source attribute
            values](https://docs.datadoghq.com/integrations/faq/list-of-api-source-attribute-value).
          example: proident
        - name: host_name
          in: path
          schema:
            type: string
          required: true
          description: >-
            (Required) This endpoint allows you to remove all user-assigned tags
            for a single host.
          example: proident
      responses:
        '204':
          description: No Content
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    get:
      tags:
        - Tags
      summary: Get host tags
      description: Return the list of tags that apply to a given host.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: source
          in: query
          schema:
            type: string
          description: Source to filter.
          example: proident
        - name: host_name
          in: path
          schema:
            type: string
          required: true
          description: >-
            (Required) When specified, filters list of tags to those tags with
            the specified source.
          example: proident
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                host: test.host
                tags:
                  - environment:production
                  - environment:production
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    post:
      tags:
        - Tags
      summary: Add tags to a host
      description: |-
        This endpoint allows you to add new tags to a host,
        optionally specifying where these tags come from.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                host: test.host
                tags:
                  - environment:production
                  - environment:production
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: source
          in: query
          schema:
            type: string
          description: >-
            The source of the tags.

            [Complete list of source attribute
            values](https://docs.datadoghq.com/integrations/faq/list-of-api-source-attribute-value).
          example: chef
        - name: host_name
          in: path
          schema:
            type: string
          required: true
          description: >-
            (Required) This endpoint allows you to add new tags to a host,
            optionally specifying where the tags came from.
          example: proident
      responses:
        '201':
          description: Created
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                host: test.host
                tags:
                  - environment:production
                  - environment:production
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    put:
      tags:
        - Tags
      summary: Update host tags
      description: |-
        This endpoint allows you to update/replace all tags in
        an integration source with those supplied in the request.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                host: test.host
                tags:
                  - environment:production
                  - environment:production
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: source
          in: query
          schema:
            type: string
          description: >-
            The source of the tags (for example chef, puppet).

            [Complete list of source attribute
            values](https://docs.datadoghq.com/integrations/faq/list-of-api-source-attribute-value)
          example: proident
        - name: host_name
          in: path
          schema:
            type: string
          required: true
          description: >-
            (Required) This endpoint allows you to update/replace all in an
            integration source with those supplied in the request.
          example: proident
      responses:
        '201':
          description: Created
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                host: test.host
                tags:
                  - environment:production
                  - environment:production
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/usage/analyzed_logs:
    get:
      tags:
        - Usage Metering
      summary: Get hourly usage for analyzed logs
      description: >-
        Get hourly usage for analyzed logs (Security Monitoring).

        **Note:** hourly usage data for all products is now available in the
        [Get hourly usage by product family
        API](https://docs.datadoghq.com/api/latest/usage-metering/#get-hourly-usage-by-product-family).
        Refer to [Migrating from the V1 Hourly Usage APIs to
        V2](https://docs.datadoghq.com/account_management/guide/hourly-usage-migration/)
        for the associated migration guide.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json;datetime-format=rfc3339
        - name: start_hr
          in: query
          schema:
            type: string
          description: >-
            (Required) Datetime in ISO-8601 format, UTC, precise to hour:
            `[YYYY-MM-DDThh]` for usage beginning at this hour.
          example: '1971-02-27T12:47:34.135Z'
        - name: end_hr
          in: query
          schema:
            type: string
          description: >-
            Datetime in ISO-8601 format, UTC, precise to hour: `[YYYY-MM-DDThh]`
            for usage ending

            **before** this hour.
          example: '1971-02-27T12:47:34.135Z'
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                usage:
                  - analyzed_logs: 65616987
                    hour: '1980-07-03T03:33:25.036Z'
                    org_name: nulla ad
                    public_id: ex minim aliquip
                  - analyzed_logs: 56526027
                    hour: '2008-10-03T09:08:00.919Z'
                    org_name: veniam pariatur ei
                    public_id: aliquip in ullamco ex eu
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/usage/audit_logs:
    get:
      tags:
        - Usage Metering
      summary: Get hourly usage for audit logs
      description: >-
        Get hourly usage for audit logs.

        **Note:** hourly usage data for all products is now available in the
        [Get hourly usage by product family
        API](https://docs.datadoghq.com/api/latest/usage-metering/#get-hourly-usage-by-product-family).
        Refer to [Migrating from the V1 Hourly Usage APIs to
        V2](https://docs.datadoghq.com/account_management/guide/hourly-usage-migration/)
        for the associated migration guide.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json;datetime-format=rfc3339
        - name: start_hr
          in: query
          schema:
            type: string
          description: >-
            (Required) Datetime in ISO-8601 format, UTC, precise to hour:
            `[YYYY-MM-DDThh]` for usage beginning at this hour.
          example: '1971-02-27T12:47:34.135Z'
        - name: end_hr
          in: query
          schema:
            type: string
          description: >-
            Datetime in ISO-8601 format, UTC, precise to hour: `[YYYY-MM-DDThh]`
            for usage ending

            **before** this hour.
          example: '1971-02-27T12:47:34.135Z'
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                usage:
                  - hour: '2001-08-22T23:02:38.399Z'
                    lines_indexed: -36383874
                    org_name: fugiat sint deserunt eu
                    public_id: Duis dolor amet
                  - hour: '1981-04-25T05:44:22.453Z'
                    lines_indexed: 11232324
                    org_name: minim elit eu id ea
                    public_id: sit Duis
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/usage/aws_lambda:
    get:
      tags:
        - Usage Metering
      summary: Get hourly usage for lambda
      description: >-
        Get hourly usage for lambda.

        **Note:** hourly usage data for all products is now available in the
        [Get hourly usage by product family
        API](https://docs.datadoghq.com/api/latest/usage-metering/#get-hourly-usage-by-product-family).
        Refer to [Migrating from the V1 Hourly Usage APIs to
        V2](https://docs.datadoghq.com/account_management/guide/hourly-usage-migration/)
        for the associated migration guide.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json;datetime-format=rfc3339
        - name: start_hr
          in: query
          schema:
            type: string
          description: >-
            (Required) Datetime in ISO-8601 format, UTC, precise to hour:
            [YYYY-MM-DDThh] for usage beginning at this hour.
          example: '1971-02-27T12:47:34.135Z'
        - name: end_hr
          in: query
          schema:
            type: string
          description: >-
            Datetime in ISO-8601 format, UTC, precise to hour: [YYYY-MM-DDThh]
            for usage ending **before** this hour.
          example: '1971-02-27T12:47:34.135Z'
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                usage:
                  - func_count: 34170020
                    hour: '1978-07-11T21:50:21.172Z'
                    invocations_sum: -20450157
                    org_name: elit aliqua eu cillum
                    public_id: pariatur reprehenderit eu
                  - func_count: 80403362
                    hour: '2019-08-30T17:24:24.371Z'
                    invocations_sum: 64303993
                    org_name: officia dolor
                    public_id: veniam qui elit
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/usage/billable-summary:
    get:
      tags:
        - Usage Metering
      summary: Get billable usage across your account
      description: Get billable usage across your account.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json;datetime-format=rfc3339
        - name: month
          in: query
          schema:
            type: string
          description: >-
            Datetime in ISO-8601 format, UTC, precise to month: `[YYYY-MM]` for
            usage starting this month.
          example: '1971-02-27T12:47:34.135Z'
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                usage:
                  - billing_plan: ea nisi
                    end_date: '1999-05-11T11:14:23.737Z'
                    num_orgs: 60940451
                    org_name: occaecat ea ipsum incididunt in
                    public_id: commodo irure culpa eiusmod
                    ratio_in_month: 6317429.827484354
                    region: deserunt anim
                    start_date: '1999-03-27T05:44:21.356Z'
                    usage:
                      apm_fargate_average:
                        account_billable_usage: -13388109
                        elapsed_usage_hours: 10289656
                        first_billable_usage_hour: '1993-11-09T06:48:30.880Z'
                        last_billable_usage_hour: '2018-05-26T20:17:48.312Z'
                        org_billable_usage: 46240051
                        percentage_in_account: -31681380.65686485
                        usage_unit: ir
                      apm_fargate_sum:
                        account_billable_usage: -85669873
                        elapsed_usage_hours: -37535633
                        first_billable_usage_hour: '1998-08-09T05:42:27.384Z'
                        last_billable_usage_hour: '1951-05-13T17:30:10.209Z'
                        org_billable_usage: 56933807
                        percentage_in_account: 55610490.79763812
                        usage_unit: proident voluptate nulla
                      apm_host_sum:
                        account_billable_usage: 60308530
                        elapsed_usage_hours: 63510222
                        first_billable_usage_hour: '1977-08-29T04:38:01.433Z'
                        last_billable_usage_hour: '2008-04-03T06:32:55.446Z'
                        org_billable_usage: -86804295
                        percentage_in_account: -63024279.14587216
                        usage_unit: qui amet ipsum
                      apm_host_top99p:
                        account_billable_usage: -53646494
                        elapsed_usage_hours: 90317383
                        first_billable_usage_hour: '1955-05-31T20:52:14.986Z'
                        last_billable_usage_hour: '2003-11-24T20:20:52.007Z'
                        org_billable_usage: 83949968
                        percentage_in_account: 93471328.99647444
                        usage_unit: veniam ullamco
                      apm_profiler_host_sum:
                        account_billable_usage: -9165492
                        elapsed_usage_hours: -92466947
                        first_billable_usage_hour: '1999-11-28T17:24:10.638Z'
                        last_billable_usage_hour: '1952-12-12T02:42:23.938Z'
                        org_billable_usage: -38997392
                        percentage_in_account: -29777279.003141865
                        usage_unit: ut
                      apm_profiler_host_top99p:
                        account_billable_usage: 24314839
                        elapsed_usage_hours: -68571035
                        first_billable_usage_hour: '1948-03-19T11:38:08.648Z'
                        last_billable_usage_hour: '2003-09-05T10:33:05.106Z'
                        org_billable_usage: 56338398
                        percentage_in_account: 95106748.2817764
                        usage_unit: id
                      apm_trace_search_sum:
                        account_billable_usage: -81296135
                        elapsed_usage_hours: 49463993
                        first_billable_usage_hour: '1990-03-01T14:40:54.349Z'
                        last_billable_usage_hour: '1984-08-04T01:27:12.774Z'
                        org_billable_usage: 56430529
                        percentage_in_account: -19668097.770459175
                        usage_unit: dolor ad
                      application_security_fargate_average:
                        account_billable_usage: 97574223
                        elapsed_usage_hours: -1172681
                        first_billable_usage_hour: '2016-03-23T16:00:44.857Z'
                        last_billable_usage_hour: '2007-08-10T02:56:01.599Z'
                        org_billable_usage: 85598577
                        percentage_in_account: -2200442.2234033495
                        usage_unit: fugiat est culpa elit in
                      application_security_host_sum:
                        account_billable_usage: -51410804
                        elapsed_usage_hours: -53687256
                        first_billable_usage_hour: '1964-12-14T17:59:47.025Z'
                        last_billable_usage_hour: '2002-03-13T09:36:12.068Z'
                        org_billable_usage: 73282920
                        percentage_in_account: 88491525.7936452
                        usage_unit: non cillum
                      application_security_host_top99:
                        account_billable_usage: -73543116
                        elapsed_usage_hours: -60889149
                        first_billable_usage_hour: '1994-02-10T22:20:16.448Z'
                        last_billable_usage_hour: '1998-04-23T20:18:12.268Z'
                        org_billable_usage: 43096446
                        percentage_in_account: -19900545.337514147
                        usage_unit: ipsum enim labore
                      ci_pipeline_indexed_spans_sum:
                        account_billable_usage: 50654661
                        elapsed_usage_hours: 38663281
                        first_billable_usage_hour: '1989-11-06T12:33:30.778Z'
                        last_billable_usage_hour: '1987-08-27T06:20:45.108Z'
                        org_billable_usage: 43682006
                        percentage_in_account: -95751817.1213521
                        usage_unit: do
                      ci_pipeline_maximum:
                        account_billable_usage: 1505195
                        elapsed_usage_hours: 65414237
                        first_billable_usage_hour: '2015-02-02T16:36:03.287Z'
                        last_billable_usage_hour: '1981-01-14T23:46:32.862Z'
                        org_billable_usage: -67944138
                        percentage_in_account: 61158315.745036066
                        usage_unit: tempor dolore
                      ci_pipeline_sum:
                        account_billable_usage: 64782051
                        elapsed_usage_hours: 80553832
                        first_billable_usage_hour: '1986-11-27T06:21:32.570Z'
                        last_billable_usage_hour: '1950-03-22T00:07:11.098Z'
                        org_billable_usage: -58947801
                        percentage_in_account: -28262635.287446126
                        usage_unit: Ut labore reprehenderit consequat ipsum
                      ci_test_indexed_spans_sum:
                        account_billable_usage: 54505105
                        elapsed_usage_hours: -93797247
                        first_billable_usage_hour: '1956-12-05T17:24:23.082Z'
                        last_billable_usage_hour: '1970-02-28T19:34:32.971Z'
                        org_billable_usage: -20314948
                        percentage_in_account: -86943761.67984457
                        usage_unit: dolor enim
                      ci_testing_maximum:
                        account_billable_usage: -56776015
                        elapsed_usage_hours: 9977290
                        first_billable_usage_hour: '1980-08-30T18:05:07.141Z'
                        last_billable_usage_hour: '1958-10-21T13:21:34.786Z'
                        org_billable_usage: 70785379
                        percentage_in_account: 91907344.68446437
                        usage_unit: Excepteur
                      ci_testing_sum:
                        account_billable_usage: -58125276
                        elapsed_usage_hours: -94008944
                        first_billable_usage_hour: '1961-01-20T13:03:16.259Z'
                        last_billable_usage_hour: '1945-04-25T14:21:19.679Z'
                        org_billable_usage: -31465747
                        percentage_in_account: -72026587.57119495
                        usage_unit: aliquip
                      cloud_cost_management_average:
                        account_billable_usage: -37177482
                        elapsed_usage_hours: 59922335
                        first_billable_usage_hour: '1968-02-26T01:37:05.651Z'
                        last_billable_usage_hour: '1954-08-21T10:55:52.830Z'
                        org_billable_usage: 64669715
                        percentage_in_account: 63953985.19430685
                        usage_unit: in elit
                      cloud_cost_management_sum:
                        account_billable_usage: -40290750
                        elapsed_usage_hours: -47748230
                        first_billable_usage_hour: '1996-08-27T18:29:16.838Z'
                        last_billable_usage_hour: '1985-04-26T13:54:08.996Z'
                        org_billable_usage: 41786504
                        percentage_in_account: -65885170.85407135
                        usage_unit: eu commodo officia esse
                      cspm_container_sum:
                        account_billable_usage: -36658888
                        elapsed_usage_hours: 95723360
                        first_billable_usage_hour: '1943-10-13T06:18:18.511Z'
                        last_billable_usage_hour: '1969-08-25T17:11:35.823Z'
                        org_billable_usage: 42592082
                        percentage_in_account: -22023903.12537919
                        usage_unit: mollit Duis amet nostrud
                      cspm_host_sum:
                        account_billable_usage: -9461495
                        elapsed_usage_hours: -70410799
                        first_billable_usage_hour: '1962-06-04T10:15:59.906Z'
                        last_billable_usage_hour: '1957-12-04T15:54:09.115Z'
                        org_billable_usage: -50907694
                        percentage_in_account: 67041007.783779114
                        usage_unit: eu esse quis Ut
                      cspm_host_top99p:
                        account_billable_usage: -61013466
                        elapsed_usage_hours: 33215274
                        first_billable_usage_hour: '2015-07-22T22:08:34.015Z'
                        last_billable_usage_hour: '1965-05-27T22:16:16.909Z'
                        org_billable_usage: 26623035
                        percentage_in_account: -71359126.52801934
                        usage_unit: Ut exercitation incididun
                      custom_event_sum:
                        account_billable_usage: 89974813
                        elapsed_usage_hours: 93835159
                        first_billable_usage_hour: '1948-09-28T17:30:09.856Z'
                        last_billable_usage_hour: '1990-10-14T16:41:30.161Z'
                        org_billable_usage: -61294611
                        percentage_in_account: -18272601.19518526
                        usage_unit: quis lab
                      cws_container_sum:
                        account_billable_usage: -4925403
                        elapsed_usage_hours: -75410528
                        first_billable_usage_hour: '2004-04-16T19:29:40.844Z'
                        last_billable_usage_hour: '1959-09-04T23:52:12.704Z'
                        org_billable_usage: -41261160
                        percentage_in_account: -28639689.73436424
                        usage_unit: in ea Excepteur
                      cws_host_sum:
                        account_billable_usage: -68071189
                        elapsed_usage_hours: 6820574
                        first_billable_usage_hour: '2021-04-18T14:29:03.285Z'
                        last_billable_usage_hour: '1953-05-06T03:02:19.008Z'
                        org_billable_usage: -23311671
                        percentage_in_account: -90716006.85157923
                        usage_unit: do est
                      cws_host_top99p:
                        account_billable_usage: 18895967
                        elapsed_usage_hours: -69386748
                        first_billable_usage_hour: '2009-04-05T11:15:03.918Z'
                        last_billable_usage_hour: '1974-12-05T07:24:31.812Z'
                        org_billable_usage: -92911180
                        percentage_in_account: -6205349.593663901
                        usage_unit: aute consectetur
                      dbm_host_sum:
                        account_billable_usage: -50246051
                        elapsed_usage_hours: 40151256
                        first_billable_usage_hour: '1992-02-09T01:45:44.197Z'
                        last_billable_usage_hour: '1949-07-21T15:02:57.546Z'
                        org_billable_usage: -78549887
                        percentage_in_account: -13503627.838687256
                        usage_unit: in ut ex
                      dbm_host_top99p:
                        account_billable_usage: -4116400
                        elapsed_usage_hours: -28231050
                        first_billable_usage_hour: '1997-06-04T11:14:18.013Z'
                        last_billable_usage_hour: '1994-12-09T18:35:50.180Z'
                        org_billable_usage: -77687979
                        percentage_in_account: -68696077.72112837
                        usage_unit: cillum reprehenderit
                      dbm_normalized_queries_average:
                        account_billable_usage: -18913461
                        elapsed_usage_hours: 81533081
                        first_billable_usage_hour: '1992-08-26T17:13:53.340Z'
                        last_billable_usage_hour: '1943-05-08T14:58:57.638Z'
                        org_billable_usage: 12304057
                        percentage_in_account: -30651260.2829836
                        usage_unit: commodo ut veniam
                      dbm_normalized_queries_sum:
                        account_billable_usage: 53282900
                        elapsed_usage_hours: 18178934
                        first_billable_usage_hour: '1989-08-14T18:53:08.451Z'
                        last_billable_usage_hour: '1947-04-26T22:26:47.504Z'
                        org_billable_usage: -3644083
                        percentage_in_account: -4352131.894775331
                        usage_unit: ut ipsum tempor
                      fargate_container_apm_and_profiler_average:
                        account_billable_usage: -69503770
                        elapsed_usage_hours: -21370667
                        first_billable_usage_hour: '1961-08-27T03:40:33.901Z'
                        last_billable_usage_hour: '1953-09-17T05:41:29.179Z'
                        org_billable_usage: -23530170
                        percentage_in_account: -13638919.211571515
                        usage_unit: sint commodo id
                      fargate_container_apm_and_profiler_sum:
                        account_billable_usage: 93796420
                        elapsed_usage_hours: 75166016
                        first_billable_usage_hour: '2013-10-27T01:39:01.945Z'
                        last_billable_usage_hour: '1999-09-12T19:07:16.079Z'
                        org_billable_usage: 56660868
                        percentage_in_account: 50011986.63449663
                        usage_unit: amet occaecat enim
                      fargate_container_average:
                        account_billable_usage: -13846800
                        elapsed_usage_hours: -69245705
                        first_billable_usage_hour: '1989-01-04T18:20:50.781Z'
                        last_billable_usage_hour: '1961-08-23T23:00:41.976Z'
                        org_billable_usage: -25096335
                        percentage_in_account: -57246136.69462722
                        usage_unit: pariatur
                      fargate_container_profiler_average:
                        account_billable_usage: -15625913
                        elapsed_usage_hours: 85704018
                        first_billable_usage_hour: '1948-07-05T17:03:51.460Z'
                        last_billable_usage_hour: '2009-10-24T11:11:45.386Z'
                        org_billable_usage: 7913239
                        percentage_in_account: 33280128.737655133
                        usage_unit: est deserunt amet
                      fargate_container_profiler_sum:
                        account_billable_usage: -97931807
                        elapsed_usage_hours: 82076698
                        first_billable_usage_hour: '1946-11-06T18:30:47.123Z'
                        last_billable_usage_hour: '1999-04-27T23:27:14.399Z'
                        org_billable_usage: 17393339
                        percentage_in_account: 6102134.890276149
                        usage_unit: con
                      fargate_container_sum:
                        account_billable_usage: -37802888
                        elapsed_usage_hours: -32129687
                        first_billable_usage_hour: '1984-03-29T13:34:44.545Z'
                        last_billable_usage_hour: '1980-03-07T10:00:21.481Z'
                        org_billable_usage: -6313782
                        percentage_in_account: -17420116.79365167
                        usage_unit: adipisicing
                      incident_management_maximum:
                        account_billable_usage: -2246738
                        elapsed_usage_hours: -85029016
                        first_billable_usage_hour: '1995-12-21T11:58:21.352Z'
                        last_billable_usage_hour: '1954-07-21T21:27:28.669Z'
                        org_billable_usage: 16618744
                        percentage_in_account: 76746900.49512777
                        usage_unit: laborum
                      incident_management_sum:
                        account_billable_usage: 78531797
                        elapsed_usage_hours: -12759346
                        first_billable_usage_hour: '2016-09-08T06:06:45.528Z'
                        last_billable_usage_hour: '1973-05-26T00:06:51.373Z'
                        org_billable_usage: 65149178
                        percentage_in_account: -42115369.99532912
                        usage_unit: commodo irure
                      infra_and_apm_host_sum:
                        account_billable_usage: 1052268
                        elapsed_usage_hours: 90106380
                        first_billable_usage_hour: '1957-12-12T06:47:53.229Z'
                        last_billable_usage_hour: '2014-01-21T22:38:03.917Z'
                        org_billable_usage: -67601095
                        percentage_in_account: -98362766.63877346
                        usage_unit: incididunt in
                      infra_and_apm_host_top99p:
                        account_billable_usage: 82753633
                        elapsed_usage_hours: 41345229
                        first_billable_usage_hour: '1962-03-08T20:43:13.035Z'
                        last_billable_usage_hour: '2014-02-09T10:46:59.811Z'
                        org_billable_usage: -82955912
                        percentage_in_account: -47670552.35069342
                        usage_unit: incididunt Lorem Duis consequat
                      infra_container_sum:
                        account_billable_usage: -3412878
                        elapsed_usage_hours: 83696723
                        first_billable_usage_hour: '1961-01-21T01:11:34.669Z'
                        last_billable_usage_hour: '1994-05-14T16:16:49.237Z'
                        org_billable_usage: -95204914
                        percentage_in_account: 41648707.08353984
                        usage_unit: exercitation
                      infra_host_sum:
                        account_billable_usage: 87309013
                        elapsed_usage_hours: -37200806
                        first_billable_usage_hour: '2005-06-23T11:50:17.989Z'
                        last_billable_usage_hour: '2018-07-06T19:08:04.972Z'
                        org_billable_usage: -98931588
                        percentage_in_account: -14575073.319357306
                        usage_unit: labore m
                      infra_host_top99p:
                        account_billable_usage: 346911
                        elapsed_usage_hours: 76850779
                        first_billable_usage_hour: '1949-01-29T01:36:04.602Z'
                        last_billable_usage_hour: '1957-08-02T09:07:27.635Z'
                        org_billable_usage: -66513493
                        percentage_in_account: 60363903.9853462
                        usage_unit: do amet incididunt proident aute
                      ingested_spans_sum:
                        account_billable_usage: -2654104
                        elapsed_usage_hours: 51657019
                        first_billable_usage_hour: '2021-10-07T13:38:03.033Z'
                        last_billable_usage_hour: '2018-08-18T21:07:49.504Z'
                        org_billable_usage: -60253015
                        percentage_in_account: 25010032.387927786
                        usage_unit: des
                      ingested_timeseries_average:
                        account_billable_usage: 8650249
                        elapsed_usage_hours: -41032190
                        first_billable_usage_hour: '1984-11-26T06:43:32.661Z'
                        last_billable_usage_hour: '1948-03-19T20:55:59.707Z'
                        org_billable_usage: -18518176
                        percentage_in_account: 27485458.140517995
                        usage_unit: Duis occaecat sunt
                      ingested_timeseries_sum:
                        account_billable_usage: -56976126
                        elapsed_usage_hours: -58169044
                        first_billable_usage_hour: '1965-10-21T21:30:44.420Z'
                        last_billable_usage_hour: '1949-06-21T15:36:32.309Z'
                        org_billable_usage: -5765277
                        percentage_in_account: -55802961.51247155
                        usage_unit: est sed in aliqua
                      iot_sum:
                        account_billable_usage: -93623356
                        elapsed_usage_hours: 93287546
                        first_billable_usage_hour: '1981-11-16T16:31:11.612Z'
                        last_billable_usage_hour: '1979-03-14T14:53:42.058Z'
                        org_billable_usage: -51195258
                        percentage_in_account: -22116520.15401624
                        usage_unit: quis proident
                      iot_top99p:
                        account_billable_usage: -92638784
                        elapsed_usage_hours: -31242169
                        first_billable_usage_hour: '1948-12-30T17:16:32.020Z'
                        last_billable_usage_hour: '1954-11-17T20:54:32.168Z'
                        org_billable_usage: -56333095
                        percentage_in_account: -99907607.98756924
                        usage_unit: dolor
                      lambda_function_average:
                        account_billable_usage: 26484925
                        elapsed_usage_hours: 77913912
                        first_billable_usage_hour: '2003-10-28T04:41:10.284Z'
                        last_billable_usage_hour: '1997-09-04T14:21:55.962Z'
                        org_billable_usage: 97781599
                        percentage_in_account: -78487342.30279168
                        usage_unit: adipisicing nulla culpa
                      lambda_function_sum:
                        account_billable_usage: 67492122
                        elapsed_usage_hours: -61665894
                        first_billable_usage_hour: '1991-11-14T07:40:44.022Z'
                        last_billable_usage_hour: '1976-03-28T18:07:07.720Z'
                        org_billable_usage: 29845867
                        percentage_in_account: -45390155.42543936
                        usage_unit: ipsum
                      logs_forwarding_sum:
                        account_billable_usage: 25193116
                        elapsed_usage_hours: 37101217
                        first_billable_usage_hour: '2011-10-09T14:03:48.444Z'
                        last_billable_usage_hour: '2016-09-02T07:21:27.433Z'
                        org_billable_usage: -62292149
                        percentage_in_account: 95923965.45249158
                        usage_unit: laboris
                      logs_indexed_15day_sum:
                        account_billable_usage: 85764053
                        elapsed_usage_hours: -9164527
                        first_billable_usage_hour: '2009-12-07T12:59:31.031Z'
                        last_billable_usage_hour: '1983-11-07T05:18:31.565Z'
                        org_billable_usage: 41007282
                        percentage_in_account: -62500822.46053488
                        usage_unit: irure consectetur
                      logs_indexed_180day_sum:
                        account_billable_usage: 11908816
                        elapsed_usage_hours: -26646697
                        first_billable_usage_hour: '1997-09-08T13:46:57.259Z'
                        last_billable_usage_hour: '1978-11-14T22:39:57.551Z'
                        org_billable_usage: 44914006
                        percentage_in_account: -69560687.789339
                        usage_unit: sunt
                      logs_indexed_30day_sum:
                        account_billable_usage: 47488634
                        elapsed_usage_hours: -18671836
                        first_billable_usage_hour: '1997-04-13T09:35:50.323Z'
                        last_billable_usage_hour: '1984-01-27T08:05:10.576Z'
                        org_billable_usage: -21428597
                        percentage_in_account: -44591822.78240021
                        usage_unit: dolore ut fugiat amet sunt
                      logs_indexed_360day_sum:
                        account_billable_usage: -19294725
                        elapsed_usage_hours: -47989813
                        first_billable_usage_hour: '1999-03-13T17:46:03.528Z'
                        last_billable_usage_hour: '2015-02-26T12:48:04.472Z'
                        org_billable_usage: 36780223
                        percentage_in_account: 93180623.43197334
                        usage_unit: non ut officia
                      logs_indexed_3day_sum:
                        account_billable_usage: -2027948
                        elapsed_usage_hours: -21481236
                        first_billable_usage_hour: '1954-11-21T18:03:19.706Z'
                        last_billable_usage_hour: '2017-05-31T08:15:59.077Z'
                        org_billable_usage: 1365546
                        percentage_in_account: 3601540.4688177556
                        usage_unit: ex exercitation
                      logs_indexed_45day_sum:
                        account_billable_usage: -71461923
                        elapsed_usage_hours: -24783657
                        first_billable_usage_hour: '1967-10-09T21:01:41.075Z'
                        last_billable_usage_hour: '1986-12-19T06:39:47.085Z'
                        org_billable_usage: 66933425
                        percentage_in_account: -49618224.71582087
                        usage_unit: incididunt sed
                      logs_indexed_60day_sum:
                        account_billable_usage: -89820245
                        elapsed_usage_hours: 27623099
                        first_billable_usage_hour: '2022-03-21T22:28:56.179Z'
                        last_billable_usage_hour: '1975-03-09T08:27:28.360Z'
                        org_billable_usage: 44951464
                        percentage_in_account: -25111436.768370822
                        usage_unit: exercitation
                      logs_indexed_7day_sum:
                        account_billable_usage: -27852546
                        elapsed_usage_hours: -89193313
                        first_billable_usage_hour: '1969-07-31T18:59:40.192Z'
                        last_billable_usage_hour: '2019-05-24T03:23:24.482Z'
                        org_billable_usage: -57512914
                        percentage_in_account: -54207227.129876316
                        usage_unit: enim adipisicing
                      logs_indexed_90day_sum:
                        account_billable_usage: 98644354
                        elapsed_usage_hours: 82675112
                        first_billable_usage_hour: '2006-10-24T16:38:04.695Z'
                        last_billable_usage_hour: '1955-03-11T05:15:50.035Z'
                        org_billable_usage: -11300192
                        percentage_in_account: 59574491.619504005
                        usage_unit: enim ut ea sint
                      logs_indexed_custom_retention_sum:
                        account_billable_usage: 94136564
                        elapsed_usage_hours: 44393056
                        first_billable_usage_hour: '1996-11-22T01:59:36.194Z'
                        last_billable_usage_hour: '1962-03-26T14:38:27.848Z'
                        org_billable_usage: 599678
                        percentage_in_account: -87769251.8950742
                        usage_unit: nisi id ut ad aliqua
                      logs_indexed_sum:
                        account_billable_usage: 41998980
                        elapsed_usage_hours: 64886282
                        first_billable_usage_hour: '1945-06-25T00:57:03.524Z'
                        last_billable_usage_hour: '1964-03-17T02:41:17.341Z'
                        org_billable_usage: -62831526
                        percentage_in_account: -11808885.799171299
                        usage_unit: nisi in
                      logs_ingested_sum:
                        account_billable_usage: -88621949
                        elapsed_usage_hours: 20294644
                        first_billable_usage_hour: '1957-11-01T02:58:46.882Z'
                        last_billable_usage_hour: '1994-09-11T14:37:40.693Z'
                        org_billable_usage: 85513482
                        percentage_in_account: -25505719.846274704
                        usage_unit: minim ea sunt Excepteur exercitation
                      network_device_sum:
                        account_billable_usage: 84027298
                        elapsed_usage_hours: 61665237
                        first_billable_usage_hour: '1953-12-29T21:20:29.917Z'
                        last_billable_usage_hour: '1980-06-16T20:24:34.617Z'
                        org_billable_usage: -67043835
                        percentage_in_account: 51207862.39856708
                        usage_unit: fugiat commodo ut et
                      network_device_top99p:
                        account_billable_usage: 29002172
                        elapsed_usage_hours: 57996969
                        first_billable_usage_hour: '1981-09-19T18:14:59.042Z'
                        last_billable_usage_hour: '2015-10-24T22:56:58.746Z'
                        org_billable_usage: -60593374
                        percentage_in_account: 38302883.57498515
                        usage_unit: consectetur deserun
                      npm_flow_sum:
                        account_billable_usage: 78152329
                        elapsed_usage_hours: -27719862
                        first_billable_usage_hour: '1952-07-03T09:49:30.686Z'
                        last_billable_usage_hour: '1983-12-20T12:50:49.498Z'
                        org_billable_usage: -80817211
                        percentage_in_account: 52501385.64946556
                        usage_unit: ut
                      npm_host_sum:
                        account_billable_usage: -94017935
                        elapsed_usage_hours: -79746032
                        first_billable_usage_hour: '1943-11-04T23:02:25.652Z'
                        last_billable_usage_hour: '1997-08-17T10:02:38.820Z'
                        org_billable_usage: -75737149
                        percentage_in_account: 40772446.598777205
                        usage_unit: cillum ut
                      npm_host_top99p:
                        account_billable_usage: 39445307
                        elapsed_usage_hours: -51812003
                        first_billable_usage_hour: '1971-04-08T23:38:49.630Z'
                        last_billable_usage_hour: '1998-11-05T15:05:06.325Z'
                        org_billable_usage: -85253140
                        percentage_in_account: 6283084.808157608
                        usage_unit: est ex amet
                      observability_pipeline_sum:
                        account_billable_usage: -25223275
                        elapsed_usage_hours: -41758027
                        first_billable_usage_hour: '2002-01-02T05:52:11.375Z'
                        last_billable_usage_hour: '1945-02-22T12:52:10.489Z'
                        org_billable_usage: -74333775
                        percentage_in_account: 1287036.1146280318
                        usage_unit: Ut sint labore amet
                      online_archive_sum:
                        account_billable_usage: -13424329
                        elapsed_usage_hours: 90372301
                        first_billable_usage_hour: '1982-05-16T18:07:43.509Z'
                        last_billable_usage_hour: '1966-12-11T09:10:42.333Z'
                        org_billable_usage: -9520806
                        percentage_in_account: 99997820.72873363
                        usage_unit: irure velit in
                      prof_container_sum:
                        account_billable_usage: -4564649
                        elapsed_usage_hours: -14567187
                        first_billable_usage_hour: '1976-02-09T07:58:38.149Z'
                        last_billable_usage_hour: '1999-03-21T23:56:35.330Z'
                        org_billable_usage: -7250345
                        percentage_in_account: -32750120.63815637
                        usage_unit: sunt cill
                      prof_host_sum:
                        account_billable_usage: 43842728
                        elapsed_usage_hours: 40169708
                        first_billable_usage_hour: '1966-05-24T00:17:50.606Z'
                        last_billable_usage_hour: '1997-10-13T16:22:37.063Z'
                        org_billable_usage: -59249898
                        percentage_in_account: -7344185.990653917
                        usage_unit: est sit incididunt
                      prof_host_top99p:
                        account_billable_usage: -75132828
                        elapsed_usage_hours: -92905699
                        first_billable_usage_hour: '1945-08-22T07:50:02.833Z'
                        last_billable_usage_hour: '1983-05-12T20:35:44.760Z'
                        org_billable_usage: -44054033
                        percentage_in_account: -69198684.30618146
                        usage_unit: ut pariatur ad
                      rum_lite_sum:
                        account_billable_usage: -60250709
                        elapsed_usage_hours: -7615812
                        first_billable_usage_hour: '2010-09-23T04:01:06.913Z'
                        last_billable_usage_hour: '1951-02-01T19:58:16.735Z'
                        org_billable_usage: -23959693
                        percentage_in_account: -2884996.5969702154
                        usage_unit: qui fugiat
                      rum_replay_sum:
                        account_billable_usage: -41171667
                        elapsed_usage_hours: 43732643
                        first_billable_usage_hour: '1993-10-23T04:27:37.290Z'
                        last_billable_usage_hour: '1985-04-29T05:31:48.411Z'
                        org_billable_usage: -19440363
                        percentage_in_account: -39285531.77552896
                        usage_unit: dolor laborum
                      rum_sum:
                        account_billable_usage: -83925174
                        elapsed_usage_hours: -86114648
                        first_billable_usage_hour: '1975-12-10T02:13:39.259Z'
                        last_billable_usage_hour: '1994-08-30T15:29:20.442Z'
                        org_billable_usage: 26263817
                        percentage_in_account: -84841873.24138878
                        usage_unit: aliquip est culpa
                      rum_units_sum:
                        account_billable_usage: 94488442
                        elapsed_usage_hours: 78255002
                        first_billable_usage_hour: '1993-04-05T13:48:20.889Z'
                        last_billable_usage_hour: '1987-12-27T07:08:47.113Z'
                        org_billable_usage: 16365865
                        percentage_in_account: 34410027.57123566
                        usage_unit: laboris est
                      sensitive_data_scanner_sum:
                        account_billable_usage: 66951790
                        elapsed_usage_hours: -62534044
                        first_billable_usage_hour: '1972-07-29T05:35:09.221Z'
                        last_billable_usage_hour: '2001-07-15T14:41:22.218Z'
                        org_billable_usage: -67085671
                        percentage_in_account: -32175580.39292352
                        usage_unit: adipisicing eiusmod ullamco
                      serverless_apm_sum:
                        account_billable_usage: -14037576
                        elapsed_usage_hours: 89923467
                        first_billable_usage_hour: '2021-03-26T13:26:10.158Z'
                        last_billable_usage_hour: '2020-06-17T11:17:21.422Z'
                        org_billable_usage: -47936066
                        percentage_in_account: -95317104.96220417
                        usage_unit: do
                      serverless_infra_average:
                        account_billable_usage: -3340607
                        elapsed_usage_hours: -42228803
                        first_billable_usage_hour: '1967-03-20T05:33:45.363Z'
                        last_billable_usage_hour: '1959-06-11T06:54:30.396Z'
                        org_billable_usage: -50475879
                        percentage_in_account: -64135565.27616526
                        usage_unit: cillum qui
                      serverless_infra_sum:
                        account_billable_usage: 50525837
                        elapsed_usage_hours: 85748599
                        first_billable_usage_hour: '1995-05-23T04:41:39.555Z'
                        last_billable_usage_hour: '1945-12-06T21:16:13.449Z'
                        org_billable_usage: 81028194
                        percentage_in_account: 74903688.19486487
                        usage_unit: culpa laborum quis non velit
                      serverless_invocation_sum:
                        account_billable_usage: -7751332
                        elapsed_usage_hours: -40514251
                        first_billable_usage_hour: '2009-06-05T08:51:02.416Z'
                        last_billable_usage_hour: '2020-03-04T05:32:52.386Z'
                        org_billable_usage: -49116416
                        percentage_in_account: -4384118.393331125
                        usage_unit: Excepteur laborum commodo ut
                      siem_sum:
                        account_billable_usage: 4460666
                        elapsed_usage_hours: -56021337
                        first_billable_usage_hour: '1987-07-20T17:41:24.309Z'
                        last_billable_usage_hour: '1976-04-24T19:44:06.191Z'
                        org_billable_usage: -85687461
                        percentage_in_account: 27015152.85844414
                        usage_unit: elit
                      standard_timeseries_average:
                        account_billable_usage: -52847347
                        elapsed_usage_hours: 68392878
                        first_billable_usage_hour: '1955-07-11T02:18:48.245Z'
                        last_billable_usage_hour: '1996-07-29T15:31:23.237Z'
                        org_billable_usage: 89369266
                        percentage_in_account: -86812311.53414282
                        usage_unit: labore aute sit
                      synthetics_api_tests_sum:
                        account_billable_usage: 78691577
                        elapsed_usage_hours: -18105067
                        first_billable_usage_hour: '2001-06-18T07:04:43.820Z'
                        last_billable_usage_hour: '1950-05-14T03:47:18.844Z'
                        org_billable_usage: 93761784
                        percentage_in_account: -9059440.663010761
                        usage_unit: laborum et minim
                      synthetics_app_testing_maximum:
                        account_billable_usage: 56785443
                        elapsed_usage_hours: 10276705
                        first_billable_usage_hour: '1957-05-29T22:06:48.056Z'
                        last_billable_usage_hour: '1963-08-11T19:15:25.702Z'
                        org_billable_usage: 69366241
                        percentage_in_account: 75031929.15097448
                        usage_unit: aliquip magna
                      synthetics_browser_checks_sum:
                        account_billable_usage: 94028090
                        elapsed_usage_hours: -94588643
                        first_billable_usage_hour: '1994-02-16T08:43:31.229Z'
                        last_billable_usage_hour: '1997-04-25T15:28:36.569Z'
                        org_billable_usage: -10286694
                        percentage_in_account: -35071041.894098
                        usage_unit: elit sunt
                      timeseries_average:
                        account_billable_usage: 66127701
                        elapsed_usage_hours: 89942819
                        first_billable_usage_hour: '1984-09-28T02:50:29.274Z'
                        last_billable_usage_hour: '1944-05-11T06:14:30.771Z'
                        org_billable_usage: -95031054
                        percentage_in_account: 96856965.19938964
                        usage_unit: quis ullamco sed
                      timeseries_sum:
                        account_billable_usage: -30288680
                        elapsed_usage_hours: -11011906
                        first_billable_usage_hour: '2001-05-25T21:46:08.646Z'
                        last_billable_usage_hour: '2022-04-28T08:31:29.291Z'
                        org_billable_usage: -53324941
                        percentage_in_account: 77950239.54870373
                        usage_unit: dolore veniam in
                  - billing_plan: non cupidatat
                    end_date: '1999-05-20T20:05:31.140Z'
                    num_orgs: 85220907
                    org_name: ut
                    public_id: magna ad ut aliqua
                    ratio_in_month: 70349710.48386255
                    region: consequat cupidatat
                    start_date: '1956-07-23T02:56:17.657Z'
                    usage:
                      apm_fargate_average:
                        account_billable_usage: -61657532
                        elapsed_usage_hours: -25604876
                        first_billable_usage_hour: '2013-06-21T00:54:45.952Z'
                        last_billable_usage_hour: '1960-12-14T20:47:41.761Z'
                        org_billable_usage: -21189619
                        percentage_in_account: -92956929.63648619
                        usage_unit: Lorem elit
                      apm_fargate_sum:
                        account_billable_usage: 64988174
                        elapsed_usage_hours: -61426949
                        first_billable_usage_hour: '1980-03-27T18:09:52.467Z'
                        last_billable_usage_hour: '1996-11-11T18:32:46.774Z'
                        org_billable_usage: 10561739
                        percentage_in_account: -39501647.458865106
                        usage_unit: incididunt nostrud
                      apm_host_sum:
                        account_billable_usage: -18603561
                        elapsed_usage_hours: 81787860
                        first_billable_usage_hour: '1995-08-08T02:58:16.576Z'
                        last_billable_usage_hour: '1972-08-11T01:30:11.556Z'
                        org_billable_usage: 61220439
                        percentage_in_account: 36853727.35784283
                        usage_unit: sunt fugiat ut in
                      apm_host_top99p:
                        account_billable_usage: 96389562
                        elapsed_usage_hours: -2676782
                        first_billable_usage_hour: '1979-05-07T15:15:37.256Z'
                        last_billable_usage_hour: '1992-01-23T04:51:04.613Z'
                        org_billable_usage: -93868762
                        percentage_in_account: -20796018.568884864
                        usage_unit: irure est sit min
                      apm_profiler_host_sum:
                        account_billable_usage: 17725141
                        elapsed_usage_hours: -84851578
                        first_billable_usage_hour: '2006-04-08T14:28:11.056Z'
                        last_billable_usage_hour: '2001-12-29T11:07:22.117Z'
                        org_billable_usage: -7999077
                        percentage_in_account: 21068423.976944566
                        usage_unit: sed incididunt
                      apm_profiler_host_top99p:
                        account_billable_usage: -52106372
                        elapsed_usage_hours: 73591545
                        first_billable_usage_hour: '1955-09-10T13:12:36.662Z'
                        last_billable_usage_hour: '1963-03-05T14:29:23.785Z'
                        org_billable_usage: 92174664
                        percentage_in_account: -36197376.923489965
                        usage_unit: ea
                      apm_trace_search_sum:
                        account_billable_usage: -78519954
                        elapsed_usage_hours: -19056406
                        first_billable_usage_hour: '1998-08-12T16:40:27.324Z'
                        last_billable_usage_hour: '1979-08-16T14:02:17.697Z'
                        org_billable_usage: 37401363
                        percentage_in_account: -30816578.83904168
                        usage_unit: tempor cillum
                      application_security_fargate_average:
                        account_billable_usage: -81273893
                        elapsed_usage_hours: -64867072
                        first_billable_usage_hour: '2014-07-21T01:06:07.785Z'
                        last_billable_usage_hour: '2015-11-30T06:11:34.890Z'
                        org_billable_usage: -4229849
                        percentage_in_account: -88591875.62165274
                        usage_unit: quis ad ex
                      application_security_host_sum:
                        account_billable_usage: -25750267
                        elapsed_usage_hours: -26239851
                        first_billable_usage_hour: '1988-10-13T08:20:03.368Z'
                        last_billable_usage_hour: '1998-05-29T09:08:30.780Z'
                        org_billable_usage: 76854705
                        percentage_in_account: -65560981.6677484
                        usage_unit: Lorem ut laboris occaecat ullamco
                      application_security_host_top99:
                        account_billable_usage: 54724144
                        elapsed_usage_hours: 91658883
                        first_billable_usage_hour: '1944-07-15T12:45:05.257Z'
                        last_billable_usage_hour: '2018-10-21T17:54:34.182Z'
                        org_billable_usage: 8300708
                        percentage_in_account: 43440654.476928085
                        usage_unit: voluptate qui pariatur quis
                      ci_pipeline_indexed_spans_sum:
                        account_billable_usage: -30663265
                        elapsed_usage_hours: -56316358
                        first_billable_usage_hour: '1973-06-25T01:21:36.613Z'
                        last_billable_usage_hour: '1975-07-19T02:43:09.090Z'
                        org_billable_usage: 62538624
                        percentage_in_account: 99451341.1750356
                        usage_unit: nulla ut
                      ci_pipeline_maximum:
                        account_billable_usage: -28460540
                        elapsed_usage_hours: -76874673
                        first_billable_usage_hour: '2020-01-10T13:43:36.682Z'
                        last_billable_usage_hour: '2007-01-02T05:10:16.230Z'
                        org_billable_usage: 91893298
                        percentage_in_account: -12276009.140867084
                        usage_unit: aute
                      ci_pipeline_sum:
                        account_billable_usage: 52530428
                        elapsed_usage_hours: -95578462
                        first_billable_usage_hour: '1948-03-22T20:41:39.526Z'
                        last_billable_usage_hour: '1957-04-16T09:15:21.947Z'
                        org_billable_usage: -95033705
                        percentage_in_account: -62925657.03919699
                        usage_unit: nostrud sed enim ea non
                      ci_test_indexed_spans_sum:
                        account_billable_usage: -95075850
                        elapsed_usage_hours: -13512307
                        first_billable_usage_hour: '1946-12-30T02:32:14.019Z'
                        last_billable_usage_hour: '1970-04-01T20:18:26.882Z'
                        org_billable_usage: -90988953
                        percentage_in_account: 7367525.23230733
                        usage_unit: proident minim anim
                      ci_testing_maximum:
                        account_billable_usage: -6018662
                        elapsed_usage_hours: -29689829
                        first_billable_usage_hour: '2000-07-28T00:59:29.601Z'
                        last_billable_usage_hour: '1945-07-14T13:25:39.959Z'
                        org_billable_usage: 75874976
                        percentage_in_account: -45708707.27084695
                        usage_unit: proident Excepteur nostrud pariatur
                      ci_testing_sum:
                        account_billable_usage: 41593337
                        elapsed_usage_hours: -91667200
                        first_billable_usage_hour: '1969-01-09T09:40:34.389Z'
                        last_billable_usage_hour: '2001-09-14T04:48:14.427Z'
                        org_billable_usage: 4462538
                        percentage_in_account: 25819279.92534055
                        usage_unit: sint est in
                      cloud_cost_management_average:
                        account_billable_usage: -33297059
                        elapsed_usage_hours: -31099793
                        first_billable_usage_hour: '2009-07-30T22:02:53.006Z'
                        last_billable_usage_hour: '2002-04-25T00:55:27.712Z'
                        org_billable_usage: -30871298
                        percentage_in_account: 44052276.64992455
                        usage_unit: et anim aliqua in
                      cloud_cost_management_sum:
                        account_billable_usage: -5713312
                        elapsed_usage_hours: 27741669
                        first_billable_usage_hour: '1968-12-04T03:32:10.104Z'
                        last_billable_usage_hour: '1958-09-28T17:28:28.722Z'
                        org_billable_usage: -24778543
                        percentage_in_account: 18496627.628438264
                        usage_unit: est adipisicing voluptate occaecat
                      cspm_container_sum:
                        account_billable_usage: -20347503
                        elapsed_usage_hours: 94764719
                        first_billable_usage_hour: '1999-05-29T09:09:55.195Z'
                        last_billable_usage_hour: '2002-11-28T01:09:24.634Z'
                        org_billable_usage: 75993366
                        percentage_in_account: -88916418.5905055
                        usage_unit: laboris
                      cspm_host_sum:
                        account_billable_usage: -57780096
                        elapsed_usage_hours: 47653879
                        first_billable_usage_hour: '1953-12-12T05:46:27.597Z'
                        last_billable_usage_hour: '1981-08-01T20:47:55.535Z'
                        org_billable_usage: -65615457
                        percentage_in_account: 59258421.85209662
                        usage_unit: nulla minim ullamco
                      cspm_host_top99p:
                        account_billable_usage: -57113678
                        elapsed_usage_hours: -725890
                        first_billable_usage_hour: '1946-10-26T09:39:09.484Z'
                        last_billable_usage_hour: '1958-11-10T07:31:10.972Z'
                        org_billable_usage: -59472581
                        percentage_in_account: 51790924.46797401
                        usage_unit: amet in
                      custom_event_sum:
                        account_billable_usage: -85438382
                        elapsed_usage_hours: -97503642
                        first_billable_usage_hour: '1996-02-12T13:07:16.206Z'
                        last_billable_usage_hour: '1950-05-24T06:15:21.262Z'
                        org_billable_usage: 56640260
                        percentage_in_account: 21098867.194172665
                        usage_unit: ex quis Lo
                      cws_container_sum:
                        account_billable_usage: 25492155
                        elapsed_usage_hours: 69256339
                        first_billable_usage_hour: '1950-03-16T00:00:52.469Z'
                        last_billable_usage_hour: '2001-04-20T06:22:16.740Z'
                        org_billable_usage: -56247397
                        percentage_in_account: 99700130.0064907
                        usage_unit: ipsum eiusmod sunt aliquip
                      cws_host_sum:
                        account_billable_usage: 57491269
                        elapsed_usage_hours: 19931989
                        first_billable_usage_hour: '1946-06-25T20:03:11.019Z'
                        last_billable_usage_hour: '1956-04-03T22:10:30.885Z'
                        org_billable_usage: -60582466
                        percentage_in_account: -29449659.449243233
                        usage_unit: aliquip sed enim irure
                      cws_host_top99p:
                        account_billable_usage: -79084844
                        elapsed_usage_hours: 58604346
                        first_billable_usage_hour: '2015-09-02T23:54:07.909Z'
                        last_billable_usage_hour: '1958-03-21T23:26:00.193Z'
                        org_billable_usage: 97485360
                        percentage_in_account: -18272334.230331257
                        usage_unit: adipisicing
                      dbm_host_sum:
                        account_billable_usage: -42972038
                        elapsed_usage_hours: -5582309
                        first_billable_usage_hour: '1977-03-04T06:25:55.479Z'
                        last_billable_usage_hour: '2005-10-29T10:20:57.057Z'
                        org_billable_usage: -96235003
                        percentage_in_account: -40515699.77210967
                        usage_unit: dolore sint consectetur
                      dbm_host_top99p:
                        account_billable_usage: -91545568
                        elapsed_usage_hours: -30058702
                        first_billable_usage_hour: '1997-05-04T17:14:11.192Z'
                        last_billable_usage_hour: '2008-03-08T07:19:50.669Z'
                        org_billable_usage: 61276767
                        percentage_in_account: 15808222.117605329
                        usage_unit: adipisicing eiusmod
                      dbm_normalized_queries_average:
                        account_billable_usage: -46898059
                        elapsed_usage_hours: 25849366
                        first_billable_usage_hour: '1945-08-21T09:24:31.583Z'
                        last_billable_usage_hour: '2010-05-12T12:34:22.651Z'
                        org_billable_usage: 93991280
                        percentage_in_account: 18059301.011284605
                        usage_unit: qui velit cil
                      dbm_normalized_queries_sum:
                        account_billable_usage: 24594112
                        elapsed_usage_hours: 50202294
                        first_billable_usage_hour: '2004-08-13T15:53:46.688Z'
                        last_billable_usage_hour: '1983-03-01T20:08:05.900Z'
                        org_billable_usage: -79096261
                        percentage_in_account: -20726132.894592106
                        usage_unit: officia esse velit pariatur
                      fargate_container_apm_and_profiler_average:
                        account_billable_usage: 90046814
                        elapsed_usage_hours: 4145710
                        first_billable_usage_hour: '1968-01-12T03:35:54.618Z'
                        last_billable_usage_hour: '1986-07-16T04:51:18.907Z'
                        org_billable_usage: 97736956
                        percentage_in_account: 80767235.90158755
                        usage_unit: sed est sit ex
                      fargate_container_apm_and_profiler_sum:
                        account_billable_usage: 862868
                        elapsed_usage_hours: 32712979
                        first_billable_usage_hour: '2016-09-23T17:30:53.587Z'
                        last_billable_usage_hour: '1972-06-09T13:56:53.351Z'
                        org_billable_usage: -1727734
                        percentage_in_account: 17925367.487828404
                        usage_unit: culpa aute non consectetur laborum
                      fargate_container_average:
                        account_billable_usage: -41521143
                        elapsed_usage_hours: 95441772
                        first_billable_usage_hour: '1967-04-15T18:40:47.598Z'
                        last_billable_usage_hour: '2012-06-21T02:42:17.047Z'
                        org_billable_usage: -12940049
                        percentage_in_account: -52782998.101602145
                        usage_unit: 'dolore '
                      fargate_container_profiler_average:
                        account_billable_usage: 23752212
                        elapsed_usage_hours: 41422853
                        first_billable_usage_hour: '1956-07-03T10:51:01.997Z'
                        last_billable_usage_hour: '1997-03-26T18:55:57.356Z'
                        org_billable_usage: 12593267
                        percentage_in_account: -42764834.19467772
                        usage_unit: sit tempor ea
                      fargate_container_profiler_sum:
                        account_billable_usage: 50147992
                        elapsed_usage_hours: 54372715
                        first_billable_usage_hour: '1967-08-14T22:12:58.026Z'
                        last_billable_usage_hour: '1991-11-15T21:06:33.981Z'
                        org_billable_usage: -21572738
                        percentage_in_account: -59304317.64709132
                        usage_unit: adipisicing anim in ut dolor
                      fargate_container_sum:
                        account_billable_usage: -37153527
                        elapsed_usage_hours: -88468811
                        first_billable_usage_hour: '1952-07-05T05:29:10.440Z'
                        last_billable_usage_hour: '1967-01-02T13:26:26.176Z'
                        org_billable_usage: 52793022
                        percentage_in_account: 21246325.556273147
                        usage_unit: nulla
                      incident_management_maximum:
                        account_billable_usage: -10265217
                        elapsed_usage_hours: 45389673
                        first_billable_usage_hour: '1960-11-22T13:43:45.470Z'
                        last_billable_usage_hour: '1963-09-13T10:58:57.872Z'
                        org_billable_usage: -76745673
                        percentage_in_account: -71764046.37081224
                        usage_unit: do ipsum in quis
                      incident_management_sum:
                        account_billable_usage: -18309163
                        elapsed_usage_hours: 32470644
                        first_billable_usage_hour: '1948-08-25T14:48:15.051Z'
                        last_billable_usage_hour: '2020-07-27T13:59:21.959Z'
                        org_billable_usage: -98113067
                        percentage_in_account: 93246940.74949104
                        usage_unit: qui fugiat est
                      infra_and_apm_host_sum:
                        account_billable_usage: 51888332
                        elapsed_usage_hours: -65579410
                        first_billable_usage_hour: '2003-07-05T04:26:31.955Z'
                        last_billable_usage_hour: '1973-01-30T15:42:20.859Z'
                        org_billable_usage: -71277031
                        percentage_in_account: -11460670.492808193
                        usage_unit: magna exercitation occaecat in fugiat
                      infra_and_apm_host_top99p:
                        account_billable_usage: 63860692
                        elapsed_usage_hours: -19722775
                        first_billable_usage_hour: '1965-09-15T01:43:41.880Z'
                        last_billable_usage_hour: '1984-08-20T12:28:06.073Z'
                        org_billable_usage: 24697056
                        percentage_in_account: 49656166.7380524
                        usage_unit: qui Excepteur
                      infra_container_sum:
                        account_billable_usage: 18196172
                        elapsed_usage_hours: -42418324
                        first_billable_usage_hour: '1949-01-04T12:04:34.905Z'
                        last_billable_usage_hour: '1981-02-16T18:46:59.080Z'
                        org_billable_usage: 71591584
                        percentage_in_account: -79159054.97183871
                        usage_unit: elit consectetur eu dolor
                      infra_host_sum:
                        account_billable_usage: -47598096
                        elapsed_usage_hours: 1839295
                        first_billable_usage_hour: '1992-06-09T15:57:00.323Z'
                        last_billable_usage_hour: '1983-03-23T07:21:28.759Z'
                        org_billable_usage: -86718576
                        percentage_in_account: 41042246.45830515
                        usage_unit: eu dolor minim
                      infra_host_top99p:
                        account_billable_usage: 13162545
                        elapsed_usage_hours: -98944582
                        first_billable_usage_hour: '1965-04-09T15:19:58.977Z'
                        last_billable_usage_hour: '2008-09-28T16:40:43.994Z'
                        org_billable_usage: -60069055
                        percentage_in_account: -99836222.27571973
                        usage_unit: quis tempor consequat non
                      ingested_spans_sum:
                        account_billable_usage: 83043894
                        elapsed_usage_hours: -22916486
                        first_billable_usage_hour: '2019-07-03T01:46:02.971Z'
                        last_billable_usage_hour: '1945-06-02T00:03:57.794Z'
                        org_billable_usage: 56564421
                        percentage_in_account: -81494268.17090753
                        usage_unit: labore ut amet minim
                      ingested_timeseries_average:
                        account_billable_usage: 41126487
                        elapsed_usage_hours: -3792742
                        first_billable_usage_hour: '1977-04-14T15:25:42.525Z'
                        last_billable_usage_hour: '1950-09-04T16:43:41.714Z'
                        org_billable_usage: 47109588
                        percentage_in_account: 87619161.53683668
                        usage_unit: cupidatat laborum
                      ingested_timeseries_sum:
                        account_billable_usage: -1333992
                        elapsed_usage_hours: -42085900
                        first_billable_usage_hour: '1996-09-02T16:12:20.465Z'
                        last_billable_usage_hour: '1986-07-27T13:11:55.252Z'
                        org_billable_usage: -97185358
                        percentage_in_account: 50462073.88403642
                        usage_unit: enim est a
                      iot_sum:
                        account_billable_usage: -14888005
                        elapsed_usage_hours: -77827497
                        first_billable_usage_hour: '1966-08-30T05:12:38.825Z'
                        last_billable_usage_hour: '1944-07-03T23:31:28.468Z'
                        org_billable_usage: -35211166
                        percentage_in_account: 47449467.21532282
                        usage_unit: est
                      iot_top99p:
                        account_billable_usage: 83249116
                        elapsed_usage_hours: -48160784
                        first_billable_usage_hour: '2011-07-03T09:03:45.462Z'
                        last_billable_usage_hour: '1983-06-04T13:25:38.682Z'
                        org_billable_usage: 70329987
                        percentage_in_account: -64008485.68500077
                        usage_unit: est nisi
                      lambda_function_average:
                        account_billable_usage: -96236406
                        elapsed_usage_hours: 42093961
                        first_billable_usage_hour: '1986-09-05T18:14:27.606Z'
                        last_billable_usage_hour: '1990-12-22T02:26:52.013Z'
                        org_billable_usage: 60143653
                        percentage_in_account: 19102769.76417151
                        usage_unit: aute tempor fugiat
                      lambda_function_sum:
                        account_billable_usage: 24038328
                        elapsed_usage_hours: -18462246
                        first_billable_usage_hour: '2004-10-04T12:44:23.520Z'
                        last_billable_usage_hour: '1981-01-19T01:01:53.669Z'
                        org_billable_usage: -80880802
                        percentage_in_account: 48747320.059122026
                        usage_unit: ullamco aliquip Ut
                      logs_forwarding_sum:
                        account_billable_usage: -27032433
                        elapsed_usage_hours: -40342216
                        first_billable_usage_hour: '1943-12-27T22:42:10.300Z'
                        last_billable_usage_hour: '1968-08-17T16:16:51.192Z'
                        org_billable_usage: -16994725
                        percentage_in_account: -83052839.5711927
                        usage_unit: elit quis proident exercitation
                      logs_indexed_15day_sum:
                        account_billable_usage: -53927292
                        elapsed_usage_hours: 54889899
                        first_billable_usage_hour: '1976-03-20T22:40:03.297Z'
                        last_billable_usage_hour: '1946-04-28T10:23:28.683Z'
                        org_billable_usage: 4161116
                        percentage_in_account: 56189174.634720415
                        usage_unit: Excepteur
                      logs_indexed_180day_sum:
                        account_billable_usage: -64223848
                        elapsed_usage_hours: 76875559
                        first_billable_usage_hour: '1957-07-14T22:39:40.640Z'
                        last_billable_usage_hour: '2013-07-09T01:35:29.268Z'
                        org_billable_usage: 10240311
                        percentage_in_account: -91103629.83591758
                        usage_unit: exercitation adipisicing enim reprehenderit
                      logs_indexed_30day_sum:
                        account_billable_usage: -22920325
                        elapsed_usage_hours: 25959387
                        first_billable_usage_hour: '2017-01-05T11:01:36.199Z'
                        last_billable_usage_hour: '1996-05-21T06:02:46.308Z'
                        org_billable_usage: -1595733
                        percentage_in_account: -44322121.39216496
                        usage_unit: laboris ullamco
                      logs_indexed_360day_sum:
                        account_billable_usage: -22635144
                        elapsed_usage_hours: -97027142
                        first_billable_usage_hour: '1952-01-15T09:49:38.785Z'
                        last_billable_usage_hour: '2001-10-12T18:54:34.353Z'
                        org_billable_usage: -44186328
                        percentage_in_account: -78649194.45645477
                        usage_unit: sed consequat ipsum l
                      logs_indexed_3day_sum:
                        account_billable_usage: 72746316
                        elapsed_usage_hours: 44993682
                        first_billable_usage_hour: '1946-01-17T11:08:09.410Z'
                        last_billable_usage_hour: '1999-03-24T14:21:19.540Z'
                        org_billable_usage: 21770919
                        percentage_in_account: -43842967.473951824
                        usage_unit: quis ipsum elit mollit
                      logs_indexed_45day_sum:
                        account_billable_usage: -63466385
                        elapsed_usage_hours: -49568844
                        first_billable_usage_hour: '2016-02-12T10:43:42.255Z'
                        last_billable_usage_hour: '2003-07-27T00:52:55.997Z'
                        org_billable_usage: 73578303
                        percentage_in_account: -85605114.46146153
                        usage_unit: aliqua est
                      logs_indexed_60day_sum:
                        account_billable_usage: -96821666
                        elapsed_usage_hours: 30967681
                        first_billable_usage_hour: '1985-01-22T12:28:18.332Z'
                        last_billable_usage_hour: '2016-07-05T20:10:04.663Z'
                        org_billable_usage: 40739729
                        percentage_in_account: -43893416.34375028
                        usage_unit: eu velit veniam sed
                      logs_indexed_7day_sum:
                        account_billable_usage: -9053253
                        elapsed_usage_hours: -7870907
                        first_billable_usage_hour: '1997-05-30T17:56:52.773Z'
                        last_billable_usage_hour: '2001-04-18T02:02:58.605Z'
                        org_billable_usage: -55896620
                        percentage_in_account: 26618738.176800296
                        usage_unit: minim Ut
                      logs_indexed_90day_sum:
                        account_billable_usage: 76671086
                        elapsed_usage_hours: -32042056
                        first_billable_usage_hour: '1969-08-06T17:51:30.363Z'
                        last_billable_usage_hour: '1983-12-02T14:50:48.269Z'
                        org_billable_usage: -86694635
                        percentage_in_account: 34641800.127536505
                        usage_unit: tempor commodo
                      logs_indexed_custom_retention_sum:
                        account_billable_usage: 16711428
                        elapsed_usage_hours: -81323001
                        first_billable_usage_hour: '1955-11-15T10:22:22.064Z'
                        last_billable_usage_hour: '1968-07-30T16:05:24.886Z'
                        org_billable_usage: -2729574
                        percentage_in_account: 48382513.94740468
                        usage_unit: minim aliqua dolore laborum qui
                      logs_indexed_sum:
                        account_billable_usage: 30389147
                        elapsed_usage_hours: 61408686
                        first_billable_usage_hour: '2018-08-08T11:45:40.749Z'
                        last_billable_usage_hour: '1978-02-09T05:28:16.858Z'
                        org_billable_usage: -69198026
                        percentage_in_account: 1310987.9046483636
                        usage_unit: in adipisicing irure
                      logs_ingested_sum:
                        account_billable_usage: -26535659
                        elapsed_usage_hours: 91793602
                        first_billable_usage_hour: '1949-04-30T17:47:48.906Z'
                        last_billable_usage_hour: '1952-01-13T14:01:24.587Z'
                        org_billable_usage: -65330170
                        percentage_in_account: 87690023.81649607
                        usage_unit: velit laboris est
                      network_device_sum:
                        account_billable_usage: -73973327
                        elapsed_usage_hours: -4978188
                        first_billable_usage_hour: '1950-02-07T20:42:45.194Z'
                        last_billable_usage_hour: '1956-03-27T19:17:25.914Z'
                        org_billable_usage: 94914817
                        percentage_in_account: 286169.02025558054
                        usage_unit: qui Lorem in ea
                      network_device_top99p:
                        account_billable_usage: -89839024
                        elapsed_usage_hours: -50488886
                        first_billable_usage_hour: '1973-02-04T22:34:32.421Z'
                        last_billable_usage_hour: '2011-03-18T21:34:12.403Z'
                        org_billable_usage: -65251020
                        percentage_in_account: 71912661.50653642
                        usage_unit: aliqua officia
                      npm_flow_sum:
                        account_billable_usage: 52809915
                        elapsed_usage_hours: 8501377
                        first_billable_usage_hour: '1957-04-12T05:22:41.805Z'
                        last_billable_usage_hour: '1954-05-19T11:31:44.416Z'
                        org_billable_usage: -70560376
                        percentage_in_account: 74685837.09418657
                        usage_unit: anim
                      npm_host_sum:
                        account_billable_usage: -99819546
                        elapsed_usage_hours: 63433403
                        first_billable_usage_hour: '1980-05-11T13:02:48.868Z'
                        last_billable_usage_hour: '1954-05-31T09:13:24.667Z'
                        org_billable_usage: 54176994
                        percentage_in_account: -54684318.09266705
                        usage_unit: occaecat dolor sunt quis
                      npm_host_top99p:
                        account_billable_usage: 7197736
                        elapsed_usage_hours: -8221897
                        first_billable_usage_hour: '1960-02-23T09:25:58.923Z'
                        last_billable_usage_hour: '1949-06-27T09:06:57.332Z'
                        org_billable_usage: -78924642
                        percentage_in_account: 64637433.65174356
                        usage_unit: sint ex consectetur
                      observability_pipeline_sum:
                        account_billable_usage: -9183100
                        elapsed_usage_hours: 11348220
                        first_billable_usage_hour: '1946-04-25T08:17:47.619Z'
                        last_billable_usage_hour: '2008-02-15T01:26:49.267Z'
                        org_billable_usage: -24328290
                        percentage_in_account: 60057770.477677196
                        usage_unit: aliqua Excepteur dolor mollit
                      online_archive_sum:
                        account_billable_usage: -76937009
                        elapsed_usage_hours: 52113760
                        first_billable_usage_hour: '2021-02-22T02:50:12.426Z'
                        last_billable_usage_hour: '1979-09-08T17:21:11.590Z'
                        org_billable_usage: -87113523
                        percentage_in_account: 83068570.6639244
                        usage_unit: eiusmod Excepteur veniam ut
                      prof_container_sum:
                        account_billable_usage: -94293358
                        elapsed_usage_hours: 57936635
                        first_billable_usage_hour: '1945-08-14T12:38:45.834Z'
                        last_billable_usage_hour: '2022-08-27T20:24:36.652Z'
                        org_billable_usage: 43700797
                        percentage_in_account: 94739848.72071508
                        usage_unit: eiusmod eu exercitation minim
                      prof_host_sum:
                        account_billable_usage: -50554235
                        elapsed_usage_hours: 74983184
                        first_billable_usage_hour: '2016-10-03T23:13:27.710Z'
                        last_billable_usage_hour: '1960-05-08T08:22:16.436Z'
                        org_billable_usage: 68616577
                        percentage_in_account: 48085757.27621195
                        usage_unit: deserunt amet minim
                      prof_host_top99p:
                        account_billable_usage: -59073059
                        elapsed_usage_hours: -58032375
                        first_billable_usage_hour: '1955-03-13T09:17:14.318Z'
                        last_billable_usage_hour: '1982-06-06T15:19:02.892Z'
                        org_billable_usage: -91250115
                        percentage_in_account: 77262043.4538438
                        usage_unit: laborum qui sit
                      rum_lite_sum:
                        account_billable_usage: 33448311
                        elapsed_usage_hours: 26738669
                        first_billable_usage_hour: '1995-10-26T00:35:54.565Z'
                        last_billable_usage_hour: '1977-01-17T03:08:58.301Z'
                        org_billable_usage: -72604785
                        percentage_in_account: 34551858.77745834
                        usage_unit: est fugiat enim qui labore
                      rum_replay_sum:
                        account_billable_usage: 75219282
                        elapsed_usage_hours: -49186535
                        first_billable_usage_hour: '1956-05-04T21:47:26.763Z'
                        last_billable_usage_hour: '1996-06-06T13:23:38.597Z'
                        org_billable_usage: 78377084
                        percentage_in_account: 15228890.679534286
                        usage_unit: dolore voluptate
                      rum_sum:
                        account_billable_usage: -82020513
                        elapsed_usage_hours: -44219971
                        first_billable_usage_hour: '2008-06-20T02:15:47.455Z'
                        last_billable_usage_hour: '1968-10-29T22:18:52.470Z'
                        org_billable_usage: -40898100
                        percentage_in_account: 56036715.77725139
                        usage_unit: Excepteur velit nulla Lorem
                      rum_units_sum:
                        account_billable_usage: -56347216
                        elapsed_usage_hours: -37711511
                        first_billable_usage_hour: '2007-12-30T03:55:24.373Z'
                        last_billable_usage_hour: '1963-08-30T18:24:03.891Z'
                        org_billable_usage: -87966257
                        percentage_in_account: -41758598.50935826
                        usage_unit: Duis cillum commodo ea
                      sensitive_data_scanner_sum:
                        account_billable_usage: -50019027
                        elapsed_usage_hours: -15006377
                        first_billable_usage_hour: '1968-07-07T03:28:28.763Z'
                        last_billable_usage_hour: '2014-09-29T00:48:22.188Z'
                        org_billable_usage: 26322244
                        percentage_in_account: 42134625.056316376
                        usage_unit: eiusmod tempor fugiat do
                      serverless_apm_sum:
                        account_billable_usage: 26520055
                        elapsed_usage_hours: 14577463
                        first_billable_usage_hour: '1954-10-13T03:30:55.696Z'
                        last_billable_usage_hour: '1966-01-03T02:15:10.699Z'
                        org_billable_usage: -83284700
                        percentage_in_account: 48670396.90912366
                        usage_unit: consectetur
                      serverless_infra_average:
                        account_billable_usage: 2525928
                        elapsed_usage_hours: -77645482
                        first_billable_usage_hour: '1993-05-15T10:49:09.977Z'
                        last_billable_usage_hour: '1996-12-15T02:43:40.590Z'
                        org_billable_usage: 17394387
                        percentage_in_account: 29243915.469723403
                        usage_unit: dolor ut cupidatat qui
                      serverless_infra_sum:
                        account_billable_usage: -25141947
                        elapsed_usage_hours: 32732215
                        first_billable_usage_hour: '1973-04-29T22:58:37.504Z'
                        last_billable_usage_hour: '1985-07-18T06:15:37.440Z'
                        org_billable_usage: 88633591
                        percentage_in_account: -46138408.4584263
                        usage_unit: officia ullamco est enim
                      serverless_invocation_sum:
                        account_billable_usage: -49719563
                        elapsed_usage_hours: 30677247
                        first_billable_usage_hour: '1943-08-27T18:26:50.876Z'
                        last_billable_usage_hour: '1946-11-24T18:32:28.733Z'
                        org_billable_usage: 71246183
                        percentage_in_account: -86973340.87403648
                        usage_unit: adipisicing tempor reprehenderit
                      siem_sum:
                        account_billable_usage: 73615260
                        elapsed_usage_hours: 20981034
                        first_billable_usage_hour: '1970-12-20T11:04:18.625Z'
                        last_billable_usage_hour: '1948-04-30T11:32:23.515Z'
                        org_billable_usage: -95717676
                        percentage_in_account: 59168904.51224893
                        usage_unit: minim magna
                      standard_timeseries_average:
                        account_billable_usage: 39877183
                        elapsed_usage_hours: 14785481
                        first_billable_usage_hour: '2015-05-16T23:16:15.806Z'
                        last_billable_usage_hour: '1962-12-22T17:14:55.729Z'
                        org_billable_usage: 61955756
                        percentage_in_account: -62160264.77894134
                        usage_unit: 'dolore tempor '
                      synthetics_api_tests_sum:
                        account_billable_usage: 39958821
                        elapsed_usage_hours: 20216705
                        first_billable_usage_hour: '1982-01-05T23:15:16.948Z'
                        last_billable_usage_hour: '1979-01-06T18:57:53.653Z'
                        org_billable_usage: 71233436
                        percentage_in_account: 94899049.61470881
                        usage_unit: velit
                      synthetics_app_testing_maximum:
                        account_billable_usage: 90437028
                        elapsed_usage_hours: 16183100
                        first_billable_usage_hour: '2016-12-20T01:21:10.508Z'
                        last_billable_usage_hour: '1954-06-08T10:54:28.624Z'
                        org_billable_usage: -74830339
                        percentage_in_account: -47256723.37115872
                        usage_unit: velit ut et deserunt
                      synthetics_browser_checks_sum:
                        account_billable_usage: 96961502
                        elapsed_usage_hours: -2756461
                        first_billable_usage_hour: '1977-08-08T08:36:16.309Z'
                        last_billable_usage_hour: '2021-12-18T06:16:41.389Z'
                        org_billable_usage: 1591667
                        percentage_in_account: -86421327.72635569
                        usage_unit: et non
                      timeseries_average:
                        account_billable_usage: -8336313
                        elapsed_usage_hours: 97707414
                        first_billable_usage_hour: '2013-05-27T10:52:38.240Z'
                        last_billable_usage_hour: '1964-07-15T13:39:47.870Z'
                        org_billable_usage: -94889227
                        percentage_in_account: -39728732.63786929
                        usage_unit: nostrud culpa ullamco
                      timeseries_sum:
                        account_billable_usage: 54661811
                        elapsed_usage_hours: -91212650
                        first_billable_usage_hour: '2015-04-15T05:18:13.251Z'
                        last_billable_usage_hour: '1964-07-31T21:55:38.848Z'
                        org_billable_usage: -34346789
                        percentage_in_account: 84760031.95829463
                        usage_unit: Duis id elit
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/usage/ci-app:
    get:
      tags:
        - Usage Metering
      summary: Get hourly usage for CI visibility
      description: >-
        Get hourly usage for CI visibility (tests, pipeline, and spans).

        **Note:** hourly usage data for all products is now available in the
        [Get hourly usage by product family
        API](https://docs.datadoghq.com/api/latest/usage-metering/#get-hourly-usage-by-product-family).
        Refer to [Migrating from the V1 Hourly Usage APIs to
        V2](https://docs.datadoghq.com/account_management/guide/hourly-usage-migration/)
        for the associated migration guide.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json;datetime-format=rfc3339
        - name: start_hr
          in: query
          schema:
            type: string
          description: >-
            (Required) Datetime in ISO-8601 format, UTC, precise to hour:
            `[YYYY-MM-DDThh]` for usage beginning at this hour.
          example: '1971-02-27T12:47:34.135Z'
        - name: end_hr
          in: query
          schema:
            type: string
          description: >-
            Datetime in ISO-8601 format, UTC, precise to hour: `[YYYY-MM-DDThh]`
            for usage ending

            **before** this hour.
          example: '1971-02-27T12:47:34.135Z'
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                usage:
                  - ci_pipeline_indexed_spans: -20993464
                    ci_test_indexed_spans: -6916227
                    ci_visibility_pipeline_committers: 51003712
                    ci_visibility_test_committers: 14053918
                    org_name: Excepteur deserunt tempor Duis
                    public_id: voluptate labore occaecat
                  - ci_pipeline_indexed_spans: -3726424
                    ci_test_indexed_spans: -52200482
                    ci_visibility_pipeline_committers: 98667186
                    ci_visibility_test_committers: -83463895
                    org_name: dolore occaec
                    public_id: sunt ipsum fugiat deserunt
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/usage/cspm:
    get:
      tags:
        - Usage Metering
      summary: Get hourly usage for CSPM
      description: >-
        Get hourly usage for cloud security posture management (CSPM).

        **Note:** hourly usage data for all products is now available in the
        [Get hourly usage by product family
        API](https://docs.datadoghq.com/api/latest/usage-metering/#get-hourly-usage-by-product-family).
        Refer to [Migrating from the V1 Hourly Usage APIs to
        V2](https://docs.datadoghq.com/account_management/guide/hourly-usage-migration/)
        for the associated migration guide.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json;datetime-format=rfc3339
        - name: start_hr
          in: query
          schema:
            type: string
          description: >-
            (Required) Datetime in ISO-8601 format, UTC, precise to hour:
            `[YYYY-MM-DDThh]` for usage beginning at this hour.
          example: '1971-02-27T12:47:34.135Z'
        - name: end_hr
          in: query
          schema:
            type: string
          description: >-
            Datetime in ISO-8601 format, UTC, precise to hour: `[YYYY-MM-DDThh]`
            for usage ending

            **before** this hour.
          example: '1971-02-27T12:47:34.135Z'
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                usage:
                  - aas_host_count: 97034570.47989866
                    aws_host_count: 42719905.61254576
                    azure_host_count: -89362530.20265603
                    compliance_host_count: -34963380.966084756
                    container_count: -79525628.93757036
                    gcp_host_count: -54463877.41666783
                    host_count: -38872281.737352975
                    hour: '1995-08-18T21:08:29.931Z'
                    org_name: voluptate nul
                    public_id: aliqua
                  - aas_host_count: -30597470.44477947
                    aws_host_count: 1266635.9985058904
                    azure_host_count: 30944082.662784606
                    compliance_host_count: 78239342.38734108
                    container_count: -32125941.678278685
                    gcp_host_count: -45747204.541247874
                    host_count: 91743550.12410876
                    hour: '1969-05-10T01:47:00.482Z'
                    org_name: occaecat
                    public_id: amet exercitation laboris minim
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/usage/cws:
    get:
      tags:
        - Usage Metering
      summary: Get hourly usage for cloud workload security
      description: >-
        Get hourly usage for cloud workload security.

        **Note:** hourly usage data for all products is now available in the
        [Get hourly usage by product family
        API](https://docs.datadoghq.com/api/latest/usage-metering/#get-hourly-usage-by-product-family).
        Refer to [Migrating from the V1 Hourly Usage APIs to
        V2](https://docs.datadoghq.com/account_management/guide/hourly-usage-migration/)
        for the associated migration guide.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json;datetime-format=rfc3339
        - name: start_hr
          in: query
          schema:
            type: string
          description: >-
            (Required) Datetime in ISO-8601 format, UTC, precise to hour:
            `[YYYY-MM-DDThh]` for usage beginning at this hour.
          example: '1971-02-27T12:47:34.135Z'
        - name: end_hr
          in: query
          schema:
            type: string
          description: >-
            Datetime in ISO-8601 format, UTC, precise to hour: `[YYYY-MM-DDThh]`
            for usage ending

            **before** this hour.
          example: '1971-02-27T12:47:34.135Z'
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                usage:
                  - cws_container_count: 97938405
                    cws_host_count: -31898837
                    hour: '1985-10-12T20:18:40.874Z'
                    org_name: eu laboris cillum sunt
                    public_id: qui anim nisi dolor minim
                  - cws_container_count: -60871706
                    cws_host_count: 1730178
                    hour: '2005-12-01T09:48:58.773Z'
                    org_name: cupidatat culpa qui
                    public_id: ut mollit reprehenderit ea
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/usage/dbm:
    get:
      tags:
        - Usage Metering
      summary: Get hourly usage for database monitoring
      description: >-
        Get hourly usage for database monitoring

        **Note:** hourly usage data for all products is now available in the
        [Get hourly usage by product family
        API](https://docs.datadoghq.com/api/latest/usage-metering/#get-hourly-usage-by-product-family).
        Refer to [Migrating from the V1 Hourly Usage APIs to
        V2](https://docs.datadoghq.com/account_management/guide/hourly-usage-migration/)
        for the associated migration guide.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json;datetime-format=rfc3339
        - name: start_hr
          in: query
          schema:
            type: string
          description: >-
            (Required) Datetime in ISO-8601 format, UTC, precise to hour:
            `[YYYY-MM-DDThh]` for usage beginning at this hour.
          example: '1971-02-27T12:47:34.135Z'
        - name: end_hr
          in: query
          schema:
            type: string
          description: >-
            Datetime in ISO-8601 format, UTC, precise to hour: `[YYYY-MM-DDThh]`
            for usage ending

            **before** this hour.
          example: '1971-02-27T12:47:34.135Z'
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                usage:
                  - dbm_host_count: 42401226
                    dbm_queries_count: 851979
                    hour: '1947-01-21T08:05:24.209Z'
                    org_name: commodo fugiat Lorem cillum dolor
                    public_id: 'culpa '
                  - dbm_host_count: -24912450
                    dbm_queries_count: 68599193
                    hour: '2013-12-16T04:23:34.341Z'
                    org_name: ipsum nulla quis esse culpa
                    public_id: sint
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/usage/fargate:
    get:
      tags:
        - Usage Metering
      summary: Get hourly usage for Fargate
      description: >-
        Get hourly usage for
        [Fargate](https://docs.datadoghq.com/integrations/ecs_fargate/).

        **Note:** hourly usage data for all products is now available in the
        [Get hourly usage by product family
        API](https://docs.datadoghq.com/api/latest/usage-metering/#get-hourly-usage-by-product-family).
        Refer to [Migrating from the V1 Hourly Usage APIs to
        V2](https://docs.datadoghq.com/account_management/guide/hourly-usage-migration/)
        for the associated migration guide.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json;datetime-format=rfc3339
        - name: start_hr
          in: query
          schema:
            type: string
          description: >-
            (Required) Datetime in ISO-8601 format, UTC, precise to hour:
            [YYYY-MM-DDThh] for usage beginning at this hour.
          example: '1971-02-27T12:47:34.135Z'
        - name: end_hr
          in: query
          schema:
            type: string
          description: >-
            Datetime in ISO-8601 format, UTC, precise to hour: [YYYY-MM-DDThh]
            for usage ending **before** this hour.
          example: '1971-02-27T12:47:34.135Z'
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                usage:
                  - apm_fargate_count: 23329245
                    appsec_fargate_count: 74395649
                    avg_profiled_fargate_tasks: -97544966
                    hour: '1995-06-02T20:06:53.680Z'
                    org_name: occaecat nisi Duis elit mollit
                    public_id: ut occaecat elit
                    tasks_count: -10847503
                  - apm_fargate_count: 90926534
                    appsec_fargate_count: -87446041
                    avg_profiled_fargate_tasks: -97222245
                    hour: '1949-08-06T03:33:48.989Z'
                    org_name: mollit anim sint
                    public_id: aliqua
                    tasks_count: 49005278
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/usage/hosts:
    get:
      tags:
        - Usage Metering
      summary: Get hourly usage for hosts and containers
      description: >-
        Get hourly usage for hosts and containers.

        **Note:** hourly usage data for all products is now available in the
        [Get hourly usage by product family
        API](https://docs.datadoghq.com/api/latest/usage-metering/#get-hourly-usage-by-product-family).
        Refer to [Migrating from the V1 Hourly Usage APIs to
        V2](https://docs.datadoghq.com/account_management/guide/hourly-usage-migration/)
        for the associated migration guide.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json;datetime-format=rfc3339
        - name: start_hr
          in: query
          schema:
            type: string
          description: >-
            (Required) Datetime in ISO-8601 format, UTC, precise to hour:
            [YYYY-MM-DDThh] for usage beginning at this hour.
          example: '1971-02-27T12:47:34.135Z'
        - name: end_hr
          in: query
          schema:
            type: string
          description: >-
            Datetime in ISO-8601 format, UTC, precise to hour: [YYYY-MM-DDThh]
            for usage ending **before** this hour.
          example: '1971-02-27T12:47:34.135Z'
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                usage:
                  - agent_host_count: -44225267
                    alibaba_host_count: 86097899
                    apm_azure_app_service_host_count: 56337474
                    apm_host_count: -76038714
                    aws_host_count: 99385654
                    azure_host_count: 33095952
                    container_count: 86513888
                    gcp_host_count: 96005851
                    heroku_host_count: -21473561
                    host_count: -43455808
                    hour: '2012-09-30T23:41:15.104Z'
                    infra_azure_app_service: 64574981
                    opentelemetry_apm_host_count: -17107895
                    opentelemetry_host_count: -29170345
                    org_name: ipsum minim aliq
                    public_id: dolore ut reprehenderit
                    vsphere_host_count: 56755473
                  - agent_host_count: 79193458
                    alibaba_host_count: -28585401
                    apm_azure_app_service_host_count: -98106960
                    apm_host_count: -61197799
                    aws_host_count: 2710164
                    azure_host_count: -76719189
                    container_count: -15642270
                    gcp_host_count: -60502194
                    heroku_host_count: -61310657
                    host_count: 49876319
                    hour: '1988-11-30T00:57:59.896Z'
                    infra_azure_app_service: 30483136
                    opentelemetry_apm_host_count: 67759341
                    opentelemetry_host_count: 32936273
                    org_name: aliquip
                    public_id: minim
                    vsphere_host_count: -82284092
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/usage/hourly-attribution:
    get:
      tags:
        - Usage Metering
      summary: Get hourly usage attribution
      description: >-
        Get hourly usage attribution.


        This API endpoint is paginated. To make sure you receive all records,
        check if the value of `next_record_id` is

        set in the response. If it is, make another request and pass
        `next_record_id` as a parameter.

        Pseudo code example:


        ```

        response := GetHourlyUsageAttribution(start_month)

        cursor := response.metadata.pagination.next_record_id

        WHILE cursor != null BEGIN
          sleep(5 seconds)  # Avoid running into rate limit
          response := GetHourlyUsageAttribution(start_month, next_record_id=cursor)
          cursor := response.metadata.pagination.next_record_id
        END

        ```
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json;datetime-format=rfc3339
        - name: start_hr
          in: query
          schema:
            type: string
          description: >-
            (Required) Datetime in ISO-8601 format, UTC, precise to hour:
            `[YYYY-MM-DDThh]` for usage beginning at this hour.
          example: '1971-02-27T12:47:34.135Z'
        - name: end_hr
          in: query
          schema:
            type: string
          description: >-
            Datetime in ISO-8601 format, UTC, precise to hour: `[YYYY-MM-DDThh]`
            for usage ending

            **before** this hour.
          example: '1971-02-27T12:47:34.135Z'
        - name: usage_type
          in: query
          schema:
            type: string
          description: (Required) Usage type to retrieve.
          example: estimated_ingested_logs_usage
        - name: next_record_id
          in: query
          schema:
            type: string
          description: >-
            List following results with a next_record_id provided in the
            previous query.
          example: proident
        - name: tag_breakdown_keys
          in: query
          schema:
            type: string
          description: >-
            Comma separated list of tags used to group usage. If no value is
            provided the usage will not be broken down by tags.


            To see which tags are available, look for the value of
            `tag_config_source` in the API response.
          example: proident
        - name: include_descendants
          in: query
          schema:
            type: boolean
          description: Include child org usage in the response. Defaults to `true`.
          example: 'true'
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                metadata:
                  pagination:
                    next_record_id: consectetur quis sunt do
                usage:
                  - hour: '1961-05-02T06:06:56.780Z'
                    org_name: id aliquip cillum sit
                    public_id: dolor adipisicing amet
                    tag_config_source: laborum aute aliquip ut
                    tags:
                      elit_4:
                        - datadog-integrations-lab
                        - datadog-integrations-lab
                    total_usage_sum: -8646714.758237422
                    updated_at: voluptate
                    usage_type: functions_usage
                  - hour: '2021-07-13T00:01:27.063Z'
                    org_name: adipi
                    public_id: nulla in tempor exercitation occaecat
                    tag_config_source: irure cupidatat sunt exerc
                    tags:
                      veniam2b:
                        - datadog-integrations-lab
                        - datadog-integrations-lab
                    total_usage_sum: 60859777.79172778
                    updated_at: veniam nostrud sint ut
                    usage_type: cws_hosts_usage
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/usage/incident-management:
    get:
      tags:
        - Usage Metering
      summary: Get hourly usage for incident management
      description: >-
        Get hourly usage for incident management.

        **Note:** hourly usage data for all products is now available in the
        [Get hourly usage by product family
        API](https://docs.datadoghq.com/api/latest/usage-metering/#get-hourly-usage-by-product-family).
        Refer to [Migrating from the V1 Hourly Usage APIs to
        V2](https://docs.datadoghq.com/account_management/guide/hourly-usage-migration/)
        for the associated migration guide.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json;datetime-format=rfc3339
        - name: start_hr
          in: query
          schema:
            type: string
          description: >-
            (Required) Datetime in ISO-8601 format, UTC, precise to hour:
            `[YYYY-MM-DDThh]` for usage beginning at this hour.
          example: '1971-02-27T12:47:34.135Z'
        - name: end_hr
          in: query
          schema:
            type: string
          description: >-
            Datetime in ISO-8601 format, UTC, precise to hour: `[YYYY-MM-DDThh]`
            for usage ending

            **before** this hour.
          example: '1971-02-27T12:47:34.135Z'
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                usage:
                  - hour: '2010-12-23T23:30:37.011Z'
                    monthly_active_users: -67057163
                    org_name: qui officia conseq
                    public_id: eiusmod e
                  - hour: '2004-05-16T04:25:24.387Z'
                    monthly_active_users: -96915190
                    org_name: eu minim
                    public_id: Lorem non cupidatat
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/usage/indexed-spans:
    get:
      tags:
        - Usage Metering
      summary: Get hourly usage for indexed spans
      description: >-
        Get hourly usage for indexed spans.

        **Note:** hourly usage data for all products is now available in the
        [Get hourly usage by product family
        API](https://docs.datadoghq.com/api/latest/usage-metering/#get-hourly-usage-by-product-family).
        Refer to [Migrating from the V1 Hourly Usage APIs to
        V2](https://docs.datadoghq.com/account_management/guide/hourly-usage-migration/)
        for the associated migration guide.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json;datetime-format=rfc3339
        - name: start_hr
          in: query
          schema:
            type: string
          description: >-
            (Required) Datetime in ISO-8601 format, UTC, precise to hour:
            `[YYYY-MM-DDThh]` for usage beginning at this hour.
          example: '1971-02-27T12:47:34.135Z'
        - name: end_hr
          in: query
          schema:
            type: string
          description: >-
            Datetime in ISO-8601 format, UTC, precise to hour: `[YYYY-MM-DDThh]`
            for usage ending **before** this hour.
          example: '1971-02-27T12:47:34.135Z'
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                usage:
                  - hour: '1990-06-11T18:36:19.656Z'
                    indexed_events_count: -76324118
                    org_name: culpa enim aliqua dolore
                    public_id: aliquip
                  - hour: '1944-12-15T12:57:06.927Z'
                    indexed_events_count: -35284536
                    org_name: ut non laboris
                    public_id: sed labore ut ad
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/usage/ingested-spans:
    get:
      tags:
        - Usage Metering
      summary: Get hourly usage for ingested spans
      description: >-
        Get hourly usage for ingested spans.

        **Note:** hourly usage data for all products is now available in the
        [Get hourly usage by product family
        API](https://docs.datadoghq.com/api/latest/usage-metering/#get-hourly-usage-by-product-family).
        Refer to [Migrating from the V1 Hourly Usage APIs to
        V2](https://docs.datadoghq.com/account_management/guide/hourly-usage-migration/)
        for the associated migration guide.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json;datetime-format=rfc3339
        - name: start_hr
          in: query
          schema:
            type: string
          description: >-
            (Required) Datetime in ISO-8601 format, UTC, precise to hour:
            `[YYYY-MM-DDThh]` for usage beginning at this hour.
          example: '1971-02-27T12:47:34.135Z'
        - name: end_hr
          in: query
          schema:
            type: string
          description: >-
            Datetime in ISO-8601 format, UTC, precise to hour: `[YYYY-MM-DDThh]`
            for usage ending

            **before** this hour.
          example: '1971-02-27T12:47:34.135Z'
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                usage:
                  - hour: '1951-05-28T01:26:34.311Z'
                    ingested_events_bytes: 37866561
                    org_name: dolore id est proident
                    public_id: culpa tempor id
                  - hour: '1984-09-26T00:20:12.683Z'
                    ingested_events_bytes: -42716216
                    org_name: minim sint ut dolor
                    public_id: Ut
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/usage/iot:
    get:
      tags:
        - Usage Metering
      summary: Get hourly usage for IoT
      description: >-
        Get hourly usage for IoT.

        **Note:** hourly usage data for all products is now available in the
        [Get hourly usage by product family
        API](https://docs.datadoghq.com/api/latest/usage-metering/#get-hourly-usage-by-product-family).
        Refer to [Migrating from the V1 Hourly Usage APIs to
        V2](https://docs.datadoghq.com/account_management/guide/hourly-usage-migration/)
        for the associated migration guide.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json;datetime-format=rfc3339
        - name: start_hr
          in: query
          schema:
            type: string
          description: >-
            (Required) Datetime in ISO-8601 format, UTC, precise to hour:
            `[YYYY-MM-DDThh]` for usage beginning at this hour.
          example: '1971-02-27T12:47:34.135Z'
        - name: end_hr
          in: query
          schema:
            type: string
          description: >-
            Datetime in ISO-8601 format, UTC, precise to hour: `[YYYY-MM-DDThh]`
            for usage ending

            **before** this hour.
          example: '1971-02-27T12:47:34.135Z'
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                usage:
                  - hour: '2000-01-27T14:05:48.408Z'
                    iot_device_count: 18025789
                    org_name: et mollit E
                    public_id: nulla nostrud
                  - hour: '2019-06-17T18:22:10.570Z'
                    iot_device_count: -80345613
                    org_name: minim ad aliqua
                    public_id: in incididunt esse dolor et
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/usage/logs:
    get:
      tags:
        - Usage Metering
      summary: Get hourly usage for logs
      description: >-
        Get hourly usage for logs.

        **Note:** hourly usage data for all products is now available in the
        [Get hourly usage by product family
        API](https://docs.datadoghq.com/api/latest/usage-metering/#get-hourly-usage-by-product-family).
        Refer to [Migrating from the V1 Hourly Usage APIs to
        V2](https://docs.datadoghq.com/account_management/guide/hourly-usage-migration/)
        for the associated migration guide.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json;datetime-format=rfc3339
        - name: start_hr
          in: query
          schema:
            type: string
          description: >-
            (Required) Datetime in ISO-8601 format, UTC, precise to hour:
            [YYYY-MM-DDThh] for usage beginning at this hour.
          example: '1971-02-27T12:47:34.135Z'
        - name: end_hr
          in: query
          schema:
            type: string
          description: >-
            Datetime in ISO-8601 format, UTC, precise to hour: [YYYY-MM-DDThh]
            for usage ending **before** this hour.
          example: '1971-02-27T12:47:34.135Z'
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                usage:
                  - billable_ingested_bytes: 76226455
                    hour: '2021-09-27T12:21:09.697Z'
                    indexed_events_count: 63706122
                    ingested_events_bytes: 89997121
                    logs_live_indexed_count: -81690568
                    logs_live_ingested_bytes: -33559927
                    logs_rehydrated_indexed_count: 70175800
                    logs_rehydrated_ingested_bytes: -30679893
                    org_name: non cupidatat
                    public_id: aliqua do esse
                  - billable_ingested_bytes: -14685843
                    hour: '2012-07-09T20:26:26.020Z'
                    indexed_events_count: -65998509
                    ingested_events_bytes: 5307271
                    logs_live_indexed_count: -25253603
                    logs_live_ingested_bytes: 33381557
                    logs_rehydrated_indexed_count: 28213461
                    logs_rehydrated_ingested_bytes: -32641314
                    org_name: qui nostrud
                    public_id: nostrud ut irure id officia
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/usage/logs-by-retention:
    get:
      tags:
        - Usage Metering
      summary: Get hourly logs usage by retention
      description: >-
        Get hourly usage for indexed logs by retention period.

        **Note:** hourly usage data for all products is now available in the
        [Get hourly usage by product family
        API](https://docs.datadoghq.com/api/latest/usage-metering/#get-hourly-usage-by-product-family).
        Refer to [Migrating from the V1 Hourly Usage APIs to
        V2](https://docs.datadoghq.com/account_management/guide/hourly-usage-migration/)
        for the associated migration guide.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json;datetime-format=rfc3339
        - name: start_hr
          in: query
          schema:
            type: string
          description: >-
            (Required) Datetime in ISO-8601 format, UTC, precise to hour:
            `[YYYY-MM-DDThh]` for usage beginning at this hour.
          example: '1971-02-27T12:47:34.135Z'
        - name: end_hr
          in: query
          schema:
            type: string
          description: >-
            Datetime in ISO-8601 format, UTC, precise to hour: `[YYYY-MM-DDThh]`
            for usage ending

            **before** this hour.
          example: '1971-02-27T12:47:34.135Z'
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                usage:
                  - indexed_events_count: 39254933
                    live_indexed_events_count: -67063922
                    org_name: veniam tempor minim ut
                    public_id: nisi aliqua dolore
                    rehydrated_indexed_events_count: 83330127
                    retention: labore enim ut ullamco
                  - indexed_events_count: 93127072
                    live_indexed_events_count: -73269944
                    org_name: ullamco deserunt ad occaecat
                    public_id: deserunt quis ut ex eiusmod
                    rehydrated_indexed_events_count: -2643447
                    retention: sit ipsum
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/usage/logs_by_index:
    get:
      tags:
        - Usage Metering
      summary: Get hourly usage for logs by index
      description: Get hourly usage for logs by index.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json;datetime-format=rfc3339
        - name: start_hr
          in: query
          schema:
            type: string
          description: >-
            (Required) Datetime in ISO-8601 format, UTC, precise to hour:
            [YYYY-MM-DDThh] for usage beginning at this hour.
          example: '1971-02-27T12:47:34.135Z'
        - name: end_hr
          in: query
          schema:
            type: string
          description: >-
            Datetime in ISO-8601 format, UTC, precise to hour: [YYYY-MM-DDThh]
            for usage ending **before** this hour.
          example: '1971-02-27T12:47:34.135Z'
        - name: index_name
          in: query
          schema:
            type: string
          description: Comma-separated list of log index names.
          example: anim et
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                usage:
                  - event_count: 98671589
                    hour: '1990-09-10T03:07:56.570Z'
                    index_id: aliqua sint mollit ea
                    index_name: ad qui proident
                    org_name: incididunt
                    public_id: dolore nisi
                    retention: 13478778
                  - event_count: 97890027
                    hour: '2013-07-22T13:55:38.697Z'
                    index_id: veniam laborum
                    index_name: fugiat mol
                    org_name: aute
                    public_id: 'aliquip cupidatat '
                    retention: -95224640
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/usage/monthly-attribution:
    get:
      tags:
        - Usage Metering
      summary: Get monthly usage attribution
      description: >-
        Get monthly usage attribution.


        This API endpoint is paginated. To make sure you receive all records,
        check if the value of `next_record_id` is

        set in the response. If it is, make another request and pass
        `next_record_id` as a parameter.

        Pseudo code example:


        ```

        response := GetMonthlyUsageAttribution(start_month)

        cursor := response.metadata.pagination.next_record_id

        WHILE cursor != null BEGIN
          sleep(5 seconds)  # Avoid running into rate limit
          response := GetMonthlyUsageAttribution(start_month, next_record_id=cursor)
          cursor := response.metadata.pagination.next_record_id
        END

        ```
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json;datetime-format=rfc3339
        - name: start_month
          in: query
          schema:
            type: string
          description: >-
            (Required) Datetime in ISO-8601 format, UTC, precise to month:
            `[YYYY-MM]` for usage beginning in this month.

            Maximum of 15 months ago.
          example: '1971-02-27T12:47:34.135Z'
        - name: end_month
          in: query
          schema:
            type: string
          description: >-
            Datetime in ISO-8601 format, UTC, precise to month: `[YYYY-MM]` for
            usage ending this month.
          example: '1971-02-27T12:47:34.135Z'
        - name: fields
          in: query
          schema:
            type: string
          description: >-
            (Required) Comma-separated list of usage types to return, or `*` for
            all usage types.
          example: apm_host_percentage
        - name: sort_direction
          in: query
          schema:
            type: string
          description: 'The direction to sort by: `[desc, asc]`.'
          example: desc
        - name: sort_name
          in: query
          schema:
            type: string
          description: The field to sort by.
          example: apm_host_percentage
        - name: tag_breakdown_keys
          in: query
          schema:
            type: string
          description: >-
            Comma separated list of tag keys used to group usage. If no value is
            provided the usage will not be broken down by tags.


            To see which tags are available, look for the value of
            `tag_config_source` in the API response.
          example: proident
        - name: next_record_id
          in: query
          schema:
            type: string
          description: >-
            List following results with a next_record_id provided in the
            previous query.
          example: proident
        - name: include_descendants
          in: query
          schema:
            type: boolean
          description: Include child org usage in the response. Defaults to `true`.
          example: 'true'
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                metadata:
                  aggregates:
                    - agg_type: sum
                      field: custom_timeseries_usage
                      value: -39016143.70634459
                    - agg_type: sum
                      field: custom_timeseries_usage
                      value: -63333487.94928608
                  pagination:
                    next_record_id: aliqua veniam mollit nostrud
                usage:
                  - month: '2005-01-16T21:38:06.197Z'
                    org_name: dolore dolore quis
                    public_id: cupidatat cillum
                    tag_config_source: quis ea
                    tags:
                      quis28:
                        - datadog-integrations-lab
                        - datadog-integrations-lab
                    updated_at: '1976-11-19T12:33:15.776Z'
                    values:
                      api_percentage: -27572389.281113982
                      api_usage: -82363233.84416017
                      apm_fargate_percentage: 5839206.643929541
                      apm_fargate_usage: 47337828.75627127
                      apm_host_percentage: 37895743.333007336
                      apm_host_usage: 24953770.930379808
                      appsec_fargate_percentage: -20539857.79190497
                      appsec_fargate_usage: 74657901.00060344
                      appsec_percentage: -83331385.1072531
                      appsec_usage: 89917083.68862244
                      browser_percentage: 27352521.346341386
                      browser_usage: 75664043.84971198
                      container_percentage: 87538398.56164792
                      container_usage: 4776036.919956356
                      cspm_containers_percentage: 74343331.67224452
                      cspm_containers_usage: -33017780.996674426
                      cspm_hosts_percentage: -23319577.459240153
                      cspm_hosts_usage: 55139110.07179448
                      custom_timeseries_percentage: 63259529.72406483
                      custom_timeseries_usage: 20442073.455268428
                      cws_containers_percentage: -84879010.31778607
                      cws_containers_usage: 57123051.13164532
                      cws_hosts_percentage: 74123104.84683582
                      cws_hosts_usage: 68438568.16151312
                      dbm_hosts_percentage: 95972639.94801292
                      dbm_hosts_usage: -51940433.91081777
                      dbm_queries_percentage: -95424394.1246522
                      dbm_queries_usage: 49276065.51717752
                      estimated_indexed_logs_percentage: -73368587.42956802
                      estimated_indexed_logs_usage: 27518367.38911493
                      estimated_indexed_spans_percentage: 99392824.34536946
                      estimated_indexed_spans_usage: -90680660.89783761
                      estimated_ingested_logs_percentage: -81338494.09905909
                      estimated_ingested_logs_usage: 39961881.09150812
                      estimated_ingested_spans_percentage: -98615179.93874474
                      estimated_ingested_spans_usage: 88399933.30967078
                      fargate_percentage: 70430712.872412
                      fargate_usage: 72342435.29402086
                      functions_percentage: -5875521.797301084
                      functions_usage: -23649615.988822386
                      indexed_logs_percentage: -88045696.07380994
                      indexed_logs_usage: -58222649.32188887
                      infra_host_percentage: 24537970.03618847
                      infra_host_usage: 52503685.00924173
                      invocations_percentage: 73574473.54023212
                      invocations_usage: 10301205.904163927
                      npm_host_percentage: 73418433.01773712
                      npm_host_usage: -29945839.10381365
                      profiled_container_percentage: 20842129.16567996
                      profiled_container_usage: -44490632.19470912
                      profiled_host_percentage: 53249840.22345349
                      profiled_host_usage: -12815205.260857671
                      snmp_percentage: 18615209.50291249
                      snmp_usage: 10117008.388652414
                  - month: '2013-02-16T03:12:22.460Z'
                    org_name: in sint et
                    public_id: nostrud aliquip c
                    tag_config_source: ex nisi do labore
                    tags:
                      cilluma41:
                        - datadog-integrations-lab
                        - datadog-integrations-lab
                      sint_8a:
                        - datadog-integrations-lab
                        - datadog-integrations-lab
                      ut3:
                        - datadog-integrations-lab
                        - datadog-integrations-lab
                    updated_at: '1975-10-10T20:37:20.174Z'
                    values:
                      api_percentage: 6170215.542116836
                      api_usage: 50692584.18517575
                      apm_fargate_percentage: 87171431.58420569
                      apm_fargate_usage: -34806139.71566555
                      apm_host_percentage: -84980560.90516673
                      apm_host_usage: -3779121.651631236
                      appsec_fargate_percentage: 8700417.55044517
                      appsec_fargate_usage: 47707825.79016024
                      appsec_percentage: 23247713.065269202
                      appsec_usage: -8784588.515920654
                      browser_percentage: 80969724.94219595
                      browser_usage: 38014084.350438446
                      container_percentage: 75554452.25566736
                      container_usage: 82016588.03628948
                      cspm_containers_percentage: -11972740.952824175
                      cspm_containers_usage: 11995657.954605445
                      cspm_hosts_percentage: -64189634.41662551
                      cspm_hosts_usage: 41799381.70974967
                      custom_timeseries_percentage: -54542740.91523645
                      custom_timeseries_usage: 31859262.877894685
                      cws_containers_percentage: 36225176.49246818
                      cws_containers_usage: 28747422.202307776
                      cws_hosts_percentage: 68932741.19587126
                      cws_hosts_usage: 35278600.44104743
                      dbm_hosts_percentage: -76054998.0692224
                      dbm_hosts_usage: -68117595.4549937
                      dbm_queries_percentage: -18092674.64881499
                      dbm_queries_usage: -33841336.475125685
                      estimated_indexed_logs_percentage: -72236778.21832535
                      estimated_indexed_logs_usage: -98554854.32581052
                      estimated_indexed_spans_percentage: -57115688.431301504
                      estimated_indexed_spans_usage: 57108448.414170176
                      estimated_ingested_logs_percentage: -23434579.231603518
                      estimated_ingested_logs_usage: -22785228.64800179
                      estimated_ingested_spans_percentage: -66090733.68363378
                      estimated_ingested_spans_usage: 68807714.34994513
                      fargate_percentage: 22352767.801207334
                      fargate_usage: 87001408.20569602
                      functions_percentage: 76576072.96025538
                      functions_usage: -44631759.77712983
                      indexed_logs_percentage: -80687800.42107573
                      indexed_logs_usage: 79160822.01559341
                      infra_host_percentage: -35620791.4620315
                      infra_host_usage: 32288452.306433424
                      invocations_percentage: -51505464.45231057
                      invocations_usage: -22672423.32710184
                      npm_host_percentage: -40053095.48318143
                      npm_host_usage: -7463289.419473946
                      profiled_container_percentage: 19304094.010497376
                      profiled_container_usage: 21194032.833435237
                      profiled_host_percentage: -97585321.01149267
                      profiled_host_usage: 20265834.624490038
                      snmp_percentage: 96827750.8450742
                      snmp_usage: 16530514.168507129
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/usage/network_flows:
    get:
      tags:
        - Usage Metering
      summary: get hourly usage for network flows
      description: >-
        Get hourly usage for network flows.

        **Note:** hourly usage data for all products is now available in the
        [Get hourly usage by product family
        API](https://docs.datadoghq.com/api/latest/usage-metering/#get-hourly-usage-by-product-family).
        Refer to [Migrating from the V1 Hourly Usage APIs to
        V2](https://docs.datadoghq.com/account_management/guide/hourly-usage-migration/)
        for the associated migration guide.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json;datetime-format=rfc3339
        - name: start_hr
          in: query
          schema:
            type: string
          description: >-
            (Required) Datetime in ISO-8601 format, UTC, precise to hour:
            `[YYYY-MM-DDThh]` for usage beginning at this hour.
          example: '1971-02-27T12:47:34.135Z'
        - name: end_hr
          in: query
          schema:
            type: string
          description: >-
            Datetime in ISO-8601 format, UTC, precise to hour: `[YYYY-MM-DDThh]`
            for usage ending

            **before** this hour.
          example: '1971-02-27T12:47:34.135Z'
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                usage:
                  - hour: '2001-11-29T14:05:02.600Z'
                    indexed_events_count: 48995079
                    org_name: labore aliquip tempor in
                    public_id: laboris veniam
                  - hour: '2012-08-02T17:35:52.933Z'
                    indexed_events_count: -18187759
                    org_name: deserunt
                    public_id: cupidatat deserunt
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/usage/network_hosts:
    get:
      tags:
        - Usage Metering
      summary: Get hourly usage for network hosts
      description: >-
        Get hourly usage for network hosts.

        **Note:** hourly usage data for all products is now available in the
        [Get hourly usage by product family
        API](https://docs.datadoghq.com/api/latest/usage-metering/#get-hourly-usage-by-product-family).
        Refer to [Migrating from the V1 Hourly Usage APIs to
        V2](https://docs.datadoghq.com/account_management/guide/hourly-usage-migration/)
        for the associated migration guide.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json;datetime-format=rfc3339
        - name: start_hr
          in: query
          schema:
            type: string
          description: >-
            (Required) Datetime in ISO-8601 format, UTC, precise to hour:
            [YYYY-MM-DDThh] for usage beginning at this hour.
          example: '1971-02-27T12:47:34.135Z'
        - name: end_hr
          in: query
          schema:
            type: string
          description: >-
            Datetime in ISO-8601 format, UTC, precise to hour: [YYYY-MM-DDThh]
            for usage ending **before** this hour.
          example: '1971-02-27T12:47:34.135Z'
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                usage:
                  - host_count: -30657024
                    hour: '2021-04-02T03:04:09.355Z'
                    org_name: Duis deserunt
                    public_id: labore sunt magna
                  - host_count: -86347974
                    hour: '1952-06-19T02:15:22.075Z'
                    org_name: aliqua in
                    public_id: sunt aliqua
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/usage/online-archive:
    get:
      tags:
        - Usage Metering
      summary: Get hourly usage for online archive
      description: >-
        Get hourly usage for online archive.

        **Note:** hourly usage data for all products is now available in the
        [Get hourly usage by product family
        API](https://docs.datadoghq.com/api/latest/usage-metering/#get-hourly-usage-by-product-family).
        Refer to [Migrating from the V1 Hourly Usage APIs to
        V2](https://docs.datadoghq.com/account_management/guide/hourly-usage-migration/)
        for the associated migration guide.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json;datetime-format=rfc3339
        - name: start_hr
          in: query
          schema:
            type: string
          description: >-
            (Required) Datetime in ISO-8601 format, UTC, precise to hour:
            `[YYYY-MM-DDThh]` for usage beginning at this hour.
          example: '1971-02-27T12:47:34.135Z'
        - name: end_hr
          in: query
          schema:
            type: string
          description: >-
            Datetime in ISO-8601 format, UTC, precise to hour: `[YYYY-MM-DDThh]`
            for usage ending

            **before** this hour.
          example: '1971-02-27T12:47:34.135Z'
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                usage:
                  - hour: '2022-04-22T23:47:43.749Z'
                    online_archive_events_count: 38247838
                    org_name: anim occaecat
                    public_id: vol
                  - hour: '1982-03-29T03:05:17.638Z'
                    online_archive_events_count: -36228813
                    org_name: nostrud ut dolor culpa sint
                    public_id: aliqua pariatur repr
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/usage/profiling:
    get:
      tags:
        - Usage Metering
      summary: Get hourly usage for profiled hosts
      description: >-
        Get hourly usage for profiled hosts.

        **Note:** hourly usage data for all products is now available in the
        [Get hourly usage by product family
        API](https://docs.datadoghq.com/api/latest/usage-metering/#get-hourly-usage-by-product-family).
        Refer to [Migrating from the V1 Hourly Usage APIs to
        V2](https://docs.datadoghq.com/account_management/guide/hourly-usage-migration/)
        for the associated migration guide.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json;datetime-format=rfc3339
        - name: start_hr
          in: query
          schema:
            type: string
          description: >-
            (Required) Datetime in ISO-8601 format, UTC, precise to hour:
            `[YYYY-MM-DDThh]` for usage beginning at this hour.
          example: '1971-02-27T12:47:34.135Z'
        - name: end_hr
          in: query
          schema:
            type: string
          description: >-
            Datetime in ISO-8601 format, UTC, precise to hour: `[YYYY-MM-DDThh]`
            for usage ending

            **before** this hour.
          example: '1971-02-27T12:47:34.135Z'
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                usage:
                  - avg_container_agent_count: 55116137
                    host_count: -10196802
                    hour: '1946-09-06T11:22:28.030Z'
                    org_name: Duis
                    public_id: in
                  - avg_container_agent_count: 14921327
                    host_count: -42321679
                    hour: '1944-07-25T08:37:20.071Z'
                    org_name: enim laboris ad aliquip
                    public_id: tempor sint a
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/usage/rum:
    get:
      tags:
        - Usage Metering
      summary: Get hourly usage for RUM units
      description: >-
        Get hourly usage for
        [RUM](https://docs.datadoghq.com/real_user_monitoring/) Units.

        **Note:** hourly usage data for all products is now available in the
        [Get hourly usage by product family
        API](https://docs.datadoghq.com/api/latest/usage-metering/#get-hourly-usage-by-product-family).
        Refer to [Migrating from the V1 Hourly Usage APIs to
        V2](https://docs.datadoghq.com/account_management/guide/hourly-usage-migration/)
        for the associated migration guide.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json;datetime-format=rfc3339
        - name: start_hr
          in: query
          schema:
            type: string
          description: >-
            (Required) Datetime in ISO-8601 format, UTC, precise to hour:
            [YYYY-MM-DDThh] for usage beginning at this hour.
          example: '1971-02-27T12:47:34.135Z'
        - name: end_hr
          in: query
          schema:
            type: string
          description: >-
            Datetime in ISO-8601 format, UTC, precise to hour: [YYYY-MM-DDThh]
            for usage ending **before** this hour.
          example: '1971-02-27T12:47:34.135Z'
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                usage:
                  - browser_rum_units: 43769725
                    mobile_rum_units: -50636397
                    org_name: dolore cillum ex
                    public_id: ut dolore anim cillum
                    rum_units: 65142636
                  - browser_rum_units: -58910117
                    mobile_rum_units: 12390983
                    org_name: veniam ea enim
                    public_id: officia qui
                    rum_units: 76879278
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/usage/rum_sessions:
    get:
      tags:
        - Usage Metering
      summary: Get hourly usage for RUM sessions
      description: >-
        Get hourly usage for
        [RUM](https://docs.datadoghq.com/real_user_monitoring/) Sessions.

        **Note:** hourly usage data for all products is now available in the
        [Get hourly usage by product family
        API](https://docs.datadoghq.com/api/latest/usage-metering/#get-hourly-usage-by-product-family).
        Refer to [Migrating from the V1 Hourly Usage APIs to
        V2](https://docs.datadoghq.com/account_management/guide/hourly-usage-migration/)
        for the associated migration guide.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json;datetime-format=rfc3339
        - name: start_hr
          in: query
          schema:
            type: string
          description: >-
            (Required) Datetime in ISO-8601 format, UTC, precise to hour:
            [YYYY-MM-DDThh] for usage beginning at this hour.
          example: '1971-02-27T12:47:34.135Z'
        - name: end_hr
          in: query
          schema:
            type: string
          description: >-
            Datetime in ISO-8601 format, UTC, precise to hour: [YYYY-MM-DDThh]
            for usage ending **before** this hour.
          example: '1971-02-27T12:47:34.135Z'
        - name: type
          in: query
          schema:
            type: string
          description: 'RUM type: `[browser, mobile]`. Defaults to `browser`.'
          example: proident
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                usage:
                  - hour: '1948-12-19T20:38:11.386Z'
                    org_name: reprehenderit voluptate nisi magna
                    public_id: ipsum veniam
                    replay_session_count: -94142241
                    session_count: 85585685
                    session_count_android: 48173557
                    session_count_ios: -53179274
                    session_count_reactnative: 13846947
                  - hour: '1966-02-10T23:09:16.701Z'
                    org_name: consectetur deserunt
                    public_id: esse in labore sed
                    replay_session_count: 52566710
                    session_count: -26959074
                    session_count_android: 82617197
                    session_count_ios: 43677377
                    session_count_reactnative: -57924626
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/usage/sds:
    get:
      tags:
        - Usage Metering
      summary: Get hourly usage for sensitive data scanner
      description: >-
        Get hourly usage for sensitive data scanner.

        **Note:** hourly usage data for all products is now available in the
        [Get hourly usage by product family
        API](https://docs.datadoghq.com/api/latest/usage-metering/#get-hourly-usage-by-product-family).
        Refer to [Migrating from the V1 Hourly Usage APIs to
        V2](https://docs.datadoghq.com/account_management/guide/hourly-usage-migration/)
        for the associated migration guide.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json;datetime-format=rfc3339
        - name: start_hr
          in: query
          schema:
            type: string
          description: >-
            (Required) Datetime in ISO-8601 format, UTC, precise to hour:
            `[YYYY-MM-DDThh]` for usage beginning at this hour.
          example: '1971-02-27T12:47:34.135Z'
        - name: end_hr
          in: query
          schema:
            type: string
          description: >-
            Datetime in ISO-8601 format, UTC, precise to hour: `[YYYY-MM-DDThh]`
            for usage ending

            **before** this hour.
          example: '1971-02-27T12:47:34.135Z'
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                usage:
                  - apm_scanned_bytes: 70375327
                    events_scanned_bytes: -57393066
                    hour: '1956-09-05T14:10:43.554Z'
                    logs_scanned_bytes: -29521042
                    org_name: deserunt tempor proident adipisicing
                    public_id: incididunt ea amet culpa
                    rum_scanned_bytes: -53253006
                    total_scanned_bytes: -77578112
                  - apm_scanned_bytes: 82837787
                    events_scanned_bytes: 22375149
                    hour: '1966-09-06T11:32:24.799Z'
                    logs_scanned_bytes: 86818110
                    org_name: officia veniam magna in
                    public_id: cons
                    rum_scanned_bytes: -65104199
                    total_scanned_bytes: 89216390
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/usage/snmp:
    get:
      tags:
        - Usage Metering
      summary: Get hourly usage for SNMP devices
      description: >-
        Get hourly usage for SNMP devices.

        **Note:** hourly usage data for all products is now available in the
        [Get hourly usage by product family
        API](https://docs.datadoghq.com/api/latest/usage-metering/#get-hourly-usage-by-product-family).
        Refer to [Migrating from the V1 Hourly Usage APIs to
        V2](https://docs.datadoghq.com/account_management/guide/hourly-usage-migration/)
        for the associated migration guide.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json;datetime-format=rfc3339
        - name: start_hr
          in: query
          schema:
            type: string
          description: >-
            (Required) Datetime in ISO-8601 format, UTC, precise to hour:
            `[YYYY-MM-DDThh]` for usage beginning at this hour.
          example: '1971-02-27T12:47:34.135Z'
        - name: end_hr
          in: query
          schema:
            type: string
          description: >-
            Datetime in ISO-8601 format, UTC, precise to hour: `[YYYY-MM-DDThh]`
            for usage ending

            **before** this hour.
          example: '1971-02-27T12:47:34.135Z'
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                usage:
                  - hour: '1962-12-25T13:14:25.144Z'
                    org_name: commodo exercitation nulla Lorem dolore
                    public_id: reprehenderit in fugiat
                    snmp_devices: -17227508
                  - hour: '1996-01-02T06:49:37.175Z'
                    org_name: sunt dolor mollit
                    public_id: reprehenderit enim aliqua
                    snmp_devices: 55002279
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/usage/summary:
    get:
      tags:
        - Usage Metering
      summary: Get usage across your account
      description: Get all usage across your account.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json;datetime-format=rfc3339
        - name: start_month
          in: query
          schema:
            type: string
          description: >-
            (Required) Datetime in ISO-8601 format, UTC, precise to month:
            `[YYYY-MM]` for usage beginning in this month.

            Maximum of 15 months ago.
          example: '1971-02-27T12:47:34.135Z'
        - name: end_month
          in: query
          schema:
            type: string
          description: >-
            Datetime in ISO-8601 format, UTC, precise to month: `[YYYY-MM]` for
            usage ending this month.
          example: '1971-02-27T12:47:34.135Z'
        - name: include_org_details
          in: query
          schema:
            type: boolean
          description: Include usage summaries for each sub-org.
          example: 'false'
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                agent_host_top99p_sum: -70978770
                apm_azure_app_service_host_top99p_sum: -48343363
                apm_fargate_count_avg_sum: 3238610
                apm_host_top99p_sum: 54967604
                appsec_fargate_count_avg_sum: 39493689
                audit_logs_lines_indexed_agg_sum: 95515794
                avg_profiled_fargate_tasks_sum: 97856479
                aws_host_top99p_sum: -6946210
                aws_lambda_func_count: -2966778
                aws_lambda_invocations_sum: 63705538
                azure_app_service_top99p_sum: -52223750
                azure_host_top99p_sum: -66506311
                billable_ingested_bytes_agg_sum: 56140000
                browser_rum_lite_session_count_agg_sum: -64756947
                browser_rum_replay_session_count_agg_sum: 66619735
                browser_rum_units_agg_sum: 32043068
                ci_pipeline_indexed_spans_agg_sum: -53132005
                ci_test_indexed_spans_agg_sum: 63524772
                ci_visibility_pipeline_committers_hwm_sum: 56422646
                ci_visibility_test_committers_hwm_sum: -14147488
                container_avg_sum: 51436729
                container_hwm_sum: 58665819
                cspm_aas_host_top99p_sum: -82598033
                cspm_aws_host_top99p_sum: -46452492
                cspm_azure_host_top99p_sum: 40687768
                cspm_container_avg_sum: -50491091
                cspm_container_hwm_sum: -2871281
                cspm_gcp_host_top99p_sum: -31062472
                cspm_host_top99p_sum: 72300625
                custom_ts_sum: -1076274
                cws_containers_avg_sum: -11612428
                cws_host_top99p_sum: 48545562
                dbm_host_top99p_sum: -23329579
                dbm_queries_avg_sum: -30506581
                end_date: '1988-07-27T12:40:08.684Z'
                fargate_tasks_count_avg_sum: 80295894
                fargate_tasks_count_hwm_sum: 55820440
                gcp_host_top99p_sum: -39173464
                heroku_host_top99p_sum: 6791305
                incident_management_monthly_active_users_hwm_sum: -94691728
                indexed_events_count_agg_sum: 20408565
                infra_host_top99p_sum: -16904194
                ingested_events_bytes_agg_sum: 21623663
                iot_device_agg_sum: -75563231
                iot_device_top99p_sum: 92729160
                last_updated: '1962-05-11T06:02:16.826Z'
                live_indexed_events_agg_sum: 89845153
                live_ingested_bytes_agg_sum: 40243549
                logs_by_retention:
                  orgs:
                    usage:
                      - usage:
                          - logs_indexed_logs_usage_sum: 44119860
                            logs_live_indexed_logs_usage_sum: 11276415
                            logs_rehydrated_indexed_logs_usage_sum: -78926605
                            retention: culpa ea
                          - logs_indexed_logs_usage_sum: -85747052
                            logs_live_indexed_logs_usage_sum: -57901322
                            logs_rehydrated_indexed_logs_usage_sum: -13846169
                            retention: in
                      - usage:
                          - logs_indexed_logs_usage_sum: -3853064
                            logs_live_indexed_logs_usage_sum: -26999916
                            logs_rehydrated_indexed_logs_usage_sum: 84714710
                            retention: irure
                          - logs_indexed_logs_usage_sum: -59214282
                            logs_live_indexed_logs_usage_sum: -47454583
                            logs_rehydrated_indexed_logs_usage_sum: 97121558
                            retention: fugiat
                  usage:
                    - logs_indexed_logs_usage_agg_sum: 75056351
                      logs_live_indexed_logs_usage_agg_sum: -57008003
                      logs_rehydrated_indexed_logs_usage_agg_sum: -12538366
                      retention: consectetur consequat in ut minim
                    - logs_indexed_logs_usage_agg_sum: -37819883
                      logs_live_indexed_logs_usage_agg_sum: -65688029
                      logs_rehydrated_indexed_logs_usage_agg_sum: -64885042
                      retention: sunt dolore
                  usage_by_month:
                    date: '1957-11-10T01:58:41.369Z'
                    usage:
                      - logs_indexed_logs_usage_sum: 5381997
                        logs_live_indexed_logs_usage_sum: -62885526
                        logs_rehydrated_indexed_logs_usage_sum: 70995872
                        retention: aute aliqua do nisi
                      - logs_indexed_logs_usage_sum: 64775942
                        logs_live_indexed_logs_usage_sum: -22432413
                        logs_rehydrated_indexed_logs_usage_sum: -87475557
                        retention: est officia
                mobile_rum_lite_session_count_agg_sum: 57724641
                mobile_rum_session_count_agg_sum: -15752476
                mobile_rum_session_count_android_agg_sum: 39692136
                mobile_rum_session_count_ios_agg_sum: 32732725
                mobile_rum_session_count_reactnative_agg_sum: 70082125
                mobile_rum_units_agg_sum: 29381071
                netflow_indexed_events_count_agg_sum: -217355
                npm_host_top99p_sum: -79020814
                observability_pipelines_bytes_processed_agg_sum: -876632
                online_archive_events_count_agg_sum: 63110163
                opentelemetry_apm_host_top99p_sum: -14162198
                opentelemetry_host_top99p_sum: 7676421
                profiling_container_agent_count_avg: 51526976
                profiling_host_count_top99p_sum: 781657
                rehydrated_indexed_events_agg_sum: -78305513
                rehydrated_ingested_bytes_agg_sum: 40899879
                rum_browser_and_mobile_session_count: -44087954
                rum_session_count_agg_sum: -57699495
                rum_total_session_count_agg_sum: -80154188
                rum_units_agg_sum: 29115840
                sds_apm_scanned_bytes_sum: -95072512
                sds_events_scanned_bytes_sum: 73066721
                sds_logs_scanned_bytes_sum: -27903329
                sds_rum_scanned_bytes_sum: -11287091
                sds_total_scanned_bytes_sum: 57903647
                start_date: '1977-12-01T12:52:39.868Z'
                synthetics_browser_check_calls_count_agg_sum: -16829614
                synthetics_check_calls_count_agg_sum: -57631158
                trace_search_indexed_events_count_agg_sum: 57087354
                twol_ingested_events_bytes_agg_sum: -79762776
                usage:
                  - agent_host_top99p: 54008233
                    apm_azure_app_service_host_top99p: 17348412
                    apm_fargate_count_avg: -26913530
                    apm_host_top99p: 89840362
                    appsec_fargate_count_avg: 47273475
                    audit_logs_lines_indexed_sum: 33012126
                    avg_profiled_fargate_tasks: -64254887
                    aws_host_top99p: 26084637
                    aws_lambda_func_count: -30330873
                    aws_lambda_invocations_sum: 77585582
                    azure_app_service_top99p: 17365973
                    billable_ingested_bytes_sum: 32292672
                    browser_rum_lite_session_count_sum: 82801662
                    browser_rum_replay_session_count_sum: -78002928
                    browser_rum_units_sum: -54769598
                    ci_pipeline_indexed_spans_sum: -82263690
                    ci_test_indexed_spans_sum: 79031454
                    ci_visibility_pipeline_committers_hwm: -68286135
                    ci_visibility_test_committers_hwm: 11448081
                    container_avg: 32896731
                    container_hwm: 82772525
                    cspm_aas_host_top99p: -11073807
                    cspm_aws_host_top99p: 73018907
                    cspm_azure_host_top99p: 40958683
                    cspm_container_avg: 30184404
                    cspm_container_hwm: 10899632
                    cspm_gcp_host_top99p: -81799743
                    cspm_host_top99p: -13198669
                    custom_ts_avg: 25050791
                    cws_container_count_avg: 40094716
                    cws_host_top99p: -77586444
                    date: '2006-07-02T15:31:49.140Z'
                    dbm_host_top99p: 64827589
                    dbm_queries_count_avg: 56874999
                    fargate_tasks_count_avg: -41215703
                    fargate_tasks_count_hwm: 28270526
                    gcp_host_top99p: -51852859
                    heroku_host_top99p: -58762656
                    incident_management_monthly_active_users_hwm: -51356486
                    indexed_events_count_sum: -57394523
                    infra_host_top99p: -24483705
                    ingested_events_bytes_sum: 89498220
                    iot_device_sum: 67076580
                    iot_device_top99p: 86255030
                    mobile_rum_lite_session_count_sum: 29837293
                    mobile_rum_session_count_android_sum: 11125591
                    mobile_rum_session_count_ios_sum: -3606622
                    mobile_rum_session_count_reactnative_sum: 41121102
                    mobile_rum_session_count_sum: 66458462
                    mobile_rum_units_sum: 2059733
                    netflow_indexed_events_count_sum: 5644450
                    npm_host_top99p: 41789614
                    observability_pipelines_bytes_processed_sum: -74851327
                    online_archive_events_count_sum: 90954534
                    opentelemetry_apm_host_top99p: -68463655
                    opentelemetry_host_top99p: -17581059
                    orgs:
                      - agent_host_top99p: 8323712
                        apm_azure_app_service_host_top99p: 95892349
                        apm_fargate_count_avg: 67978311
                        apm_host_top99p: 99341133
                        appsec_fargate_count_avg: 51611752
                        audit_logs_lines_indexed_sum: 7129439
                        avg_profiled_fargate_tasks: 59049288
                        aws_host_top99p: 67368518
                        aws_lambda_func_count: 22392748
                        aws_lambda_invocations_sum: -30082966
                        azure_app_service_top99p: 12450014
                        billable_ingested_bytes_sum: -95990537
                        browser_rum_lite_session_count_sum: -89650771
                        browser_rum_replay_session_count_sum: 55292510
                        browser_rum_units_sum: 45626447
                        ci_pipeline_indexed_spans_sum: 31220474
                        ci_test_indexed_spans_sum: 65881529
                        ci_visibility_pipeline_committers_hwm: -99595443
                        ci_visibility_test_committers_hwm: -35319859
                        container_avg: -47934043
                        container_hwm: 95694595
                        cspm_aas_host_top99p: 39588448
                        cspm_aws_host_top99p: 65735229
                        cspm_azure_host_top99p: 47750846
                        cspm_container_avg: 16456511
                        cspm_container_hwm: 11328787
                        cspm_gcp_host_top99p: -83470711
                        cspm_host_top99p: 6854364
                        custom_ts_avg: -85702537
                        cws_container_count_avg: -32729303
                        cws_host_top99p: 22876156
                        dbm_host_top99p_sum: -96461967
                        dbm_queries_avg_sum: -20918553
                        fargate_tasks_count_avg: 94328078
                        fargate_tasks_count_hwm: 92740787
                        gcp_host_top99p: -39721436
                        heroku_host_top99p: 22499737
                        id: dolo
                        incident_management_monthly_active_users_hwm: -4048419
                        indexed_events_count_sum: 24714561
                        infra_host_top99p: 50230272
                        ingested_events_bytes_sum: -45402137
                        iot_device_agg_sum: 87997474
                        iot_device_top99p_sum: 97328674
                        mobile_rum_lite_session_count_sum: -19176721
                        mobile_rum_session_count_android_sum: 35448834
                        mobile_rum_session_count_ios_sum: -96317315
                        mobile_rum_session_count_reactnative_sum: -41708549
                        mobile_rum_session_count_sum: 16884715
                        mobile_rum_units_sum: 55217944
                        name: 'eiusmod '
                        netflow_indexed_events_count_sum: -61963863
                        npm_host_top99p: 73066890
                        observability_pipelines_bytes_processed_sum: 95469816
                        online_archive_events_count_sum: 80089363
                        opentelemetry_apm_host_top99p: -23699172
                        opentelemetry_host_top99p: 53684404
                        profiling_host_top99p: -66683175
                        public_id: eu irure qui mol
                        region: do Duis
                        rum_browser_and_mobile_session_count: 90652802
                        rum_session_count_sum: 34214880
                        rum_total_session_count_sum: -75607886
                        rum_units_sum: 43750801
                        sds_apm_scanned_bytes_sum: 75746552
                        sds_events_scanned_bytes_sum: 39394530
                        sds_logs_scanned_bytes_sum: -87638992
                        sds_rum_scanned_bytes_sum: 62121404
                        sds_total_scanned_bytes_sum: 49654277
                        synthetics_browser_check_calls_count_sum: -51550280
                        synthetics_check_calls_count_sum: -98369347
                        trace_search_indexed_events_count_sum: 65750242
                        twol_ingested_events_bytes_sum: -1043750
                        vsphere_host_top99p: 41511404
                      - agent_host_top99p: 86561115
                        apm_azure_app_service_host_top99p: -27819372
                        apm_fargate_count_avg: -47804110
                        apm_host_top99p: -53097409
                        appsec_fargate_count_avg: 5484832
                        audit_logs_lines_indexed_sum: 27653277
                        avg_profiled_fargate_tasks: -66839440
                        aws_host_top99p: -21096170
                        aws_lambda_func_count: 13279117
                        aws_lambda_invocations_sum: 13315074
                        azure_app_service_top99p: -31913459
                        billable_ingested_bytes_sum: 83348897
                        browser_rum_lite_session_count_sum: -90339872
                        browser_rum_replay_session_count_sum: 51360397
                        browser_rum_units_sum: 36921845
                        ci_pipeline_indexed_spans_sum: 72940997
                        ci_test_indexed_spans_sum: -53089951
                        ci_visibility_pipeline_committers_hwm: 11079412
                        ci_visibility_test_committers_hwm: 6542378
                        container_avg: 26298727
                        container_hwm: 56767684
                        cspm_aas_host_top99p: -62873917
                        cspm_aws_host_top99p: 80643681
                        cspm_azure_host_top99p: -76181233
                        cspm_container_avg: -6290577
                        cspm_container_hwm: 16229906
                        cspm_gcp_host_top99p: -64764941
                        cspm_host_top99p: 75804060
                        custom_ts_avg: -55361597
                        cws_container_count_avg: 22979664
                        cws_host_top99p: 5050826
                        dbm_host_top99p_sum: -51310925
                        dbm_queries_avg_sum: -2372312
                        fargate_tasks_count_avg: 45374480
                        fargate_tasks_count_hwm: -95106051
                        gcp_host_top99p: -68919044
                        heroku_host_top99p: -83768293
                        id: ''
                        incident_management_monthly_active_users_hwm: -43355094
                        indexed_events_count_sum: 40953216
                        infra_host_top99p: 4867931
                        ingested_events_bytes_sum: 34055579
                        iot_device_agg_sum: 51465658
                        iot_device_top99p_sum: 63889054
                        mobile_rum_lite_session_count_sum: 1150687
                        mobile_rum_session_count_android_sum: 46275661
                        mobile_rum_session_count_ios_sum: 46255084
                        mobile_rum_session_count_reactnative_sum: 35709215
                        mobile_rum_session_count_sum: 10771281
                        mobile_rum_units_sum: 10754763
                        name: ullamco eiusmod non
                        netflow_indexed_events_count_sum: -646024
                        npm_host_top99p: -13311302
                        observability_pipelines_bytes_processed_sum: -32363221
                        online_archive_events_count_sum: 54127084
                        opentelemetry_apm_host_top99p: 50676456
                        opentelemetry_host_top99p: -18856919
                        profiling_host_top99p: -60317065
                        public_id: veni
                        region: fugiat
                        rum_browser_and_mobile_session_count: -92429344
                        rum_session_count_sum: 23546807
                        rum_total_session_count_sum: -36225809
                        rum_units_sum: 77236440
                        sds_apm_scanned_bytes_sum: -86946707
                        sds_events_scanned_bytes_sum: 63907179
                        sds_logs_scanned_bytes_sum: 20643062
                        sds_rum_scanned_bytes_sum: -13225623
                        sds_total_scanned_bytes_sum: 56363876
                        synthetics_browser_check_calls_count_sum: 11613734
                        synthetics_check_calls_count_sum: 44432604
                        trace_search_indexed_events_count_sum: -7925965
                        twol_ingested_events_bytes_sum: 88708416
                        vsphere_host_top99p: 30196504
                    profiling_host_top99p: 64310542
                    rum_browser_and_mobile_session_count: 20963947
                    rum_session_count_sum: -84874044
                    rum_total_session_count_sum: 35609559
                    rum_units_sum: -53873914
                    sds_apm_scanned_bytes_sum: -94451276
                    sds_events_scanned_bytes_sum: 28636485
                    sds_logs_scanned_bytes_sum: -23212939
                    sds_rum_scanned_bytes_sum: 26500312
                    sds_total_scanned_bytes_sum: -75001859
                    synthetics_browser_check_calls_count_sum: -6474153
                    synthetics_check_calls_count_sum: -95900197
                    trace_search_indexed_events_count_sum: 85585083
                    twol_ingested_events_bytes_sum: -91315014
                    vsphere_host_top99p: 94688617
                  - agent_host_top99p: -31208011
                    apm_azure_app_service_host_top99p: -64239728
                    apm_fargate_count_avg: 37580853
                    apm_host_top99p: 75605340
                    appsec_fargate_count_avg: 37541356
                    audit_logs_lines_indexed_sum: -40303726
                    avg_profiled_fargate_tasks: -64118181
                    aws_host_top99p: 24531742
                    aws_lambda_func_count: 42482620
                    aws_lambda_invocations_sum: -18189038
                    azure_app_service_top99p: -56081725
                    billable_ingested_bytes_sum: 17878232
                    browser_rum_lite_session_count_sum: 57454249
                    browser_rum_replay_session_count_sum: 5102999
                    browser_rum_units_sum: 84572144
                    ci_pipeline_indexed_spans_sum: -77045202
                    ci_test_indexed_spans_sum: 82053807
                    ci_visibility_pipeline_committers_hwm: -29311527
                    ci_visibility_test_committers_hwm: 24816800
                    container_avg: -8609497
                    container_hwm: -10246280
                    cspm_aas_host_top99p: 96892655
                    cspm_aws_host_top99p: -68782489
                    cspm_azure_host_top99p: -84159733
                    cspm_container_avg: -87732950
                    cspm_container_hwm: 27558723
                    cspm_gcp_host_top99p: 31692406
                    cspm_host_top99p: -13037141
                    custom_ts_avg: -26690318
                    cws_container_count_avg: -68013946
                    cws_host_top99p: 40828402
                    date: '2014-01-03T13:17:00.908Z'
                    dbm_host_top99p: 44647823
                    dbm_queries_count_avg: -21569886
                    fargate_tasks_count_avg: 65242085
                    fargate_tasks_count_hwm: 24507278
                    gcp_host_top99p: 4673432
                    heroku_host_top99p: 59326015
                    incident_management_monthly_active_users_hwm: -83157599
                    indexed_events_count_sum: -52427875
                    infra_host_top99p: 3931983
                    ingested_events_bytes_sum: 15467698
                    iot_device_sum: 1896774
                    iot_device_top99p: -69980321
                    mobile_rum_lite_session_count_sum: -38941873
                    mobile_rum_session_count_android_sum: 85898039
                    mobile_rum_session_count_ios_sum: 675658
                    mobile_rum_session_count_reactnative_sum: 47083167
                    mobile_rum_session_count_sum: -39553440
                    mobile_rum_units_sum: 82016829
                    netflow_indexed_events_count_sum: -6262821
                    npm_host_top99p: 58742146
                    observability_pipelines_bytes_processed_sum: 9873547
                    online_archive_events_count_sum: -76286578
                    opentelemetry_apm_host_top99p: 86173083
                    opentelemetry_host_top99p: 96991975
                    orgs:
                      - agent_host_top99p: -66661347
                        apm_azure_app_service_host_top99p: -11007962
                        apm_fargate_count_avg: -82693458
                        apm_host_top99p: -76436774
                        appsec_fargate_count_avg: 33117089
                        audit_logs_lines_indexed_sum: -14382805
                        avg_profiled_fargate_tasks: 28844365
                        aws_host_top99p: -54276077
                        aws_lambda_func_count: 31648515
                        aws_lambda_invocations_sum: -5930205
                        azure_app_service_top99p: -79653132
                        billable_ingested_bytes_sum: -6584974
                        browser_rum_lite_session_count_sum: 264266
                        browser_rum_replay_session_count_sum: -62133651
                        browser_rum_units_sum: -1405000
                        ci_pipeline_indexed_spans_sum: -74578713
                        ci_test_indexed_spans_sum: -39896939
                        ci_visibility_pipeline_committers_hwm: 19472471
                        ci_visibility_test_committers_hwm: 8255464
                        container_avg: -29352180
                        container_hwm: 53297279
                        cspm_aas_host_top99p: -27040108
                        cspm_aws_host_top99p: 32467854
                        cspm_azure_host_top99p: -66986251
                        cspm_container_avg: -63192625
                        cspm_container_hwm: -18547922
                        cspm_gcp_host_top99p: 59614886
                        cspm_host_top99p: -87887674
                        custom_ts_avg: 55752652
                        cws_container_count_avg: 90341890
                        cws_host_top99p: 352535
                        dbm_host_top99p_sum: -60444841
                        dbm_queries_avg_sum: -14476654
                        fargate_tasks_count_avg: -21512780
                        fargate_tasks_count_hwm: -72559936
                        gcp_host_top99p: 28571547
                        heroku_host_top99p: -21205620
                        id: anim culpa in eiusmod voluptate
                        incident_management_monthly_active_users_hwm: 86789616
                        indexed_events_count_sum: 69404488
                        infra_host_top99p: -86350936
                        ingested_events_bytes_sum: -61609290
                        iot_device_agg_sum: -33992437
                        iot_device_top99p_sum: -85281462
                        mobile_rum_lite_session_count_sum: -461872
                        mobile_rum_session_count_android_sum: 83342216
                        mobile_rum_session_count_ios_sum: -29802965
                        mobile_rum_session_count_reactnative_sum: -66606112
                        mobile_rum_session_count_sum: -83680157
                        mobile_rum_units_sum: 90927274
                        name: sunt eu dolor incididunt
                        netflow_indexed_events_count_sum: 90755500
                        npm_host_top99p: -46278473
                        observability_pipelines_bytes_processed_sum: -28258601
                        online_archive_events_count_sum: -65511872
                        opentelemetry_apm_host_top99p: 17487699
                        opentelemetry_host_top99p: 84507848
                        profiling_host_top99p: -10667578
                        public_id: cillum laborum
                        region: qui sint
                        rum_browser_and_mobile_session_count: -93695224
                        rum_session_count_sum: -70742138
                        rum_total_session_count_sum: 58475041
                        rum_units_sum: -74432539
                        sds_apm_scanned_bytes_sum: -48831056
                        sds_events_scanned_bytes_sum: -8444337
                        sds_logs_scanned_bytes_sum: 940943
                        sds_rum_scanned_bytes_sum: 77780302
                        sds_total_scanned_bytes_sum: 45971030
                        synthetics_browser_check_calls_count_sum: -33306655
                        synthetics_check_calls_count_sum: 56371869
                        trace_search_indexed_events_count_sum: -25979127
                        twol_ingested_events_bytes_sum: -28521104
                        vsphere_host_top99p: 57819162
                      - agent_host_top99p: 17565742
                        apm_azure_app_service_host_top99p: -93836161
                        apm_fargate_count_avg: -78410111
                        apm_host_top99p: -13789163
                        appsec_fargate_count_avg: -73939277
                        audit_logs_lines_indexed_sum: -24714234
                        avg_profiled_fargate_tasks: -79012251
                        aws_host_top99p: -75840548
                        aws_lambda_func_count: -70874095
                        aws_lambda_invocations_sum: 16382745
                        azure_app_service_top99p: -73159309
                        billable_ingested_bytes_sum: -22761543
                        browser_rum_lite_session_count_sum: -5471055
                        browser_rum_replay_session_count_sum: 47943289
                        browser_rum_units_sum: -61397105
                        ci_pipeline_indexed_spans_sum: 6253521
                        ci_test_indexed_spans_sum: 35576253
                        ci_visibility_pipeline_committers_hwm: -70211872
                        ci_visibility_test_committers_hwm: 69001556
                        container_avg: 9115014
                        container_hwm: 75006045
                        cspm_aas_host_top99p: 67495250
                        cspm_aws_host_top99p: -86318486
                        cspm_azure_host_top99p: -75425465
                        cspm_container_avg: 67298377
                        cspm_container_hwm: 57325951
                        cspm_gcp_host_top99p: -24119417
                        cspm_host_top99p: 11139703
                        custom_ts_avg: -40669741
                        cws_container_count_avg: 85424047
                        cws_host_top99p: 81090706
                        dbm_host_top99p_sum: 19040263
                        dbm_queries_avg_sum: 4045250
                        fargate_tasks_count_avg: -49822920
                        fargate_tasks_count_hwm: -95367641
                        gcp_host_top99p: 28113836
                        heroku_host_top99p: -2194979
                        id: commodo deserunt anim
                        incident_management_monthly_active_users_hwm: -2090475
                        indexed_events_count_sum: -16048964
                        infra_host_top99p: 43941126
                        ingested_events_bytes_sum: 42401923
                        iot_device_agg_sum: 60784512
                        iot_device_top99p_sum: -11236415
                        mobile_rum_lite_session_count_sum: 83481245
                        mobile_rum_session_count_android_sum: 31360247
                        mobile_rum_session_count_ios_sum: 53505242
                        mobile_rum_session_count_reactnative_sum: 71221055
                        mobile_rum_session_count_sum: 91356280
                        mobile_rum_units_sum: -73370598
                        name: amet incididunt velit la
                        netflow_indexed_events_count_sum: 90883465
                        npm_host_top99p: 51952109
                        observability_pipelines_bytes_processed_sum: 25595017
                        online_archive_events_count_sum: -55545249
                        opentelemetry_apm_host_top99p: -21239996
                        opentelemetry_host_top99p: -56709816
                        profiling_host_top99p: 22051922
                        public_id: ut aliqua
                        region: non ea in veniam
                        rum_browser_and_mobile_session_count: 32454899
                        rum_session_count_sum: 62911555
                        rum_total_session_count_sum: -42675827
                        rum_units_sum: 66668308
                        sds_apm_scanned_bytes_sum: 8338722
                        sds_events_scanned_bytes_sum: -99051577
                        sds_logs_scanned_bytes_sum: 22004299
                        sds_rum_scanned_bytes_sum: 50563189
                        sds_total_scanned_bytes_sum: 30392836
                        synthetics_browser_check_calls_count_sum: 14313926
                        synthetics_check_calls_count_sum: -75448721
                        trace_search_indexed_events_count_sum: 16099599
                        twol_ingested_events_bytes_sum: -29168655
                        vsphere_host_top99p: -26652059
                    profiling_host_top99p: 76743359
                    rum_browser_and_mobile_session_count: -70167490
                    rum_session_count_sum: 59290493
                    rum_total_session_count_sum: -84491304
                    rum_units_sum: 88319704
                    sds_apm_scanned_bytes_sum: -2377416
                    sds_events_scanned_bytes_sum: 99685835
                    sds_logs_scanned_bytes_sum: -85137214
                    sds_rum_scanned_bytes_sum: -94875929
                    sds_total_scanned_bytes_sum: -28276827
                    synthetics_browser_check_calls_count_sum: -31602389
                    synthetics_check_calls_count_sum: -85213966
                    trace_search_indexed_events_count_sum: 68476272
                    twol_ingested_events_bytes_sum: -54502901
                    vsphere_host_top99p: 2649376
                vsphere_host_top99p_sum: -25148277
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/usage/synthetics_api:
    get:
      tags:
        - Usage Metering
      summary: Get hourly usage for synthetics API checks
      description: >-
        Get hourly usage for [synthetics API
        checks](https://docs.datadoghq.com/synthetics/).

        **Note:** hourly usage data for all products is now available in the
        [Get hourly usage by product family
        API](https://docs.datadoghq.com/api/latest/usage-metering/#get-hourly-usage-by-product-family).
        Refer to [Migrating from the V1 Hourly Usage APIs to
        V2](https://docs.datadoghq.com/account_management/guide/hourly-usage-migration/)
        for the associated migration guide.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json;datetime-format=rfc3339
        - name: start_hr
          in: query
          schema:
            type: string
          description: >-
            (Required) Datetime in ISO-8601 format, UTC, precise to hour:
            [YYYY-MM-DDThh] for usage beginning at this hour.
          example: '1971-02-27T12:47:34.135Z'
        - name: end_hr
          in: query
          schema:
            type: string
          description: >-
            Datetime in ISO-8601 format, UTC, precise to hour: [YYYY-MM-DDThh]
            for usage ending **before** this hour.
          example: '1971-02-27T12:47:34.135Z'
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                usage:
                  - check_calls_count: 49660401
                    hour: '1964-05-25T13:34:19.149Z'
                    org_name: dolore ea eu consec
                    public_id: non irure
                  - check_calls_count: -30221913
                    hour: '1994-09-22T13:07:28.466Z'
                    org_name: culpa deserunt ut veniam fugiat
                    public_id: Duis culpa
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/usage/synthetics_browser:
    get:
      tags:
        - Usage Metering
      summary: Get hourly usage for synthetics browser checks
      description: >-
        Get hourly usage for synthetics browser checks.

        **Note:** hourly usage data for all products is now available in the
        [Get hourly usage by product family
        API](https://docs.datadoghq.com/api/latest/usage-metering/#get-hourly-usage-by-product-family).
        Refer to [Migrating from the V1 Hourly Usage APIs to
        V2](https://docs.datadoghq.com/account_management/guide/hourly-usage-migration/)
        for the associated migration guide.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json;datetime-format=rfc3339
        - name: start_hr
          in: query
          schema:
            type: string
          description: >-
            (Required) Datetime in ISO-8601 format, UTC, precise to hour:
            [YYYY-MM-DDThh] for usage beginning at this hour.
          example: '1971-02-27T12:47:34.135Z'
        - name: end_hr
          in: query
          schema:
            type: string
          description: >-
            Datetime in ISO-8601 format, UTC, precise to hour: [YYYY-MM-DDThh]
            for usage ending **before** this hour.
          example: '1971-02-27T12:47:34.135Z'
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                usage:
                  - browser_check_calls_count: 67564157
                    hour: '1971-08-23T00:00:20.377Z'
                    org_name: eiusmod Ut laborum cillum
                    public_id: commodo Excepteur elit et
                  - browser_check_calls_count: -31077004
                    hour: '1952-09-17T09:59:27.818Z'
                    org_name: i
                    public_id: pr
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/usage/timeseries:
    get:
      tags:
        - Usage Metering
      summary: Get hourly usage for custom metrics
      description: >-
        Get hourly usage for [custom
        metrics](https://docs.datadoghq.com/developers/metrics/custom_metrics/).

        **Note:** hourly usage data for all products is now available in the
        [Get hourly usage by product family
        API](https://docs.datadoghq.com/api/latest/usage-metering/#get-hourly-usage-by-product-family).
        Refer to [Migrating from the V1 Hourly Usage APIs to
        V2](https://docs.datadoghq.com/account_management/guide/hourly-usage-migration/)
        for the associated migration guide.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json;datetime-format=rfc3339
        - name: start_hr
          in: query
          schema:
            type: string
          description: >-
            (Required) Datetime in ISO-8601 format, UTC, precise to hour:
            [YYYY-MM-DDThh] for usage beginning at this hour.
          example: '1971-02-27T12:47:34.135Z'
        - name: end_hr
          in: query
          schema:
            type: string
          description: >-
            Datetime in ISO-8601 format, UTC, precise to hour: [YYYY-MM-DDThh]
            for usage ending **before** this hour.
          example: '1971-02-27T12:47:34.135Z'
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                usage:
                  - hour: '1971-07-10T08:10:10.301Z'
                    num_custom_input_timeseries: -56530030
                    num_custom_output_timeseries: 38872097
                    num_custom_timeseries: 16864962
                    org_name: pariatur laboris do cupidatat
                    public_id: in mollit incididunt consectetur magna
                  - hour: '1997-12-15T14:52:35.084Z'
                    num_custom_input_timeseries: 62442472
                    num_custom_output_timeseries: -58134162
                    num_custom_timeseries: 54571700
                    org_name: cillum eu
                    public_id: ex dolor consequat laborum deserunt
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/usage/top_avg_metrics:
    get:
      tags:
        - Usage Metering
      summary: Get all custom metrics by hourly average
      description: >-
        Get all [custom
        metrics](https://docs.datadoghq.com/developers/metrics/custom_metrics/)
        by hourly average. Use the month parameter to get a month-to-date data
        resolution or use the day parameter to get a daily resolution. One of
        the two is required, and only one of the two is allowed.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json;datetime-format=rfc3339
        - name: month
          in: query
          schema:
            type: string
          description: >-
            Datetime in ISO-8601 format, UTC, precise to month: [YYYY-MM] for
            usage beginning at this hour. (Either month or day should be
            specified, but not both)
          example: '1971-02-27T12:47:34.135Z'
        - name: day
          in: query
          schema:
            type: string
          description: >-
            Datetime in ISO-8601 format, UTC, precise to day: [YYYY-MM-DD] for
            usage beginning at this hour. (Either month or day should be
            specified, but not both)
          example: '1971-02-27T12:47:34.135Z'
        - name: names
          in: query
          schema:
            type: string
          description: Comma-separated list of metric names.
          example: anim et
        - name: limit
          in: query
          schema:
            type: integer
          description: >-
            Maximum number of results to return (between 1 and 5000) - defaults
            to 500 results if limit not specified.
          example: '500'
        - name: next_record_id
          in: query
          schema:
            type: string
          description: >-
            List following results with a next_record_id provided in the
            previous query.
          example: proident
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                metadata:
                  day: '1956-08-20T15:11:49.002Z'
                  month: '2018-04-01T15:33:47.623Z'
                  pagination:
                    limit: -24533438
                    next_record_id: Lorem consequat sunt
                    total_number_of_records: -48643711
                usage:
                  - avg_metric_hour: -10600961
                    max_metric_hour: 5255070
                    metric_category: standard
                    metric_name: reprehenderit mollit pariatur magna
                  - avg_metric_hour: 49551627
                    max_metric_hour: -19747598
                    metric_category: standard
                    metric_name: dolor
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v2/usage/hourly_usage:
    get:
      tags:
        - Usage Metering
      summary: Get hourly usage by product family
      description: Get hourly usage by product family.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json;datetime-format=rfc3339
        - name: filter[timestamp][start]
          in: query
          schema:
            type: string
          description: >-
            (Required) Datetime in ISO-8601 format, UTC, precise to hour:
            [YYYY-MM-DDThh] for usage beginning at this hour.
          example: <dateTime>
        - name: filter[timestamp][end]
          in: query
          schema:
            type: string
          description: >-
            Datetime in ISO-8601 format, UTC, precise to hour: [YYYY-MM-DDThh]
            for usage ending **before** this hour.
          example: <dateTime>
        - name: filter[product_families]
          in: query
          schema:
            type: string
          description: >-
            (Required) Comma separated list of product families to retrieve.
            Available families are `all`, `analyzed_logs`,

            `application_security`, `audit_logs`, `serverless`, `ci_app`,
            `cspm`, `custom_events`, `cws`, `dbm`, `fargate`,

            `infra_hosts`, `incident_management`, `indexed_logs`,
            `indexed_spans`, `ingested_spans`, `iot`,

            `lambda_traced_invocations`, `logs`, `network_flows`,
            `network_hosts`, `observability_pipelines`,

            `online_archive`, `profiling`, `rum`, `rum_browser_sessions`,
            `rum_mobile_sessions`, `sds`, `snmp`,

            `synthetics_api`, `synthetics_browser`, and `timeseries`.
          example: <string>
        - name: filter[include_descendants]
          in: query
          schema:
            type: boolean
          description: Include child org usage in the response. Defaults to false.
          example: 'false'
        - name: filter[versions]
          in: query
          schema:
            type: string
          description: >-
            Comma separated list of product family versions to use in the format
            `product_family:version`. For example,

            `infra_hosts:1.0.0`. If this parameter is not used, the API will use
            the latest version of each requested

            product family. Currently all families have one version `1.0.0`.
          example: <string>
        - name: page[limit]
          in: query
          schema:
            type: integer
          description: >-
            Maximum number of results to return (between 1 and 500) - defaults
            to 500 if limit not specified.
          example: '500'
        - name: page[next_record_id]
          in: query
          schema:
            type: string
          description: >-
            List following results with a next_record_id provided in the
            previous query.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - attributes:
                      measurements:
                        - usage_type: amet cupidatat
                          value: -58938550
                        - usage_type: nisi eu Lorem occaecat dolor
                          value: 8721150
                      org_name: consectetur reprehenderit in non eu
                      product_family: occaecat sunt
                      public_id: aute fugiat proident
                      region: nostrud fugiat
                      timestamp: '2016-06-16T16:01:35.002Z'
                    id: Duis anim
                    type: usage_timeseries
                  - attributes:
                      measurements:
                        - usage_type: officia voluptate
                          value: -99904184
                        - usage_type: aute dolor nulla
                          value: 77627486
                      org_name: incididunt fugiat consequat laborum
                      product_family: dolor
                      public_id: commodo tempor
                      region: mollit esse cupidatat
                      timestamp: '2004-01-06T20:47:23.661Z'
                    id: aute voluptate
                    type: usage_timeseries
                meta:
                  pagination:
                    next_record_id: aute Excepteur culpa dolor nulla
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v2/usage/historical_cost:
    get:
      tags:
        - Usage Metering
      summary: Get historical cost across your account
      description: >-
        Get historical cost across multi-org and single root-org accounts.

        Cost data for a given month becomes available no later than the 16th of
        the following month.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json;datetime-format=rfc3339
        - name: view
          in: query
          schema:
            type: string
          description: >-
            String to specify whether cost is broken down at a parent-org level
            or at the sub-org level. Available views are `summary` and
            `sub-org`.  Defaults to `summary`.
          example: <string>
        - name: start_month
          in: query
          schema:
            type: string
          description: >-
            (Required) Datetime in ISO-8601 format, UTC, precise to month:
            `[YYYY-MM]` for cost beginning this month.
          example: <dateTime>
        - name: end_month
          in: query
          schema:
            type: string
          description: >-
            Datetime in ISO-8601 format, UTC, precise to month: `[YYYY-MM]` for
            cost ending this month.
          example: <dateTime>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - attributes:
                      charges:
                        - charge_type: on_demand
                          cost: 91871217.43366319
                          product_name: infra_host
                        - charge_type: on_demand
                          cost: -40390469.24816194
                          product_name: infra_host
                      date: '2017-01-24T20:16:23.864Z'
                      org_name: aute officia dolor sint
                      public_id: consectetur exercitation cupi
                      total_cost: -36364498.694783844
                    id: mollit non
                    type: cost_by_org
                  - attributes:
                      charges:
                        - charge_type: on_demand
                          cost: -21809701.59762144
                          product_name: infra_host
                        - charge_type: on_demand
                          cost: -20526406.15457104
                          product_name: infra_host
                      date: '2018-06-06T10:36:59.987Z'
                      org_name: nisi
                      public_id: exercitation mollit in incididunt dolor
                      total_cost: 95711306.22254914
                    id: enim eiusmod magna
                    type: cost_by_org
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v2/usage/estimated_cost:
    get:
      tags:
        - Usage Metering
      summary: Get estimated cost across your account
      description: >-
        Get estimated cost across multi-org and single root-org accounts.

        Estimated cost data is only available for the current month and previous
        month

        and is delayed by up to 72 hours from when it was incurred.

        To access historical costs prior to this, use the `/historical_cost`
        endpoint.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json;datetime-format=rfc3339
        - name: view
          in: query
          schema:
            type: string
          description: >-
            String to specify whether cost is broken down at a parent-org level
            or at the sub-org level. Available views are `summary` and
            `sub-org`. Defaults to `summary`.
          example: <string>
        - name: start_month
          in: query
          schema:
            type: string
          description: >-
            Datetime in ISO-8601 format, UTC, precise to month: `[YYYY-MM]` for
            cost beginning this month. Either start_month or start_date should
            be specified, but not both. (start_month cannot go beyond two months
            in the past)
          example: <dateTime>
        - name: end_month
          in: query
          schema:
            type: string
          description: >-
            Datetime in ISO-8601 format, UTC, precise to month: `[YYYY-MM]` for
            cost ending this month.
          example: <dateTime>
        - name: start_date
          in: query
          schema:
            type: string
          description: >-
            Datetime in ISO-8601 format, UTC, precise to day: `[YYYY-MM-DD]` for
            cost beginning this day. Either start_month or start_date should be
            specified, but not both. (start_date cannot go beyond two months in
            the past)
          example: <dateTime>
        - name: end_date
          in: query
          schema:
            type: string
          description: >-
            Datetime in ISO-8601 format, UTC, precise to day: `[YYYY-MM-DD]` for
            cost ending this day.
          example: <dateTime>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - attributes:
                      charges:
                        - charge_type: on_demand
                          cost: 91871217.43366319
                          product_name: infra_host
                        - charge_type: on_demand
                          cost: -40390469.24816194
                          product_name: infra_host
                      date: '2017-01-24T20:16:23.864Z'
                      org_name: aute officia dolor sint
                      public_id: consectetur exercitation cupi
                      total_cost: -36364498.694783844
                    id: mollit non
                    type: cost_by_org
                  - attributes:
                      charges:
                        - charge_type: on_demand
                          cost: -21809701.59762144
                          product_name: infra_host
                        - charge_type: on_demand
                          cost: -20526406.15457104
                          product_name: infra_host
                      date: '2018-06-06T10:36:59.987Z'
                      org_name: nisi
                      public_id: exercitation mollit in incididunt dolor
                      total_cost: 95711306.22254914
                    id: enim eiusmod magna
                    type: cost_by_org
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v2/usage/lambda_traced_invocations:
    get:
      tags:
        - Usage Metering
      summary: Get hourly usage for lambda traced invocations
      description: >-
        Get hourly usage for lambda traced invocations.

        **Note:** hourly usage data for all products is now available in the
        [Get hourly usage by product family
        API](https://docs.datadoghq.com/api/latest/usage-metering/#get-hourly-usage-by-product-family)
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json;datetime-format=rfc3339
        - name: start_hr
          in: query
          schema:
            type: string
          description: >-
            (Required) Datetime in ISO-8601 format, UTC, precise to hour:
            `[YYYY-MM-DDThh]` for usage beginning at this hour.
          example: <dateTime>
        - name: end_hr
          in: query
          schema:
            type: string
          description: >-
            Datetime in ISO-8601 format, UTC, precise to hour: `[YYYY-MM-DDThh]`
            for usage ending

            **before** this hour.
          example: <dateTime>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - attributes:
                      org_name: consequat aliqua
                      product_family: sed veni
                      public_id: do esse eu
                      timeseries:
                        - timestamp: '1953-11-30T01:15:16.347Z'
                          value: 56022159
                        - timestamp: '2007-06-19T11:39:50.493Z'
                          value: -61111728
                      usage_type: observability_pipelines_bytes_processed
                    id: aute exercitation fugiat et
                    type: usage_timeseries
                  - attributes:
                      org_name: pariatur et
                      product_family: consequat fugiat laborum
                      public_id: dolore exercitation
                      timeseries:
                        - timestamp: '1950-08-16T10:52:35.644Z'
                          value: -99784571
                        - timestamp: '1955-09-11T22:15:22.368Z'
                          value: 80274514
                      usage_type: observability_pipelines_bytes_processed
                    id: laborum esse sint mollit
                    type: usage_timeseries
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v2/usage/application_security:
    get:
      tags:
        - Usage Metering
      summary: Get hourly usage for application security
      description: >-
        Get hourly usage for application security .

        **Note:** hourly usage data for all products is now available in the
        [Get hourly usage by product family
        API](https://docs.datadoghq.com/api/latest/usage-metering/#get-hourly-usage-by-product-family)
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json;datetime-format=rfc3339
        - name: start_hr
          in: query
          schema:
            type: string
          description: >-
            (Required) Datetime in ISO-8601 format, UTC, precise to hour:
            `[YYYY-MM-DDThh]` for usage beginning at this hour.
          example: <dateTime>
        - name: end_hr
          in: query
          schema:
            type: string
          description: >-
            Datetime in ISO-8601 format, UTC, precise to hour: `[YYYY-MM-DDThh]`
            for usage ending

            **before** this hour.
          example: <dateTime>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - attributes:
                      org_name: ''
                      product_family: non no
                      public_id: dolore in magna consectetur
                      timeseries:
                        - timestamp: '1948-11-17T22:17:06.786Z'
                          value: 94643368
                        - timestamp: '1969-09-20T07:26:04.229Z'
                          value: -28598575
                      usage_type: observability_pipelines_bytes_processed
                    id: enim ullamco reprehenderit ut
                    type: usage_timeseries
                  - attributes:
                      org_name: Excepteu
                      product_family: ex laboris laborum
                      public_id: ullamco occaecat
                      timeseries:
                        - timestamp: '1951-08-26T15:44:30.080Z'
                          value: 18539375
                        - timestamp: '2000-10-29T20:12:57.794Z'
                          value: -55795142
                      usage_type: observability_pipelines_bytes_processed
                    id: aliqua nulla
                    type: usage_timeseries
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v2/usage/observability_pipelines:
    get:
      tags:
        - Usage Metering
      summary: Get hourly usage for observability pipelines
      description: >-
        Get hourly usage for observability pipelines.

        **Note:** hourly usage data for all products is now available in the
        [Get hourly usage by product family
        API](https://docs.datadoghq.com/api/latest/usage-metering/#get-hourly-usage-by-product-family)
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json;datetime-format=rfc3339
        - name: start_hr
          in: query
          schema:
            type: string
          description: >-
            (Required) Datetime in ISO-8601 format, UTC, precise to hour:
            `[YYYY-MM-DDThh]` for usage beginning at this hour.
          example: <dateTime>
        - name: end_hr
          in: query
          schema:
            type: string
          description: >-
            Datetime in ISO-8601 format, UTC, precise to hour: `[YYYY-MM-DDThh]`
            for usage ending

            **before** this hour.
          example: <dateTime>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - attributes:
                      org_name: sunt id reprehenderit ipsum
                      product_family: 'n'
                      public_id: aute nisi Lorem
                      timeseries:
                        - timestamp: '1980-04-25T10:54:57.953Z'
                          value: -57288079
                        - timestamp: '1982-01-01T07:43:57.940Z'
                          value: -4300638
                      usage_type: observability_pipelines_bytes_processed
                    id: sit
                    type: usage_timeseries
                  - attributes:
                      org_name: labore ad Lorem
                      product_family: laboris nisi voluptate
                      public_id: reprehenderit voluptate
                      timeseries:
                        - timestamp: '1973-02-11T07:09:39.920Z'
                          value: 66687336
                        - timestamp: '1944-02-21T17:45:57.733Z'
                          value: -89736549
                      usage_type: observability_pipelines_bytes_processed
                    id: Excepteur non do labore
                    type: usage_timeseries
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json;datetime-format=rfc3339
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v2/service_accounts:
    post:
      tags:
        - Users
      summary: Create a service account
      description: Create a service account for your organization.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                data:
                  attributes:
                    email: <string>
                    service_account: <boolean>
                    name: <string>
                    title: <string>
                  type: users
                  relationships:
                    roles:
                      data:
                        - id: <string>
                          type: roles
                        - id: <string>
                          type: roles
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '201':
          description: Created
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  attributes:
                    created_at: '1981-05-03T06:00:24.095Z'
                    disabled: false
                    email: adipisicing ea exercitation dolore
                    handle: ut exercitation officia laborum
                    icon: culpa in in minim
                    modified_at: '1993-07-30T12:15:25.992Z'
                    name: quis
                    service_account: true
                    status: nulla nostrud
                    title: aute cupidatat occaecat
                    verified: true
                  id: est laborum
                  relationships:
                    org:
                      data:
                        id: 00000000-0000-beef-0000-000000000000
                        type: orgs
                    other_orgs:
                      data: []
                    other_users:
                      data: []
                    roles:
                      data:
                        - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                          type: roles
                        - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                          type: roles
                  type: users
                included:
                  - type: orgs
                    attributes:
                      created_at: '2010-11-10T21:05:13.429Z'
                      description: dolor cupidatat
                      disabled: true
                      modified_at: '1998-01-10T07:34:52.585Z'
                      name: adipisicing proident commodo
                      public_id: proident amet
                      sharing: fugiat nisi ipsum
                      url: aute magna ipsum id
                    id: aliquip veniam nulla esse
                  - type: orgs
                    attributes:
                      created_at: '1985-09-30T23:58:36.967Z'
                      description: non
                      disabled: true
                      modified_at: '1991-09-25T22:54:02.029Z'
                      name: adipisicing ea cupidatat sed quis
                      public_id: Excepteur consequat
                      sharing: nulla laboris laborum m
                      url: aliquip ad qui
                    id: ex sunt
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v2/users:
    post:
      tags:
        - Users
      summary: Create a user
      description: Create a user for your organization.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                data:
                  attributes:
                    email: <string>
                    name: <string>
                    title: <string>
                  type: users
                  relationships:
                    roles:
                      data:
                        - id: <string>
                          type: roles
                        - id: <string>
                          type: roles
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '201':
          description: Created
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  attributes:
                    created_at: '1981-05-03T06:00:24.095Z'
                    disabled: false
                    email: adipisicing ea exercitation dolore
                    handle: ut exercitation officia laborum
                    icon: culpa in in minim
                    modified_at: '1993-07-30T12:15:25.992Z'
                    name: quis
                    service_account: true
                    status: nulla nostrud
                    title: aute cupidatat occaecat
                    verified: true
                  id: est laborum
                  relationships:
                    org:
                      data:
                        id: 00000000-0000-beef-0000-000000000000
                        type: orgs
                    other_orgs:
                      data: []
                    other_users:
                      data: []
                    roles:
                      data:
                        - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                          type: roles
                        - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                          type: roles
                  type: users
                included:
                  - type: orgs
                    attributes:
                      created_at: '2010-11-10T21:05:13.429Z'
                      description: dolor cupidatat
                      disabled: true
                      modified_at: '1998-01-10T07:34:52.585Z'
                      name: adipisicing proident commodo
                      public_id: proident amet
                      sharing: fugiat nisi ipsum
                      url: aute magna ipsum id
                    id: aliquip veniam nulla esse
                  - type: orgs
                    attributes:
                      created_at: '1985-09-30T23:58:36.967Z'
                      description: non
                      disabled: true
                      modified_at: '1991-09-25T22:54:02.029Z'
                      name: adipisicing ea cupidatat sed quis
                      public_id: Excepteur consequat
                      sharing: nulla laboris laborum m
                      url: aliquip ad qui
                    id: ex sunt
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    get:
      tags:
        - Users
      summary: List all users
      description: |-
        Get the list of all users in the organization. This list includes
        all users even if they are deactivated or unverified.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: page[size]
          in: query
          schema:
            type: integer
          description: Size for a given page.
          example: '10'
        - name: page[number]
          in: query
          schema:
            type: integer
          description: Specific page number to return.
          example: '0'
        - name: sort
          in: query
          schema:
            type: string
          description: >-
            User attribute to order results by. Sort order is ascending by
            default.

            Sort order is descending if the field

            is prefixed by a negative sign, for example `sort=-name`. Options:
            `name`,

            `modified_at`, `user_count`.
          example: name
        - name: sort_dir
          in: query
          schema:
            type: string
          description: 'Direction of sort. Options: `asc`, `desc`.'
          example: desc
        - name: filter
          in: query
          schema:
            type: string
          description: Filter all users by the given string. Defaults to no filtering.
          example: <string>
        - name: filter[status]
          in: query
          schema:
            type: string
          description: >-
            Filter on status attribute.

            Comma separated list, with possible values `Active`, `Pending`, and
            `Disabled`.

            Defaults to no filtering.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - attributes:
                      created_at: '1988-07-21T00:01:31.901Z'
                      disabled: true
                      email: cupidatat adipisicing
                      handle: occaecat id ut
                      icon: incididunt ullamco consectetur
                      modified_at: '2009-08-26T20:53:22.995Z'
                      name: aute sint
                      service_account: false
                      status: mollit laborum adipisicing ullamco laboris
                      title: culpa Ut cillum sed
                      verified: false
                    id: deserunt
                    relationships:
                      org:
                        data:
                          id: 00000000-0000-beef-0000-000000000000
                          type: orgs
                      other_orgs:
                        data: []
                      other_users:
                        data: []
                      roles:
                        data:
                          - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                            type: roles
                          - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                            type: roles
                    type: users
                  - attributes:
                      created_at: '1984-05-23T20:00:43.014Z'
                      disabled: false
                      email: ''
                      handle: commodo adipisicing in ea
                      icon: et nostrud ex exercitation
                      modified_at: '1960-12-10T23:29:28.231Z'
                      name: Lorem commodo
                      service_account: false
                      status: nulla quis exercitation
                      title: consequat nostrud ut cillum do
                      verified: false
                    id: nisi laborum minim dolor
                    relationships:
                      org:
                        data:
                          id: 00000000-0000-beef-0000-000000000000
                          type: orgs
                      other_orgs:
                        data: []
                      other_users:
                        data: []
                      roles:
                        data:
                          - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                            type: roles
                          - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                            type: roles
                    type: users
                included:
                  - type: orgs
                    attributes:
                      created_at: '1997-07-08T20:40:17.971Z'
                      description: ea sint nulla id
                      disabled: false
                      modified_at: '2012-03-13T00:44:26.382Z'
                      name: Lorem magna tempor
                      public_id: Ut veniam pariatur exercitation
                      sharing: quis
                      url: id
                    id: dolor ut labore Duis
                  - type: orgs
                    attributes:
                      created_at: '1967-11-04T05:34:07.014Z'
                      description: quis consequat
                      disabled: false
                      modified_at: '1966-11-09T05:59:40.254Z'
                      name: cupidatat cillum enim
                      public_id: qui consectetur sed
                      sharing: proident nostrud esse nulla
                      url: quis proident et
                    id: sunt cillum est anim dolor
                meta:
                  page:
                    total_count: 70674740
                    total_filtered_count: 18750352
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v2/users/{user_id}:
    get:
      tags:
        - Users
      summary: Get user details
      description: Get a user in the organization specified by the user’s `user_id`.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: user_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the user.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  attributes:
                    created_at: '1981-05-03T06:00:24.095Z'
                    disabled: false
                    email: adipisicing ea exercitation dolore
                    handle: ut exercitation officia laborum
                    icon: culpa in in minim
                    modified_at: '1993-07-30T12:15:25.992Z'
                    name: quis
                    service_account: true
                    status: nulla nostrud
                    title: aute cupidatat occaecat
                    verified: true
                  id: est laborum
                  relationships:
                    org:
                      data:
                        id: 00000000-0000-beef-0000-000000000000
                        type: orgs
                    other_orgs:
                      data: []
                    other_users:
                      data: []
                    roles:
                      data:
                        - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                          type: roles
                        - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                          type: roles
                  type: users
                included:
                  - type: orgs
                    attributes:
                      created_at: '2010-11-10T21:05:13.429Z'
                      description: dolor cupidatat
                      disabled: true
                      modified_at: '1998-01-10T07:34:52.585Z'
                      name: adipisicing proident commodo
                      public_id: proident amet
                      sharing: fugiat nisi ipsum
                      url: aute magna ipsum id
                    id: aliquip veniam nulla esse
                  - type: orgs
                    attributes:
                      created_at: '1985-09-30T23:58:36.967Z'
                      description: non
                      disabled: true
                      modified_at: '1991-09-25T22:54:02.029Z'
                      name: adipisicing ea cupidatat sed quis
                      public_id: Excepteur consequat
                      sharing: nulla laboris laborum m
                      url: aliquip ad qui
                    id: ex sunt
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    patch:
      tags:
        - Users
      summary: Update a user
      description: |-
        Edit a user. Can only be used with an application key belonging
        to an administrator user.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                data:
                  attributes:
                    disabled: <boolean>
                    email: <string>
                    name: <string>
                  type: users
                  id: <string>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: user_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the user.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  attributes:
                    created_at: '1981-05-03T06:00:24.095Z'
                    disabled: false
                    email: adipisicing ea exercitation dolore
                    handle: ut exercitation officia laborum
                    icon: culpa in in minim
                    modified_at: '1993-07-30T12:15:25.992Z'
                    name: quis
                    service_account: true
                    status: nulla nostrud
                    title: aute cupidatat occaecat
                    verified: true
                  id: est laborum
                  relationships:
                    org:
                      data:
                        id: 00000000-0000-beef-0000-000000000000
                        type: orgs
                    other_orgs:
                      data: []
                    other_users:
                      data: []
                    roles:
                      data:
                        - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                          type: roles
                        - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                          type: roles
                  type: users
                included:
                  - type: orgs
                    attributes:
                      created_at: '2010-11-10T21:05:13.429Z'
                      description: dolor cupidatat
                      disabled: true
                      modified_at: '1998-01-10T07:34:52.585Z'
                      name: adipisicing proident commodo
                      public_id: proident amet
                      sharing: fugiat nisi ipsum
                      url: aute magna ipsum id
                    id: aliquip veniam nulla esse
                  - type: orgs
                    attributes:
                      created_at: '1985-09-30T23:58:36.967Z'
                      description: non
                      disabled: true
                      modified_at: '1991-09-25T22:54:02.029Z'
                      name: adipisicing ea cupidatat sed quis
                      public_id: Excepteur consequat
                      sharing: nulla laboris laborum m
                      url: aliquip ad qui
                    id: ex sunt
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    delete:
      tags:
        - Users
      summary: Disable a user
      description: |-
        Disable a user. Can only be used with an application key belonging
        to an administrator user.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: user_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the user.
          example: <string>
      responses:
        '204':
          description: No Content
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v2/users/{user_id}/orgs:
    get:
      tags:
        - Users
      summary: Get a user organization
      description: >-
        Get a user organization. Returns the user information and all
        organizations

        joined by this user.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: user_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the user.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  attributes:
                    created_at: '1981-05-03T06:00:24.095Z'
                    disabled: false
                    email: adipisicing ea exercitation dolore
                    handle: ut exercitation officia laborum
                    icon: culpa in in minim
                    modified_at: '1993-07-30T12:15:25.992Z'
                    name: quis
                    service_account: true
                    status: nulla nostrud
                    title: aute cupidatat occaecat
                    verified: true
                  id: est laborum
                  relationships:
                    org:
                      data:
                        id: 00000000-0000-beef-0000-000000000000
                        type: orgs
                    other_orgs:
                      data: []
                    other_users:
                      data: []
                    roles:
                      data:
                        - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                          type: roles
                        - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                          type: roles
                  type: users
                included:
                  - type: orgs
                    attributes:
                      created_at: '2010-11-10T21:05:13.429Z'
                      description: dolor cupidatat
                      disabled: true
                      modified_at: '1998-01-10T07:34:52.585Z'
                      name: adipisicing proident commodo
                      public_id: proident amet
                      sharing: fugiat nisi ipsum
                      url: aute magna ipsum id
                    id: aliquip veniam nulla esse
                  - type: orgs
                    attributes:
                      created_at: '1985-09-30T23:58:36.967Z'
                      description: non
                      disabled: true
                      modified_at: '1991-09-25T22:54:02.029Z'
                      name: adipisicing ea cupidatat sed quis
                      public_id: Excepteur consequat
                      sharing: nulla laboris laborum m
                      url: aliquip ad qui
                    id: ex sunt
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v2/users/{user_id}/permissions:
    get:
      tags:
        - Users
      summary: Get a user permissions
      description: |-
        Get a user permission set. Returns a list of the user’s permissions
        granted by the associated user's roles.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: user_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the user.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - type: permissions
                    attributes:
                      created: '1969-08-13T07:47:40.986Z'
                      description: in esse laborum nostrud sit
                      display_name: et
                      display_type: nostrud Lorem culpa
                      group_name: laborum Ut voluptate fugiat
                      name: cupidata
                      restricted: false
                    id: et Excepteur occaecat
                  - type: permissions
                    attributes:
                      created: '1951-02-27T19:16:21.452Z'
                      description: voluptate amet
                      display_name: amet enim ad
                      display_type: enim id cupidatat
                      group_name: in eu occaecat anim proident
                      name: elit consectetur nulla cupidatat
                      restricted: true
                    id: officia sint
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v2/user_invitations:
    post:
      tags:
        - Users
      summary: Send invitation emails
      description: >-
        Sends emails to one or more users inviting them to join the
        organization.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                data:
                  - type: user_invitations
                    relationships:
                      user:
                        data:
                          id: <string>
                          type: users
                  - type: user_invitations
                    relationships:
                      user:
                        data:
                          id: <string>
                          type: users
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '201':
          description: Created
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - attributes:
                      created_at: '2009-02-04T01:01:39.020Z'
                      expires_at: '2012-10-31T00:06:36.797Z'
                      invite_type: tempor commodo aute
                      uuid: in
                    id: labore
                    type: user_invitations
                  - attributes:
                      created_at: '1971-09-07T05:19:56.489Z'
                      expires_at: '2016-04-28T08:12:43.153Z'
                      invite_type: Excepteur dolor minim esse cupidatat
                      uuid: ma
                    id: eu in dolore cupidatat pariatur
                    type: user_invitations
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v2/user_invitations/{user_invitation_uuid}:
    get:
      tags:
        - Users
      summary: Get a user invitation
      description: Returns a single user invitation by its UUID.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: user_invitation_uuid
          in: path
          schema:
            type: string
          required: true
          description: (Required) The UUID of the user invitation.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  attributes:
                    created_at: '1968-07-04T02:33:32.773Z'
                    expires_at: '2001-10-28T00:54:27.277Z'
                    invite_type: qui
                    uuid: ullamco pariatur est
                  id: in
                  type: user_invitations
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/integration/webhooks/configuration/custom-variables:
    post:
      tags:
        - Webhooks Integration
      summary: Create a custom variable
      description: Creates an endpoint with the name `<CUSTOM_VARIABLE_NAME>`.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                name: CUSTOM_VARIABLE_NAME
                value: CUSTOM_VARIABLE_VALUE
                is_secret: true
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '201':
          description: Created
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                name: CUSTOM_VARIABLE_NAME
                is_secret: true
                value: CUSTOM_VARIABLE_VALUE
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/integration/webhooks/configuration/custom-variables/{custom_variable_name}:
    delete:
      tags:
        - Webhooks Integration
      summary: Delete a custom variable
      description: Deletes the endpoint with the name `<CUSTOM_VARIABLE_NAME>`.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: custom_variable_name
          in: path
          schema:
            type: string
          required: true
          description: (Required) The name of the custom variable.
          example: proident
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    get:
      tags:
        - Webhooks Integration
      summary: Get a custom variable
      description: >-
        Shows the content of the custom variable with the name
        `<CUSTOM_VARIABLE_NAME>`.


        If the custom variable is secret, the value does not return in the

        response payload.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: custom_variable_name
          in: path
          schema:
            type: string
          required: true
          description: (Required) The name of the custom variable.
          example: proident
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                name: CUSTOM_VARIABLE_NAME
                is_secret: true
                value: CUSTOM_VARIABLE_VALUE
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    put:
      tags:
        - Webhooks Integration
      summary: Update a custom variable
      description: Updates the endpoint with the name `<CUSTOM_VARIABLE_NAME>`.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                is_secret: false
                name: CUSTOM_VARIABLE_NAME
                value: CUSTOM_VARIABLE_VALUE
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: custom_variable_name
          in: path
          schema:
            type: string
          required: true
          description: (Required) The name of the custom variable.
          example: proident
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                name: CUSTOM_VARIABLE_NAME
                is_secret: true
                value: CUSTOM_VARIABLE_VALUE
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/integration/webhooks/configuration/webhooks:
    post:
      tags:
        - Webhooks Integration
      summary: Create a webhooks integration
      description: Creates an endpoint with the name `<WEBHOOK_NAME>`.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                name: WEBHOOK_NAME
                url: https://example.com/webhook
                custom_headers: Excepteur quis aliquip
                encode_as: json
                payload: occ
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '201':
          description: Created
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                name: WEBHOOK_NAME
                url: https://example.com/webhook
                custom_headers: Excepteur quis aliquip
                encode_as: json
                payload: occ
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
  /api/v1/integration/webhooks/configuration/webhooks/{webhook_name}:
    delete:
      tags:
        - Webhooks Integration
      summary: Delete a webhook
      description: Deletes the endpoint with the name `<WEBHOOK NAME>`.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: webhook_name
          in: path
          schema:
            type: string
          required: true
          description: (Required) The name of the webhook.
          example: proident
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    get:
      tags:
        - Webhooks Integration
      summary: Get a webhook integration
      description: Gets the content of the webhook with the name `<WEBHOOK_NAME>`.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: webhook_name
          in: path
          schema:
            type: string
          required: true
          description: (Required) The name of the webhook.
          example: proident
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                name: WEBHOOK_NAME
                url: https://example.com/webhook
                custom_headers: Excepteur quis aliquip
                encode_as: json
                payload: occ
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
    put:
      tags:
        - Webhooks Integration
      summary: Update a webhook
      description: Updates the endpoint with the name `<WEBHOOK_NAME>`.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                custom_headers: irure qui tempor
                encode_as: json
                name: WEBHOOK_NAME
                payload: ''
                url: https://example.com/webhook
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: webhook_name
          in: path
          schema:
            type: string
          required: true
          description: (Required) The name of the webhook.
          example: proident
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                name: WEBHOOK_NAME
                url: https://example.com/webhook
                custom_headers: Excepteur quis aliquip
                encode_as: json
                payload: occ
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - Bad Request
                  - Bad Request
